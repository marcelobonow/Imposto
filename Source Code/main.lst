CCS PCH C Compiler, Version 5.015, 5967               28-ago-18 23:14

               Filename:   C:\Users\Administrador.NP152499\Music\Receita Federal\Robo\Source Code\main.lst

               ROM used:   4710 bytes (14%)
                           Largest free fragment is 23958
               RAM used:   42 (2%) at main() level
                           88 (4%) worst case
               Stack used: 12 locations (6 in main + 6 for interrupts)
               Stack size: 31

*
1000:  GOTO   202A
*
1008:  MOVWF  04
100A:  MOVFF  FD8,05
100E:  MOVFF  FE0,06
1012:  MOVLB  0
1014:  MOVFF  FE9,0C
1018:  MOVFF  FEA,07
101C:  MOVFF  FE1,08
1020:  MOVFF  FE2,09
1024:  MOVFF  FD9,0A
1028:  MOVFF  FDA,0B
102C:  MOVFF  FF3,12
1030:  MOVFF  FF4,13
1034:  MOVFF  FFA,14
1038:  MOVFF  00,0E
103C:  MOVFF  01,0F
1040:  MOVFF  02,10
1044:  MOVFF  03,11
1048:  BTFSS  FF2.5
104A:  GOTO   1054
104E:  BTFSC  FF2.2
1050:  GOTO   12CC
1054:  MOVFF  0E,00
1058:  MOVFF  0F,01
105C:  MOVFF  10,02
1060:  MOVFF  11,03
1064:  MOVFF  0C,FE9
1068:  MOVFF  07,FEA
106C:  BSF    07.7
106E:  MOVFF  08,FE1
1072:  MOVFF  09,FE2
1076:  MOVFF  0A,FD9
107A:  MOVFF  0B,FDA
107E:  MOVFF  12,FF3
1082:  MOVFF  13,FF4
1086:  MOVFF  14,FFA
108A:  MOVF   04,W
108C:  MOVFF  06,FE0
1090:  MOVFF  05,FD8
1094:  RETFIE 0
.................... #include <main.h> 
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
1096:  MOVFF  FF2,0D
109A:  BCF    FF2.7
109C:  CLRF   FF7
109E:  ADDLW  B0
10A0:  MOVWF  FF6
10A2:  MOVLW  10
10A4:  ADDWFC FF7,F
10A6:  TBLRD*+
10A8:  MOVF   FF5,W
10AA:  BTFSC  0D.7
10AC:  BSF    FF2.7
10AE:  RETURN 0
10B0:  DATA 28,0C
10B2:  DATA 01,06
*
11DC:  TBLRD*+
11DE:  MOVFF  FF6,4A
11E2:  MOVFF  FF7,4B
11E6:  MOVFF  FF5,4F
11EA:  RCALL  118C
11EC:  MOVFF  4A,FF6
11F0:  MOVFF  4B,FF7
11F4:  DECFSZ 49,F
11F6:  BRA    11DC
11F8:  RETURN 0
11FA:  MOVF   50,W
11FC:  CLRF   01
11FE:  SUBWF  4F,W
1200:  BC    1208
1202:  MOVFF  4F,00
1206:  BRA    1220
1208:  CLRF   00
120A:  MOVLW  08
120C:  MOVWF  51
120E:  RLCF   4F,F
1210:  RLCF   00,F
1212:  MOVF   50,W
1214:  SUBWF  00,W
1216:  BTFSC  FD8.0
1218:  MOVWF  00
121A:  RLCF   01,F
121C:  DECFSZ 51,F
121E:  BRA    120E
1220:  RETURN 0
1222:  MOVLW  20
1224:  BTFSS  4A.4
1226:  MOVLW  30
1228:  MOVWF  4B
122A:  MOVFF  49,00
122E:  BTFSS  49.7
1230:  BRA    1242
1232:  COMF   00,F
1234:  INCF   00,F
1236:  MOVFF  00,49
123A:  MOVLW  2D
123C:  MOVWF  4B
123E:  BSF    4A.7
1240:  BSF    4A.0
1242:  MOVF   01,W
1244:  MOVFF  49,4F
1248:  MOVLW  64
124A:  MOVWF  50
124C:  RCALL  11FA
124E:  MOVFF  00,49
1252:  MOVLW  30
1254:  ADDWF  01,W
1256:  MOVWF  4C
1258:  MOVFF  49,4F
125C:  MOVLW  0A
125E:  MOVWF  50
1260:  RCALL  11FA
1262:  MOVLW  30
1264:  ADDWF  00,W
1266:  MOVWF  4E
1268:  MOVLW  30
126A:  ADDWF  01,W
126C:  MOVWF  4D
126E:  MOVFF  4B,00
1272:  MOVLW  30
1274:  SUBWF  4C,W
1276:  BZ    1280
1278:  BSF    4A.1
127A:  BTFSC  4A.7
127C:  BSF    4A.2
127E:  BRA    12A4
1280:  MOVFF  4B,4C
1284:  MOVLW  20
1286:  MOVWF  4B
1288:  MOVLW  30
128A:  SUBWF  4D,W
128C:  BZ    1296
128E:  BSF    4A.0
1290:  BTFSC  4A.7
1292:  BSF    4A.1
1294:  BRA    12A4
1296:  BTFSS  FD8.2
1298:  BSF    4A.0
129A:  BNZ   12A4
129C:  MOVFF  4C,4D
12A0:  MOVLW  20
12A2:  MOVWF  4C
12A4:  BTFSC  4A.2
12A6:  BRA    12B2
12A8:  BTFSC  4A.1
12AA:  BRA    12B8
12AC:  BTFSC  4A.0
12AE:  BRA    12BE
12B0:  BRA    12C4
12B2:  MOVFF  4B,4F
12B6:  RCALL  118C
12B8:  MOVFF  4C,4F
12BC:  RCALL  118C
12BE:  MOVFF  4D,4F
12C2:  RCALL  118C
12C4:  MOVFF  4E,4F
12C8:  RCALL  118C
12CA:  RETURN 0
*
1396:  DATA 20,64
1398:  DATA 3A,20
139A:  DATA 25,64
139C:  DATA 00,00
139E:  DATA 20,63
13A0:  DATA 3A,20
13A2:  DATA 25,64
13A4:  DATA 00,00
13A6:  DATA 20,49
13A8:  DATA 6E,69
13AA:  DATA 63,69
13AC:  DATA 61,6C
13AE:  DATA 69,7A
13B0:  DATA 61,6E
13B2:  DATA 64,6F
13B4:  DATA 00,00
13B6:  DATA 54,41
13B8:  DATA 20,4E
13BA:  DATA 41,20
13BC:  DATA 50,4F
13BE:  DATA 53,49
13C0:  DATA 43,41
13C2:  DATA 4F,00
13C4:  DATA 45,73
13C6:  DATA 74,61
13C8:  DATA 20,61
13CA:  DATA 20,64
13CC:  DATA 69,72
13CE:  DATA 65,69
13D0:  DATA 74,61
13D2:  DATA 00,00
13D4:  DATA 45,73
13D6:  DATA 74,61
13D8:  DATA 20,61
13DA:  DATA 20,65
13DC:  DATA 73,71
13DE:  DATA 75,65
13E0:  DATA 72,64
13E2:  DATA 61,00
13E4:  DATA 53,65
13E6:  DATA 20,70
13E8:  DATA 65,72
13EA:  DATA 64,65
13EC:  DATA 75,00
*
14DE:  TBLRD*+
14E0:  MOVF   FF5,F
14E2:  BZ    1508
14E4:  MOVFF  FF6,35
14E8:  MOVFF  FF7,36
14EC:  CLRF   16
14EE:  BTFSC  FF2.7
14F0:  BSF    16.7
14F2:  BCF    FF2.7
14F4:  MOVFF  FF5,4F
14F8:  RCALL  118C
14FA:  BTFSC  16.7
14FC:  BSF    FF2.7
14FE:  MOVFF  35,FF6
1502:  MOVFF  36,FF7
1506:  BRA    14DE
1508:  RETURN 0
*
1558:  MOVLW  8E
155A:  MOVWF  00
155C:  MOVFF  3A,01
1560:  MOVFF  39,02
1564:  CLRF   03
1566:  MOVF   01,F
1568:  BNZ   157C
156A:  MOVFF  02,01
156E:  CLRF   02
1570:  MOVLW  08
1572:  SUBWF  00,F
1574:  MOVF   01,F
1576:  BNZ   157C
1578:  CLRF   00
157A:  BRA    158C
157C:  BCF    FD8.0
157E:  BTFSC  01.7
1580:  BRA    158A
1582:  RLCF   02,F
1584:  RLCF   01,F
1586:  DECF   00,F
1588:  BRA    157C
158A:  BCF    01.7
158C:  RETURN 0
158E:  MOVF   39,W
1590:  BTFSC  FD8.2
1592:  BRA    16DE
1594:  MOVWF  45
1596:  MOVF   3D,W
1598:  BTFSC  FD8.2
159A:  BRA    16DE
159C:  SUBWF  45,F
159E:  BNC   15AA
15A0:  MOVLW  7F
15A2:  ADDWF  45,F
15A4:  BTFSC  FD8.0
15A6:  BRA    16DE
15A8:  BRA    15B6
15AA:  MOVLW  81
15AC:  SUBWF  45,F
15AE:  BTFSS  FD8.0
15B0:  BRA    16DE
15B2:  BTFSC  FD8.2
15B4:  BRA    16DE
15B6:  MOVFF  45,00
15BA:  CLRF   01
15BC:  CLRF   02
15BE:  CLRF   03
15C0:  CLRF   44
15C2:  MOVFF  3A,43
15C6:  BSF    43.7
15C8:  MOVFF  3B,42
15CC:  MOVFF  3C,41
15D0:  MOVLW  19
15D2:  MOVWF  45
15D4:  MOVF   40,W
15D6:  SUBWF  41,F
15D8:  BC    15F4
15DA:  MOVLW  01
15DC:  SUBWF  42,F
15DE:  BC    15F4
15E0:  SUBWF  43,F
15E2:  BC    15F4
15E4:  SUBWF  44,F
15E6:  BC    15F4
15E8:  INCF   44,F
15EA:  INCF   43,F
15EC:  INCF   42,F
15EE:  MOVF   40,W
15F0:  ADDWF  41,F
15F2:  BRA    1644
15F4:  MOVF   3F,W
15F6:  SUBWF  42,F
15F8:  BC    161E
15FA:  MOVLW  01
15FC:  SUBWF  43,F
15FE:  BC    161E
1600:  SUBWF  44,F
1602:  BC    161E
1604:  INCF   44,F
1606:  INCF   43,F
1608:  MOVF   3F,W
160A:  ADDWF  42,F
160C:  MOVF   40,W
160E:  ADDWF  41,F
1610:  BNC   1644
1612:  INCF   42,F
1614:  BNZ   1644
1616:  INCF   43,F
1618:  BNZ   1644
161A:  INCF   44,F
161C:  BRA    1644
161E:  MOVF   3E,W
1620:  IORLW  80
1622:  SUBWF  43,F
1624:  BC    1642
1626:  MOVLW  01
1628:  SUBWF  44,F
162A:  BC    1642
162C:  INCF   44,F
162E:  MOVF   3E,W
1630:  IORLW  80
1632:  ADDWF  43,F
1634:  MOVF   3F,W
1636:  ADDWF  42,F
1638:  BNC   160C
163A:  INCF   43,F
163C:  BNZ   160C
163E:  INCF   44,F
1640:  BRA    160C
1642:  BSF    03.0
1644:  DECFSZ 45,F
1646:  BRA    164A
1648:  BRA    1660
164A:  BCF    FD8.0
164C:  RLCF   41,F
164E:  RLCF   42,F
1650:  RLCF   43,F
1652:  RLCF   44,F
1654:  BCF    FD8.0
1656:  RLCF   03,F
1658:  RLCF   02,F
165A:  RLCF   01,F
165C:  RLCF   46,F
165E:  BRA    15D4
1660:  BTFSS  46.0
1662:  BRA    1670
1664:  BCF    FD8.0
1666:  RRCF   01,F
1668:  RRCF   02,F
166A:  RRCF   03,F
166C:  RRCF   46,F
166E:  BRA    1674
1670:  DECF   00,F
1672:  BZ    16DE
1674:  BTFSC  46.7
1676:  BRA    16B4
1678:  BCF    FD8.0
167A:  RLCF   41,F
167C:  RLCF   42,F
167E:  RLCF   43,F
1680:  RLCF   44,F
1682:  MOVF   40,W
1684:  SUBWF  41,F
1686:  BC    1696
1688:  MOVLW  01
168A:  SUBWF  42,F
168C:  BC    1696
168E:  SUBWF  43,F
1690:  BC    1696
1692:  SUBWF  44,F
1694:  BNC   16CA
1696:  MOVF   3F,W
1698:  SUBWF  42,F
169A:  BC    16A6
169C:  MOVLW  01
169E:  SUBWF  43,F
16A0:  BC    16A6
16A2:  SUBWF  44,F
16A4:  BNC   16CA
16A6:  MOVF   3E,W
16A8:  IORLW  80
16AA:  SUBWF  43,F
16AC:  BC    16B4
16AE:  MOVLW  01
16B0:  SUBWF  44,F
16B2:  BNC   16CA
16B4:  INCF   03,F
16B6:  BNZ   16CA
16B8:  INCF   02,F
16BA:  BNZ   16CA
16BC:  INCF   01,F
16BE:  BNZ   16CA
16C0:  INCF   00,F
16C2:  BZ    16DE
16C4:  RRCF   01,F
16C6:  RRCF   02,F
16C8:  RRCF   03,F
16CA:  MOVFF  3A,45
16CE:  MOVF   3E,W
16D0:  XORWF  45,F
16D2:  BTFSS  45.7
16D4:  BRA    16DA
16D6:  BSF    01.7
16D8:  BRA    16E6
16DA:  BCF    01.7
16DC:  BRA    16E6
16DE:  CLRF   00
16E0:  CLRF   01
16E2:  CLRF   02
16E4:  CLRF   03
16E6:  RETURN 0
16E8:  MOVFF  36,3D
16EC:  MOVF   3A,W
16EE:  XORWF  3D,F
16F0:  BTFSS  3D.7
16F2:  BRA    16FE
16F4:  BCF    FD8.2
16F6:  BCF    FD8.0
16F8:  BTFSC  36.7
16FA:  BSF    FD8.0
16FC:  BRA    175C
16FE:  MOVFF  36,3D
1702:  MOVFF  39,3E
1706:  MOVF   35,W
1708:  SUBWF  3E,F
170A:  BZ    1718
170C:  BTFSS  3D.7
170E:  BRA    175C
1710:  MOVF   FD8,W
1712:  XORLW  01
1714:  MOVWF  FD8
1716:  BRA    175C
1718:  MOVFF  3A,3E
171C:  MOVF   36,W
171E:  SUBWF  3E,F
1720:  BZ    172E
1722:  BTFSS  3D.7
1724:  BRA    175C
1726:  MOVF   FD8,W
1728:  XORLW  01
172A:  MOVWF  FD8
172C:  BRA    175C
172E:  MOVFF  3B,3E
1732:  MOVF   37,W
1734:  SUBWF  3E,F
1736:  BZ    1744
1738:  BTFSS  3D.7
173A:  BRA    175C
173C:  MOVF   FD8,W
173E:  XORLW  01
1740:  MOVWF  FD8
1742:  BRA    175C
1744:  MOVFF  3C,3E
1748:  MOVF   38,W
174A:  SUBWF  3E,F
174C:  BZ    175A
174E:  BTFSS  3D.7
1750:  BRA    175C
1752:  MOVF   FD8,W
1754:  XORLW  01
1756:  MOVWF  FD8
1758:  BRA    175C
175A:  BCF    FD8.0
175C:  RETURN 0
*
17D2:  MOVF   35,W
17D4:  BTFSC  FD8.2
17D6:  BRA    18BA
17D8:  MOVWF  00
17DA:  MOVF   39,W
17DC:  BTFSC  FD8.2
17DE:  BRA    18BA
17E0:  ADDWF  00,F
17E2:  BNC   17EC
17E4:  MOVLW  81
17E6:  ADDWF  00,F
17E8:  BC    18BA
17EA:  BRA    17F4
17EC:  MOVLW  7F
17EE:  SUBWF  00,F
17F0:  BNC   18BA
17F2:  BZ    18BA
17F4:  MOVFF  36,3D
17F8:  MOVF   3A,W
17FA:  XORWF  3D,F
17FC:  BSF    36.7
17FE:  BSF    3A.7
1800:  MOVF   38,W
1802:  MULWF  3C
1804:  MOVFF  FF4,3F
1808:  MOVF   37,W
180A:  MULWF  3B
180C:  MOVFF  FF4,03
1810:  MOVFF  FF3,3E
1814:  MULWF  3C
1816:  MOVF   FF3,W
1818:  ADDWF  3F,F
181A:  MOVF   FF4,W
181C:  ADDWFC 3E,F
181E:  MOVLW  00
1820:  ADDWFC 03,F
1822:  MOVF   38,W
1824:  MULWF  3B
1826:  MOVF   FF3,W
1828:  ADDWF  3F,F
182A:  MOVF   FF4,W
182C:  ADDWFC 3E,F
182E:  MOVLW  00
1830:  CLRF   02
1832:  ADDWFC 03,F
1834:  ADDWFC 02,F
1836:  MOVF   36,W
1838:  MULWF  3C
183A:  MOVF   FF3,W
183C:  ADDWF  3E,F
183E:  MOVF   FF4,W
1840:  ADDWFC 03,F
1842:  MOVLW  00
1844:  ADDWFC 02,F
1846:  MOVF   36,W
1848:  MULWF  3B
184A:  MOVF   FF3,W
184C:  ADDWF  03,F
184E:  MOVF   FF4,W
1850:  ADDWFC 02,F
1852:  MOVLW  00
1854:  CLRF   01
1856:  ADDWFC 01,F
1858:  MOVF   38,W
185A:  MULWF  3A
185C:  MOVF   FF3,W
185E:  ADDWF  3E,F
1860:  MOVF   FF4,W
1862:  ADDWFC 03,F
1864:  MOVLW  00
1866:  ADDWFC 02,F
1868:  ADDWFC 01,F
186A:  MOVF   37,W
186C:  MULWF  3A
186E:  MOVF   FF3,W
1870:  ADDWF  03,F
1872:  MOVF   FF4,W
1874:  ADDWFC 02,F
1876:  MOVLW  00
1878:  ADDWFC 01,F
187A:  MOVF   36,W
187C:  MULWF  3A
187E:  MOVF   FF3,W
1880:  ADDWF  02,F
1882:  MOVF   FF4,W
1884:  ADDWFC 01,F
1886:  INCF   00,F
1888:  BTFSC  01.7
188A:  BRA    1896
188C:  RLCF   3E,F
188E:  RLCF   03,F
1890:  RLCF   02,F
1892:  RLCF   01,F
1894:  DECF   00,F
1896:  MOVLW  00
1898:  BTFSS  3E.7
189A:  BRA    18B0
189C:  INCF   03,F
189E:  ADDWFC 02,F
18A0:  ADDWFC 01,F
18A2:  MOVF   01,W
18A4:  BNZ   18B0
18A6:  MOVF   02,W
18A8:  BNZ   18B0
18AA:  MOVF   03,W
18AC:  BNZ   18B0
18AE:  INCF   00,F
18B0:  BTFSC  3D.7
18B2:  BSF    01.7
18B4:  BTFSS  3D.7
18B6:  BCF    01.7
18B8:  BRA    18C2
18BA:  CLRF   00
18BC:  CLRF   01
18BE:  CLRF   02
18C0:  CLRF   03
18C2:  RETURN 0
18C4:  MOVLW  80
18C6:  BTFSC  FD8.1
18C8:  XORWF  3E,F
18CA:  CLRF   43
18CC:  CLRF   44
18CE:  MOVFF  3A,42
18D2:  MOVF   3E,W
18D4:  XORWF  42,F
18D6:  MOVF   39,W
18D8:  BTFSC  FD8.2
18DA:  BRA    1A94
18DC:  MOVWF  41
18DE:  MOVWF  00
18E0:  MOVF   3D,W
18E2:  BTFSC  FD8.2
18E4:  BRA    1AA6
18E6:  SUBWF  41,F
18E8:  BTFSC  FD8.2
18EA:  BRA    19EE
18EC:  BNC   1968
18EE:  MOVFF  3E,47
18F2:  BSF    47.7
18F4:  MOVFF  3F,46
18F8:  MOVFF  40,45
18FC:  CLRF   44
18FE:  BCF    FD8.0
1900:  RRCF   47,F
1902:  RRCF   46,F
1904:  RRCF   45,F
1906:  RRCF   44,F
1908:  DECFSZ 41,F
190A:  BRA    18FC
190C:  BTFSS  42.7
190E:  BRA    1916
1910:  BSF    43.0
1912:  BRA    1ACE
1914:  BCF    43.0
1916:  BCF    41.0
1918:  BSF    43.4
191A:  CLRF   FEA
191C:  MOVLW  3C
191E:  MOVWF  FE9
1920:  BRA    1AF4
1922:  BCF    43.4
1924:  BTFSC  42.7
1926:  BRA    193C
1928:  BTFSS  41.0
192A:  BRA    1952
192C:  RRCF   47,F
192E:  RRCF   46,F
1930:  RRCF   45,F
1932:  RRCF   44,F
1934:  INCF   00,F
1936:  BTFSC  FD8.2
1938:  BRA    1AC4
193A:  BRA    1952
193C:  BTFSC  47.7
193E:  BRA    1958
1940:  BCF    FD8.0
1942:  RLCF   44,F
1944:  RLCF   45,F
1946:  RLCF   46,F
1948:  RLCF   47,F
194A:  DECF   00,F
194C:  BTFSC  FD8.2
194E:  BRA    1AC4
1950:  BRA    193C
1952:  BSF    43.6
1954:  BRA    1A2C
1956:  BCF    43.6
1958:  MOVFF  3A,42
195C:  BTFSS  3A.7
195E:  BRA    1964
1960:  BSF    47.7
1962:  BRA    1AB6
1964:  BCF    47.7
1966:  BRA    1AB6
1968:  MOVFF  3D,41
196C:  MOVFF  3D,00
1970:  MOVF   39,W
1972:  SUBWF  41,F
1974:  MOVFF  3A,47
1978:  BSF    47.7
197A:  MOVFF  3B,46
197E:  MOVFF  3C,45
1982:  CLRF   44
1984:  BCF    FD8.0
1986:  RRCF   47,F
1988:  RRCF   46,F
198A:  RRCF   45,F
198C:  RRCF   44,F
198E:  DECFSZ 41,F
1990:  BRA    1982
1992:  BTFSS  42.7
1994:  BRA    199C
1996:  BSF    43.1
1998:  BRA    1ACE
199A:  BCF    43.1
199C:  BCF    41.0
199E:  BSF    43.5
19A0:  CLRF   FEA
19A2:  MOVLW  40
19A4:  MOVWF  FE9
19A6:  BRA    1AF4
19A8:  BCF    43.5
19AA:  BTFSC  42.7
19AC:  BRA    19C2
19AE:  BTFSS  41.0
19B0:  BRA    19D8
19B2:  RRCF   47,F
19B4:  RRCF   46,F
19B6:  RRCF   45,F
19B8:  RRCF   44,F
19BA:  INCF   00,F
19BC:  BTFSC  FD8.2
19BE:  BRA    1AC4
19C0:  BRA    19D8
19C2:  BTFSC  47.7
19C4:  BRA    19DE
19C6:  BCF    FD8.0
19C8:  RLCF   44,F
19CA:  RLCF   45,F
19CC:  RLCF   46,F
19CE:  RLCF   47,F
19D0:  DECF   00,F
19D2:  BTFSC  FD8.2
19D4:  BRA    1AC4
19D6:  BRA    19C2
19D8:  BSF    43.7
19DA:  BRA    1A2C
19DC:  BCF    43.7
19DE:  MOVFF  3E,42
19E2:  BTFSS  3E.7
19E4:  BRA    19EA
19E6:  BSF    47.7
19E8:  BRA    1AB6
19EA:  BCF    47.7
19EC:  BRA    1AB6
19EE:  MOVFF  3E,47
19F2:  BSF    47.7
19F4:  MOVFF  3F,46
19F8:  MOVFF  40,45
19FC:  BTFSS  42.7
19FE:  BRA    1A08
1A00:  BCF    47.7
1A02:  BSF    43.2
1A04:  BRA    1ACE
1A06:  BCF    43.2
1A08:  CLRF   44
1A0A:  BCF    41.0
1A0C:  CLRF   FEA
1A0E:  MOVLW  3C
1A10:  MOVWF  FE9
1A12:  BRA    1AF4
1A14:  BTFSC  42.7
1A16:  BRA    1A50
1A18:  MOVFF  3A,42
1A1C:  BTFSS  41.0
1A1E:  BRA    1A2C
1A20:  RRCF   47,F
1A22:  RRCF   46,F
1A24:  RRCF   45,F
1A26:  RRCF   44,F
1A28:  INCF   00,F
1A2A:  BZ    1AC4
1A2C:  BTFSS  44.7
1A2E:  BRA    1A46
1A30:  INCF   45,F
1A32:  BNZ   1A46
1A34:  INCF   46,F
1A36:  BNZ   1A46
1A38:  INCF   47,F
1A3A:  BNZ   1A46
1A3C:  RRCF   47,F
1A3E:  RRCF   46,F
1A40:  RRCF   45,F
1A42:  INCF   00,F
1A44:  BZ    1AC4
1A46:  BTFSC  43.6
1A48:  BRA    1956
1A4A:  BTFSC  43.7
1A4C:  BRA    19DC
1A4E:  BRA    1A88
1A50:  MOVLW  80
1A52:  XORWF  47,F
1A54:  BTFSS  47.7
1A56:  BRA    1A60
1A58:  BRA    1ACE
1A5A:  MOVFF  3E,42
1A5E:  BRA    1A74
1A60:  MOVFF  3A,42
1A64:  MOVF   47,F
1A66:  BNZ   1A74
1A68:  MOVF   46,F
1A6A:  BNZ   1A74
1A6C:  MOVF   45,F
1A6E:  BNZ   1A74
1A70:  CLRF   00
1A72:  BRA    1AB6
1A74:  BTFSC  47.7
1A76:  BRA    1A88
1A78:  BCF    FD8.0
1A7A:  RLCF   44,F
1A7C:  RLCF   45,F
1A7E:  RLCF   46,F
1A80:  RLCF   47,F
1A82:  DECFSZ 00,F
1A84:  BRA    1A74
1A86:  BRA    1AC4
1A88:  BTFSS  42.7
1A8A:  BRA    1A90
1A8C:  BSF    47.7
1A8E:  BRA    1AB6
1A90:  BCF    47.7
1A92:  BRA    1AB6
1A94:  MOVFF  3D,00
1A98:  MOVFF  3E,47
1A9C:  MOVFF  3F,46
1AA0:  MOVFF  40,45
1AA4:  BRA    1AB6
1AA6:  MOVFF  39,00
1AAA:  MOVFF  3A,47
1AAE:  MOVFF  3B,46
1AB2:  MOVFF  3C,45
1AB6:  MOVFF  47,01
1ABA:  MOVFF  46,02
1ABE:  MOVFF  45,03
1AC2:  BRA    1B2C
1AC4:  CLRF   00
1AC6:  CLRF   01
1AC8:  CLRF   02
1ACA:  CLRF   03
1ACC:  BRA    1B2C
1ACE:  CLRF   44
1AD0:  COMF   45,F
1AD2:  COMF   46,F
1AD4:  COMF   47,F
1AD6:  COMF   44,F
1AD8:  INCF   44,F
1ADA:  BNZ   1AE6
1ADC:  INCF   45,F
1ADE:  BNZ   1AE6
1AE0:  INCF   46,F
1AE2:  BNZ   1AE6
1AE4:  INCF   47,F
1AE6:  BTFSC  43.0
1AE8:  BRA    1914
1AEA:  BTFSC  43.1
1AEC:  BRA    199A
1AEE:  BTFSC  43.2
1AF0:  BRA    1A06
1AF2:  BRA    1A5A
1AF4:  MOVF   FEF,W
1AF6:  ADDWF  45,F
1AF8:  BNC   1B04
1AFA:  INCF   46,F
1AFC:  BNZ   1B04
1AFE:  INCF   47,F
1B00:  BTFSC  FD8.2
1B02:  BSF    41.0
1B04:  MOVF   FED,F
1B06:  MOVF   FEF,W
1B08:  ADDWF  46,F
1B0A:  BNC   1B12
1B0C:  INCF   47,F
1B0E:  BTFSC  FD8.2
1B10:  BSF    41.0
1B12:  MOVF   FED,F
1B14:  MOVF   FEF,W
1B16:  BTFSC  FEF.7
1B18:  BRA    1B1C
1B1A:  XORLW  80
1B1C:  ADDWF  47,F
1B1E:  BTFSC  FD8.0
1B20:  BSF    41.0
1B22:  BTFSC  43.4
1B24:  BRA    1922
1B26:  BTFSC  43.5
1B28:  BRA    19A8
1B2A:  BRA    1A14
1B2C:  RETURN 0
1B2E:  MOVLW  8E
1B30:  MOVWF  00
1B32:  MOVF   35,W
1B34:  SUBWF  00,F
1B36:  MOVFF  36,02
1B3A:  MOVFF  37,01
1B3E:  BSF    02.7
1B40:  MOVF   00,F
1B42:  BZ    1B56
1B44:  BCF    FD8.0
1B46:  MOVF   02,F
1B48:  BNZ   1B4E
1B4A:  MOVF   01,F
1B4C:  BZ    1B56
1B4E:  RRCF   02,F
1B50:  RRCF   01,F
1B52:  DECFSZ 00,F
1B54:  BRA    1B44
1B56:  BTFSS  36.7
1B58:  BRA    1B64
1B5A:  COMF   01,F
1B5C:  COMF   02,F
1B5E:  INCF   01,F
1B60:  BTFSC  FD8.2
1B62:  INCF   02,F
1B64:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=48MHz,crystal=20MHz) 
*
10B4:  MOVLW  01
10B6:  SUBWF  56,F
10B8:  BNC   10D2
10BA:  CLRF   FEA
10BC:  MOVLW  56
10BE:  MOVWF  FE9
10C0:  MOVF   FEF,W
10C2:  BZ    10D2
10C4:  MOVLW  02
10C6:  MOVWF  00
10C8:  DECFSZ 00,F
10CA:  BRA    10C8
10CC:  BRA    10CE
10CE:  DECFSZ FEF,F
10D0:  BRA    10C4
10D2:  RETURN 0
*
1142:  CLRF   FEA
1144:  MOVLW  50
1146:  MOVWF  FE9
1148:  MOVF   FEF,W
114A:  BZ    1168
114C:  MOVLW  0F
114E:  MOVWF  01
1150:  CLRF   00
1152:  DECFSZ 00,F
1154:  BRA    1152
1156:  DECFSZ 01,F
1158:  BRA    1150
115A:  MOVLW  8F
115C:  MOVWF  00
115E:  DECFSZ 00,F
1160:  BRA    115E
1162:  NOP   
1164:  DECFSZ FEF,F
1166:  BRA    114C
1168:  RETURN 0
....................  
.................... // #build(reset=0x1000, interrupt=0x1008) 
.................... // #org 0x000, 0xfff { } 
....................  
.................... #include <Motor1.c> 
.................... #build(reset = 0x1000, interrupt = 0x1008) 
.................... #org 0x000, 0xfff {} 
....................  
.................... #define m1p1 pin_e2 
.................... #define m1p2 pin_c0 
.................... #define m2p1 pin_d0 
.................... #define m2p2 pin_d1 
....................  
.................... void tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void frente() 
.................... { 
....................       output_bit(m1p1, 1); 
*
1BB6:  BSF    F8D.2
1BB8:  BCF    F96.2
....................       output_bit(m1p2, 0); 
1BBA:  BCF    F8B.0
1BBC:  BCF    F94.0
....................       output_bit(m2p1, 0); 
1BBE:  BCF    F8C.0
1BC0:  BCF    F95.0
....................       output_bit(m2p2, 1); 
1BC2:  BSF    F8C.1
1BC4:  BCF    F95.1
1BC6:  GOTO   1E24 (RETURN)
.................... } 
....................  
.................... void gira_esquerda() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void gira_direita() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_frente() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_frente() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void para() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void AllForward() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
.................... void AllBackwards() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void LeftBackwardRightForward() 
.................... { 
....................       output_bit(m1p1, 1); 
*
17AC:  BSF    F8D.2
17AE:  BCF    F96.2
....................       output_bit(m1p2, 0); 
17B0:  BCF    F8B.0
17B2:  BCF    F94.0
....................       output_bit(m2p1, 1); 
17B4:  BSF    F8C.0
17B6:  BCF    F95.0
....................       output_bit(m2p2, 0); 
17B8:  BCF    F8C.1
17BA:  BCF    F95.1
17BC:  GOTO   1CFA (RETURN)
.................... } 
.................... void RightBackwardLeftForward() 
.................... { 
....................       output_bit(m1p1, 0); 
17C0:  BCF    F8D.2
17C2:  BCF    F96.2
....................       output_bit(m1p2, 1); 
17C4:  BSF    F8B.0
17C6:  BCF    F94.0
....................       output_bit(m2p1, 0); 
17C8:  BCF    F8C.0
17CA:  BCF    F95.0
....................       output_bit(m2p2, 1); 
17CC:  BSF    F8C.1
17CE:  BCF    F95.1
17D0:  RETURN 0
.................... } 
....................  
.................... void MotorInitialize() 
.................... { 
....................       setup_timer_2(T2_DIV_BY_16, 255, 1); //341 us overflow, 341 us interrupt 
*
1490:  MOVLW  00
1492:  IORLW  06
1494:  MOVWF  FCA
1496:  MOVLW  FF
1498:  MOVWF  FCB
....................  
....................       setup_ccp1(CCP_PWM | CCP_SHUTDOWN_AC_L | CCP_SHUTDOWN_BD_L); 
149A:  BCF    F94.2
149C:  BCF    F8B.2
149E:  MOVLW  0C
14A0:  MOVWF  FBD
14A2:  CLRF   FB7
14A4:  CLRF   FB6
....................       setup_ccp2(CCP_PWM); 
14A6:  BCF    F94.1
14A8:  BCF    F8B.1
14AA:  MOVWF  FBA
14AC:  GOTO   14DA (RETURN)
.................... } 
....................  
.................... void SetBothPwm(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
175E:  MOVFF  36,02
1762:  MOVFF  35,01
1766:  RRCF   02,F
1768:  RRCF   01,F
176A:  RRCF   02,F
176C:  RRCF   01,F
176E:  RRCF   02,F
1770:  MOVFF  01,FBE
1774:  RRCF   02,F
1776:  RRCF   02,W
1778:  ANDLW  30
177A:  MOVWF  00
177C:  MOVF   FBD,W
177E:  ANDLW  CF
1780:  IORWF  00,W
1782:  MOVWF  FBD
....................       set_pwm2_duty((int16)vel); //-50); 
1784:  MOVFF  36,02
1788:  MOVFF  35,01
178C:  RRCF   02,F
178E:  RRCF   01,F
1790:  RRCF   02,F
1792:  RRCF   01,F
1794:  RRCF   02,F
1796:  MOVFF  01,FBB
179A:  RRCF   02,F
179C:  RRCF   02,W
179E:  ANDLW  30
17A0:  MOVWF  00
17A2:  MOVF   FBA,W
17A4:  ANDLW  CF
17A6:  IORWF  00,W
17A8:  MOVWF  FBA
17AA:  RETURN 0
.................... } 
....................  
.................... void SetRight(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
1B8E:  MOVFF  36,02
1B92:  MOVFF  35,01
1B96:  RRCF   02,F
1B98:  RRCF   01,F
1B9A:  RRCF   02,F
1B9C:  RRCF   01,F
1B9E:  RRCF   02,F
1BA0:  MOVFF  01,FBE
1BA4:  RRCF   02,F
1BA6:  RRCF   02,W
1BA8:  ANDLW  30
1BAA:  MOVWF  00
1BAC:  MOVF   FBD,W
1BAE:  ANDLW  CF
1BB0:  IORWF  00,W
1BB2:  MOVWF  FBD
1BB4:  RETURN 0
.................... } 
.................... void SetLeft(int16 vel) 
.................... { 
....................       set_pwm2_duty((int16)vel); 
*
1B66:  MOVFF  36,02
1B6A:  MOVFF  35,01
1B6E:  RRCF   02,F
1B70:  RRCF   01,F
1B72:  RRCF   02,F
1B74:  RRCF   01,F
1B76:  RRCF   02,F
1B78:  MOVFF  01,FBB
1B7C:  RRCF   02,F
1B7E:  RRCF   02,W
1B80:  ANDLW  30
1B82:  MOVWF  00
1B84:  MOVF   FBA,W
1B86:  ANDLW  CF
1B88:  IORWF  00,W
1B8A:  MOVWF  FBA
1B8C:  RETURN 0
.................... } 
....................  
.................... #include <LCD_KIT.c> 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipula��o de m�dulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: F�bio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
.................... /* 
.................... lcd_cursor_on()                        fun��es LCD 
.................... lcd_cursor_pisca() 
.................... lcd_cursor_off() 
.................... lcd_corre_esquerda() 
.................... lcd_corre_direita() 
.................... lcd_envia_nibble( byte dado ) 
.................... lcd_le_byte() 
.................... lcd_ini() 
.................... lcd_pos_xy( byte x, byte y) 
.................... lcd_escreve( char c)                  \f  Clear display                            //// 
....................                                             \n  Go to start of second line               //// 
....................                                   \b  Move back one position                   //// 
....................  
.................... lcd_le( byte x, byte y) 
.................... lcd_apaga() 
.................... { 
....................  
.................... */ 
.................... // As defini��es a seguir s�o utilizadas para acesso aos pinos do display 
.................... // caso o pino RW n�o seja utilizado, comente a defini��o lcd_rw 
.................... #ifndef lcd_enable 
....................    #define lcd_rs         pin_d2      // pino rs do LCD 
....................    #define lcd_enable     pin_d3      // pino enable do LCD 
....................    #define lcd_d4         pin_d4      // pino de dados d4 do LCD 
....................    #define lcd_d5         pin_d5      // pino de dados d5 do LCD 
....................    #define lcd_d6         pin_d6      // pino de dados d6 do LCD 
....................    #define lcd_d7         pin_d7   // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endere�o da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seq��ncia de inicializa��o do m�dulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................  
.................... /*   O 0x20 eh p configurar o tipo do display e talz. 
....................    O Segundo numero configura o modo do cursor, sendo: 
....................                -> 0xf Cursor piscante 
....................                -> 0xe Cursor comum 
....................                -> 0xc Sem cursor 
....................    O terceiro (1) limpa o display 
....................    O Quarto volta com o cursor. 
.................... */ 
....................  
.................... byte lcd_le_byte() 
.................... // l� um byte do LCD (somente com pino RW) 
.................... { 
....................    byte dado; 
....................    // configura os pinos de dados como entradas 
....................    input(lcd_d4); 
....................    input(lcd_d5); 
....................    input(lcd_d6); 
....................    input(lcd_d7); 
....................    // se o pino rw for utilizado, coloca em 1 
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_high(lcd_enable); // habilita display 
....................    dado = 0;   // zera a vari�vel de leitura 
....................    // l� os quatro bits mais significativos 
....................    if (input(lcd_d7)) bit_set(dado,7); 
....................    if (input(lcd_d6)) bit_set(dado,6); 
....................    if (input(lcd_d5)) bit_set(dado,5); 
....................    if (input(lcd_d4)) bit_set(dado,4); 
....................    // d� um pulso na linha enable 
....................    output_low(lcd_enable); 
....................    output_high(lcd_enable); 
....................    // l� os quatro bits menos significativos 
....................    if (input(lcd_d7)) bit_set(dado,3); 
....................    if (input(lcd_d6)) bit_set(dado,2); 
....................    if (input(lcd_d5)) bit_set(dado,1); 
....................    if (input(lcd_d4)) bit_set(dado,0); 
....................    output_low(lcd_enable);   // desabilita o display 
....................    return dado;   // retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
....................    // coloca os quatro bits nas saidas 
....................    output_bit(lcd_d4,bit_test(dado,0)); 
*
10D4:  BTFSC  57.0
10D6:  BRA    10DC
10D8:  BCF    F8C.4
10DA:  BRA    10DE
10DC:  BSF    F8C.4
10DE:  BCF    F95.4
....................    output_bit(lcd_d5,bit_test(dado,1)); 
10E0:  BTFSC  57.1
10E2:  BRA    10E8
10E4:  BCF    F8C.5
10E6:  BRA    10EA
10E8:  BSF    F8C.5
10EA:  BCF    F95.5
....................    output_bit(lcd_d6,bit_test(dado,2)); 
10EC:  BTFSC  57.2
10EE:  BRA    10F4
10F0:  BCF    F8C.6
10F2:  BRA    10F6
10F4:  BSF    F8C.6
10F6:  BCF    F95.6
....................    output_bit(lcd_d7,bit_test(dado,3)); 
10F8:  BTFSC  57.3
10FA:  BRA    1100
10FC:  BCF    F8C.7
10FE:  BRA    1102
1100:  BSF    F8C.7
1102:  BCF    F95.7
....................    // d� um pulso na linha enable 
....................    output_high(lcd_enable); 
1104:  BCF    F95.3
1106:  BSF    F8C.3
....................    output_low(lcd_enable); 
1108:  BCF    F95.3
110A:  BCF    F8C.3
110C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
....................    // coloca a linha rs em 0 
....................    output_low(lcd_rs); 
110E:  BCF    F95.2
1110:  BCF    F8C.2
....................    // aguarda o display ficar desocupado 
....................    //while ( bit_test(lcd_le_byte(),7) ) ; 
....................    // configura a linha rs dependendo do modo selecionado 
....................    output_bit(lcd_rs,endereco); 
1112:  MOVF   54,F
1114:  BNZ   111A
1116:  BCF    F8C.2
1118:  BRA    111C
111A:  BSF    F8C.2
111C:  BCF    F95.2
....................    delay_us(100);   // aguarda 100 us 
111E:  MOVLW  64
1120:  MOVWF  56
1122:  RCALL  10B4
....................    // caso a linha rw esteja definida, coloca em 0 
....................    #ifdef lcd_rw 
....................       output_low(lcd_rw); 
....................    #endif 
....................    // desativa linha enable 
....................    output_low(lcd_enable); 
1124:  BCF    F95.3
1126:  BCF    F8C.3
....................    // envia a primeira parte do byte 
....................    lcd_envia_nibble(dado >> 4); 
1128:  SWAPF  55,W
112A:  MOVWF  56
112C:  MOVLW  0F
112E:  ANDWF  56,F
1130:  MOVFF  56,57
1134:  RCALL  10D4
....................    // envia a segunda parte do byte 
....................    lcd_envia_nibble(dado & 0x0f); 
1136:  MOVF   55,W
1138:  ANDLW  0F
113A:  MOVWF  56
113C:  MOVWF  57
113E:  RCALL  10D4
1140:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicializa��o do display 
.................... { 
....................    byte conta; 
....................    output_low(lcd_d4); 
*
13EE:  BCF    F95.4
13F0:  BCF    F8C.4
....................    output_low(lcd_d5); 
13F2:  BCF    F95.5
13F4:  BCF    F8C.5
....................    output_low(lcd_d6); 
13F6:  BCF    F95.6
13F8:  BCF    F8C.6
....................    output_low(lcd_d7); 
13FA:  BCF    F95.7
13FC:  BCF    F8C.7
....................    output_low(lcd_rs); 
13FE:  BCF    F95.2
1400:  BCF    F8C.2
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_low(lcd_enable); 
1402:  BCF    F95.3
1404:  BCF    F8C.3
1406:  CLRF   16
1408:  BTFSC  FF2.7
140A:  BSF    16.7
140C:  BCF    FF2.7
....................    delay_ms(15); 
140E:  MOVLW  0F
1410:  MOVWF  50
1412:  RCALL  1142
1414:  BTFSC  16.7
1416:  BSF    FF2.7
....................    // envia uma seq��ncia de 3 vezes 0x03 
....................    // e depois 0x02 para configurar o m�dulo 
....................    // para modo de 4 bits 
....................    for(conta=1;conta<=3;++conta) 
1418:  MOVLW  01
141A:  MOVWF  29
141C:  MOVF   29,W
141E:  SUBLW  03
1420:  BNC   144A
1422:  CLRF   16
1424:  BTFSC  FF2.7
1426:  BSF    16.7
1428:  BCF    FF2.7
....................    { 
....................       lcd_envia_nibble(3); 
142A:  MOVLW  03
142C:  MOVWF  57
142E:  RCALL  10D4
1430:  BTFSC  16.7
1432:  BSF    FF2.7
1434:  CLRF   16
1436:  BTFSC  FF2.7
1438:  BSF    16.7
143A:  BCF    FF2.7
....................       delay_ms(5); 
143C:  MOVLW  05
143E:  MOVWF  50
1440:  RCALL  1142
1442:  BTFSC  16.7
1444:  BSF    FF2.7
1446:  INCF   29,F
1448:  BRA    141C
144A:  CLRF   16
144C:  BTFSC  FF2.7
144E:  BSF    16.7
1450:  BCF    FF2.7
....................    } 
....................    lcd_envia_nibble(2); 
1452:  MOVLW  02
1454:  MOVWF  57
1456:  RCALL  10D4
1458:  BTFSC  16.7
145A:  BSF    FF2.7
....................    // envia string de inicializa��o do display 
....................    for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
145C:  CLRF   29
145E:  MOVF   29,W
1460:  SUBLW  03
1462:  BNC   148C
1464:  CLRF   03
1466:  MOVF   29,W
1468:  MOVFF  FF2,2A
146C:  BCF    FF2.7
146E:  RCALL  1096
1470:  BTFSC  2A.7
1472:  BSF    FF2.7
1474:  MOVWF  2A
1476:  CLRF   16
1478:  BTFSC  FF2.7
147A:  BSF    16.7
147C:  BCF    FF2.7
147E:  CLRF   54
1480:  MOVWF  55
1482:  RCALL  110E
1484:  BTFSC  16.7
1486:  BSF    FF2.7
1488:  INCF   29,F
148A:  BRA    145E
148C:  GOTO   14D8 (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
116A:  DECFSZ 51,W
116C:  BRA    1170
116E:  BRA    1176
....................       endereco = lcd_seg_lin; 
1170:  MOVLW  40
1172:  MOVWF  52
1174:  BRA    1178
....................    else 
....................       endereco = 0; 
1176:  CLRF   52
....................    endereco += x-1; 
1178:  MOVLW  01
117A:  SUBWF  50,W
117C:  ADDWF  52,F
....................    lcd_envia_byte(0,0x80|endereco); 
117E:  MOVF   52,W
1180:  IORLW  80
1182:  MOVWF  53
1184:  CLRF   54
1186:  MOVWF  55
1188:  RCALL  110E
118A:  RETURN 0
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
118C:  MOVF   4F,W
118E:  XORLW  0C
1190:  BZ    11A0
1192:  XORLW  06
1194:  BZ    11B0
1196:  XORLW  07
1198:  BZ    11B0
119A:  XORLW  05
119C:  BZ    11BC
119E:  BRA    11C6
....................    { 
....................      case '\f'    :   lcd_envia_byte(0,1); 
11A0:  CLRF   54
11A2:  MOVLW  01
11A4:  MOVWF  55
11A6:  RCALL  110E
....................               delay_ms(2); 
11A8:  MOVLW  02
11AA:  MOVWF  50
11AC:  RCALL  1142
....................             break; 
11AE:  BRA    11D0
....................      case '\n'   : 
....................      case '\r'    :   lcd_pos_xy(1,2); 
11B0:  MOVLW  01
11B2:  MOVWF  50
11B4:  MOVLW  02
11B6:  MOVWF  51
11B8:  RCALL  116A
....................               break; 
11BA:  BRA    11D0
....................      case '\b'    :   lcd_envia_byte(0,0x10); 
11BC:  CLRF   54
11BE:  MOVLW  10
11C0:  MOVWF  55
11C2:  RCALL  110E
....................               break; 
11C4:  BRA    11D0
....................      default   :   lcd_envia_byte(1,c); 
11C6:  MOVLW  01
11C8:  MOVWF  54
11CA:  MOVFF  4F,55
11CE:  RCALL  110E
....................               break; 
....................    } 
11D0:  RETURN 0
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
....................    char valor; 
....................    // seleciona a posi��o do caractere 
....................    lcd_pos_xy(x,y); 
....................    // ativa rs 
....................    output_high(lcd_rs); 
....................    // l� o caractere 
....................    valor = lcd_le_byte(); 
....................    // desativa rs 
....................    output_low(lcd_rs); 
....................    // retorna o valor do caractere 
....................    return valor; 
.................... } 
....................  
.................... void lcd_apaga() 
.................... { 
....................    lcd_envia_byte(0,1); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_cursor_on() 
....................     { 
.................... lcd_envia_byte(0,0x0E); 
....................     } 
....................  
.................... void lcd_cursor_pisca() 
....................     { 
.................... lcd_envia_byte(0,0x0F); 
....................     } 
....................  
.................... void lcd_cursor_off() 
....................     { 
....................  lcd_envia_byte(0,0x0C); 
....................     } 
....................  
.................... void lcd_corre_esquerda() 
....................     { 
....................  lcd_envia_byte(0,0x18); 
....................     } 
....................  
.................... void lcd_corre_direita() 
....................     { 
.................... lcd_envia_byte(0,0x1C); 
....................     } 
....................  
....................  
....................  
.................... #define button1 pin_a4 
.................... #define button2 pin_a5 
.................... #define button3 pin_e0 
.................... #define button4 pin_e1 
....................  
.................... int running; 
....................  
.................... //extremo esquerda, centro esquerda, centro direita, extrema direita 
.................... int16 ad1, ad2, ad3, ad4; 
.................... int16 timerBase = 1; 
.................... int8 adCounter; 
....................  
.................... ///Em qual decisão ele ta 
.................... int8 decisionCounter = 0; 
.................... ///Isso aqui serve para ele so contabilizar as tomadas de decisão a cadada 200ms (no timerBase) 
.................... int8 decisionInCoolDown = 0; 
....................  
.................... //Quantos porcento pra um lado ele pode estar antes de ser considerado desalinhado 
.................... float alignRatio = 0.7f; 
....................  
.................... void ClearScreen(); 
.................... void Setup(); 
.................... void AndarReto(); 
.................... ///Se tiver retorna 1 
.................... int8 IsCenterAlign(); 
.................... ///Curva a direita 
.................... int8 IsRight(); 
.................... int8 IsLeft(); 
.................... int8 IsAllAlign(); 
.................... int8 IsCenterAndNotMargins(); 
.................... ///uma linha preta sobre todos 
.................... void Align(); 
....................  
.................... #int_timer0 
.................... void timerTick() 
.................... { 
....................     if (adCounter == 0) 
*
12CC:  MOVF   22,F
12CE:  BNZ   12E0
....................     { 
....................         ad1 = read_adc(); 
12D0:  BSF    FC2.1
12D2:  BTFSC  FC2.1
12D4:  BRA    12D2
12D6:  MOVFF  FC3,18
12DA:  MOVFF  FC4,19
....................     } 
12DE:  BRA    131E
....................     else if (adCounter == 1) 
12E0:  DECFSZ 22,W
12E2:  BRA    12F4
....................     { 
....................         ad2 = read_adc(); 
12E4:  BSF    FC2.1
12E6:  BTFSC  FC2.1
12E8:  BRA    12E6
12EA:  MOVFF  FC3,1A
12EE:  MOVFF  FC4,1B
....................     } 
12F2:  BRA    131E
....................     else if (adCounter == 2) 
12F4:  MOVF   22,W
12F6:  SUBLW  02
12F8:  BNZ   130A
....................     { 
....................         ad3 = read_adc(); 
12FA:  BSF    FC2.1
12FC:  BTFSC  FC2.1
12FE:  BRA    12FC
1300:  MOVFF  FC3,1C
1304:  MOVFF  FC4,1D
....................     } 
1308:  BRA    131E
....................     else if (adCounter == 3) 
130A:  MOVF   22,W
130C:  SUBLW  03
130E:  BNZ   131E
....................     { 
....................         ad4 = read_adc(); 
1310:  BSF    FC2.1
1312:  BTFSC  FC2.1
1314:  BRA    1312
1316:  MOVFF  FC3,1E
131A:  MOVFF  FC4,1F
....................     } 
....................     if (timerBase == 2000) 
131E:  MOVF   20,W
1320:  SUBLW  D0
1322:  BNZ   136E
1324:  MOVF   21,W
1326:  SUBLW  07
1328:  BNZ   136E
....................     { 
....................         timerBase = 0; 
132A:  CLRF   21
132C:  CLRF   20
....................         ClearScreen(); 
132E:  BRA    11D2
....................         lcd_pos_xy(1, 1); 
1330:  MOVLW  01
1332:  MOVWF  50
1334:  MOVWF  51
1336:  RCALL  116A
....................         // printf(lcd_escreve, "1: "); 
....................         // printf(lcd_escreve, "%04ld", ad1); 
....................         // printf(lcd_escreve, " 2: "); 
....................         // printf(lcd_escreve, "%04ld", ad2); 
....................         // lcd_pos_xy(1, 2); 
....................         // printf(lcd_escreve, "3: "); 
....................         // printf(lcd_escreve, "%04ld", ad3); 
....................         // printf(lcd_escreve, " 4: "); 
....................         // printf(lcd_escreve, "%04ld", ad3); 
....................         printf(lcd_escreve, " d: %d", decisionCounter); 
1338:  MOVLW  96
133A:  MOVWF  FF6
133C:  MOVLW  13
133E:  MOVWF  FF7
1340:  MOVLW  04
1342:  MOVWF  49
1344:  RCALL  11DC
1346:  MOVFF  23,49
134A:  MOVLW  18
134C:  MOVWF  4A
134E:  RCALL  1222
....................         printf(lcd_escreve, " c: %d", decisionInCoolDown); 
1350:  MOVLW  9E
1352:  MOVWF  FF6
1354:  MOVLW  13
1356:  MOVWF  FF7
1358:  MOVLW  04
135A:  MOVWF  49
135C:  RCALL  11DC
135E:  MOVFF  24,49
1362:  MOVLW  18
1364:  MOVWF  4A
1366:  RCALL  1222
....................  
....................         if (decisionInCoolDown > 0) 
1368:  MOVF   24,F
136A:  BZ    136E
....................         { 
....................             decisionInCoolDown--; 
136C:  DECF   24,F
....................         } 
....................     } 
....................     timerBase++; 
136E:  INCF   20,F
1370:  BTFSC  FD8.2
1372:  INCF   21,F
....................     adCounter++; 
1374:  INCF   22,F
....................  
....................     if (adCounter > 4) 
1376:  MOVF   22,W
1378:  SUBLW  04
137A:  BC    137E
....................     { 
....................         adCounter = 0; 
137C:  CLRF   22
....................     } 
....................  
....................     set_adc_channel(adCounter); 
137E:  RLCF   22,W
1380:  MOVWF  00
1382:  RLCF   00,F
1384:  MOVLW  FC
1386:  ANDWF  00,F
1388:  MOVF   FC2,W
138A:  ANDLW  C3
138C:  IORWF  00,W
138E:  MOVWF  FC2
1390:  BCF    FF2.2
1392:  GOTO   1054
.................... } 
....................  
.................... void main() 
*
202A:  CLRF   FF8
202C:  BCF    FD0.7
202E:  BSF    07.7
2030:  CLRF   21
2032:  MOVLW  01
2034:  MOVWF  20
2036:  CLRF   23
2038:  CLRF   24
203A:  MOVLW  33
203C:  MOVWF  28
203E:  MOVWF  27
2040:  MOVWF  26
2042:  MOVLW  7E
2044:  MOVWF  25
2046:  MOVF   FC1,W
2048:  ANDLW  C0
204A:  IORLW  0F
204C:  MOVWF  FC1
204E:  MOVLW  07
2050:  MOVWF  FB4
.................... { 
....................     Setup(); 
2052:  GOTO   14B0
2056:  CLRF   16
2058:  BTFSC  FF2.7
205A:  BSF    16.7
205C:  BCF    FF2.7
....................     lcd_pos_xy(1, 1); 
205E:  MOVLW  01
2060:  MOVWF  50
2062:  MOVWF  51
2064:  CALL   116A
2068:  BTFSC  16.7
206A:  BSF    FF2.7
206C:  CLRF   16
206E:  BTFSC  FF2.7
2070:  BSF    16.7
2072:  BCF    FF2.7
....................     delay_ms(5); 
2074:  MOVLW  05
2076:  MOVWF  50
2078:  CALL   1142
207C:  BTFSC  16.7
207E:  BSF    FF2.7
....................     printf(lcd_escreve, " Inicializando"); 
2080:  MOVLW  A6
2082:  MOVWF  FF6
2084:  MOVLW  13
2086:  MOVWF  FF7
2088:  CALL   14DE
....................     delay_ms(1000); 
208C:  MOVLW  04
208E:  MOVWF  29
2090:  CLRF   16
2092:  BTFSC  FF2.7
2094:  BSF    16.7
2096:  BCF    FF2.7
2098:  MOVLW  FA
209A:  MOVWF  50
209C:  CALL   1142
20A0:  BTFSC  16.7
20A2:  BSF    FF2.7
20A4:  DECFSZ 29,F
20A6:  BRA    2090
....................     do 
....................     { 
....................         if (input(button1) == 0) 
20A8:  BSF    F92.4
20AA:  BTFSC  F80.4
20AC:  BRA    20B2
....................         { 
....................             running = 1; 
20AE:  MOVLW  01
20B0:  MOVWF  17
....................         } 
....................         if (input(button2) == 0) 
20B2:  BSF    F92.5
20B4:  BTFSC  F80.5
20B6:  BRA    20BA
....................         { 
....................             running = 0; 
20B8:  CLRF   17
....................         } 
....................         if (decisionCounter == 0) 
20BA:  MOVF   23,F
20BC:  BNZ   20FE
....................         { 
....................             ///Esperar até ser colocado na linha de partida 
....................             if (IsAllAlign()) 
20BE:  CALL   150A
20C2:  MOVF   01,F
20C4:  BZ    20F6
20C6:  CLRF   16
20C8:  BTFSC  FF2.7
20CA:  BSF    16.7
20CC:  BCF    FF2.7
....................             { 
....................                 lcd_pos_xy(1, 2); 
20CE:  MOVLW  01
20D0:  MOVWF  50
20D2:  MOVLW  02
20D4:  MOVWF  51
20D6:  CALL   116A
20DA:  BTFSC  16.7
20DC:  BSF    FF2.7
....................                 printf(lcd_escreve, "TA NA POSICAO"); 
20DE:  MOVLW  B6
20E0:  MOVWF  FF6
20E2:  MOVLW  13
20E4:  MOVWF  FF7
20E6:  CALL   14DE
....................                 if (running) 
20EA:  MOVF   17,F
20EC:  BZ    20F4
....................                 { 
....................                     decisionCounter++; 
20EE:  INCF   23,F
....................                     decisionInCoolDown = 5; 
20F0:  MOVLW  05
20F2:  MOVWF  24
....................                 } 
....................             } 
20F4:  BRA    20FC
....................             else 
....................             { 
....................                 if (running) 
20F6:  MOVF   17,F
20F8:  BZ    20FC
....................                 { 
....................                     Align(); 
20FA:  RCALL  1BCA
....................                 } 
....................             } 
....................         } 
20FC:  BRA    2252
....................         else if (decisionCounter == 1 && running) 
20FE:  DECFSZ 23,W
2100:  BRA    214E
2102:  MOVF   17,F
2104:  BZ    214E
....................         { 
....................             Align(); 
2106:  RCALL  1BCA
....................             ///TODO: Dobrar a direita 
....................             if (IsRight() && !decisionInCoolDown) 
2108:  BRA    1E4C
210A:  MOVF   01,F
210C:  BZ    214C
210E:  MOVF   24,F
2110:  BNZ   214C
....................             { 
....................                 SetLeft(900); 
2112:  MOVLW  03
2114:  MOVWF  36
2116:  MOVLW  84
2118:  MOVWF  35
211A:  RCALL  1B66
....................                 SetRight(950); 
211C:  MOVLW  03
211E:  MOVWF  36
2120:  MOVLW  B6
2122:  MOVWF  35
2124:  RCALL  1B8E
....................                 RightBackwardLeftForward(); 
2126:  CALL   17C0
....................                 delay_ms(400); 
212A:  MOVLW  02
212C:  MOVWF  29
212E:  CLRF   16
2130:  BTFSC  FF2.7
2132:  BSF    16.7
2134:  BCF    FF2.7
2136:  MOVLW  C8
2138:  MOVWF  50
213A:  CALL   1142
213E:  BTFSC  16.7
2140:  BSF    FF2.7
2142:  DECFSZ 29,F
2144:  BRA    212E
....................                 decisionCounter++; 
2146:  INCF   23,F
....................                 decisionInCoolDown = 5; 
2148:  MOVLW  05
214A:  MOVWF  24
....................             } 
....................         } 
214C:  BRA    2252
....................         else if (decisionCounter == 2 && running) 
214E:  MOVF   23,W
2150:  SUBLW  02
2152:  BNZ   216A
2154:  MOVF   17,F
2156:  BZ    216A
....................         { 
....................             if (IsCenterAlign() && !decisionInCoolDown) 
2158:  BRA    1E9A
215A:  MOVF   01,F
215C:  BZ    2168
215E:  MOVF   24,F
2160:  BNZ   2168
....................             { 
....................                 decisionCounter++; 
2162:  INCF   23,F
....................                 decisionInCoolDown = 5; 
2164:  MOVLW  05
2166:  MOVWF  24
....................             } 
....................             else 
....................             { 
....................                 ///Continua o que tava fazendo 
....................             } 
....................         } 
2168:  BRA    2252
....................         else if (decisionCounter == 3) 
216A:  MOVF   23,W
216C:  SUBLW  03
216E:  BNZ   21BA
....................         { 
....................             Align(); 
2170:  RCALL  1BCA
....................             if (IsAllAlign() && !decisionInCoolDown) 
2172:  CALL   150A
2176:  MOVF   01,F
2178:  BZ    21B8
217A:  MOVF   24,F
217C:  BNZ   21B8
....................             { 
....................                 SetLeft(900); 
217E:  MOVLW  03
2180:  MOVWF  36
2182:  MOVLW  84
2184:  MOVWF  35
2186:  RCALL  1B66
....................                 SetRight(950); 
2188:  MOVLW  03
218A:  MOVWF  36
218C:  MOVLW  B6
218E:  MOVWF  35
2190:  RCALL  1B8E
....................                 RightBackwardLeftForward(); 
2192:  CALL   17C0
....................                 delay_ms(500); 
2196:  MOVLW  02
2198:  MOVWF  29
219A:  CLRF   16
219C:  BTFSC  FF2.7
219E:  BSF    16.7
21A0:  BCF    FF2.7
21A2:  MOVLW  FA
21A4:  MOVWF  50
21A6:  CALL   1142
21AA:  BTFSC  16.7
21AC:  BSF    FF2.7
21AE:  DECFSZ 29,F
21B0:  BRA    219A
....................                 decisionCounter++; 
21B2:  INCF   23,F
....................                 decisionInCoolDown = 25; 
21B4:  MOVLW  19
21B6:  MOVWF  24
....................             } 
....................         } 
21B8:  BRA    2252
....................         else if (decisionCounter == 4) 
21BA:  MOVF   23,W
21BC:  SUBLW  04
21BE:  BNZ   21D6
....................         { 
....................             Align(); 
21C0:  RCALL  1BCA
....................             if (IsAllAlign() && !decisionInCoolDown) 
21C2:  CALL   150A
21C6:  MOVF   01,F
21C8:  BZ    21D4
21CA:  MOVF   24,F
21CC:  BNZ   21D4
....................             { 
....................                 decisionCounter++; 
21CE:  INCF   23,F
....................                 decisionInCoolDown = 10; 
21D0:  MOVLW  0A
21D2:  MOVWF  24
....................             } 
....................         } 
21D4:  BRA    2252
....................         else if (decisionCounter == 5) 
21D6:  MOVF   23,W
21D8:  SUBLW  05
21DA:  BNZ   2216
....................         { 
....................             Align(); 
21DC:  RCALL  1BCA
....................             if (!decisionInCoolDown) 
21DE:  MOVF   24,F
21E0:  BNZ   2214
....................             { 
....................                 SetBothPwm(0); 
21E2:  CLRF   36
21E4:  CLRF   35
21E6:  CALL   175E
....................                 delay_ms(2000); 
21EA:  MOVLW  08
21EC:  MOVWF  29
21EE:  CLRF   16
21F0:  BTFSC  FF2.7
21F2:  BSF    16.7
21F4:  BCF    FF2.7
21F6:  MOVLW  FA
21F8:  MOVWF  50
21FA:  CALL   1142
21FE:  BTFSC  16.7
2200:  BSF    FF2.7
2202:  DECFSZ 29,F
2204:  BRA    21EE
....................                 SetBothPwm(920); 
2206:  MOVLW  03
2208:  MOVWF  36
220A:  MOVLW  98
220C:  MOVWF  35
220E:  CALL   175E
....................                 decisionCounter++; 
2212:  INCF   23,F
....................             } 
....................         } 
2214:  BRA    2252
....................         else if (decisionCounter == 6) 
2216:  MOVF   23,W
2218:  SUBLW  06
221A:  BNZ   2232
....................         { 
....................             Align(); 
221C:  RCALL  1BCA
....................             if (IsAllAlign() && !decisionInCoolDown) 
221E:  CALL   150A
2222:  MOVF   01,F
2224:  BZ    2230
2226:  MOVF   24,F
2228:  BNZ   2230
....................             { 
....................                 decisionCounter++; 
222A:  INCF   23,F
....................                 decisionInCoolDown = 5; 
222C:  MOVLW  05
222E:  MOVWF  24
....................             } 
....................         } 
2230:  BRA    2252
....................         else if (decisionCounter == 7) 
2232:  MOVF   23,W
2234:  SUBLW  07
2236:  BNZ   224A
....................         { 
....................             Align(); 
2238:  RCALL  1BCA
....................             if (IsLeft() && !decisionInCoolDown) 
223A:  BRA    1FDC
223C:  MOVF   01,F
223E:  BZ    2248
2240:  MOVF   24,F
2242:  BNZ   2248
....................             { 
....................                 decisionCounter++; 
2244:  INCF   23,F
....................                 decisionInCoolDown = 0; 
2246:  CLRF   24
....................             } 
....................         } 
2248:  BRA    2252
....................         else 
....................         { 
....................             SetBothPwm(0); 
224A:  CLRF   36
224C:  CLRF   35
224E:  CALL   175E
....................         } 
....................  
....................         if (running == 0) 
2252:  MOVF   17,F
2254:  BNZ   2266
....................         { 
....................             SetBothPwm(0); 
2256:  CLRF   36
2258:  CLRF   35
225A:  CALL   175E
....................             SetBothPwm(0); 
225E:  CLRF   36
2260:  CLRF   35
2262:  CALL   175E
....................         } 
....................     } while (1); 
2266:  BRA    20A8
.................... } 
.................... int8 IsCenterAlign() 
*
1E9A:  MOVFF  1B,3A
1E9E:  MOVFF  1A,39
1EA2:  CALL   1558
1EA6:  MOVFF  03,34
1EAA:  MOVFF  02,33
1EAE:  MOVFF  01,32
1EB2:  MOVFF  00,31
1EB6:  MOVF   1A,W
1EB8:  ADDWF  18,W
1EBA:  MOVWF  01
1EBC:  MOVF   1B,W
1EBE:  ADDWFC 19,W
1EC0:  MOVWF  03
1EC2:  MOVFF  01,39
1EC6:  MOVWF  3A
1EC8:  CALL   1558
1ECC:  MOVFF  34,3C
1ED0:  MOVFF  33,3B
1ED4:  MOVFF  32,3A
1ED8:  MOVFF  31,39
1EDC:  MOVFF  03,40
1EE0:  MOVFF  02,3F
1EE4:  MOVFF  01,3E
1EE8:  MOVFF  00,3D
1EEC:  CALL   158E
1EF0:  MOVFF  03,2C
1EF4:  MOVFF  02,2B
1EF8:  MOVFF  01,2A
1EFC:  MOVFF  00,29
1F00:  MOVFF  1D,3A
1F04:  MOVFF  1C,39
1F08:  CALL   1558
1F0C:  MOVFF  03,34
1F10:  MOVFF  02,33
1F14:  MOVFF  01,32
1F18:  MOVFF  00,31
1F1C:  MOVF   1A,W
1F1E:  ADDWF  18,W
1F20:  MOVWF  01
1F22:  MOVF   1B,W
1F24:  ADDWFC 19,W
1F26:  MOVWF  03
1F28:  MOVFF  01,39
1F2C:  MOVWF  3A
1F2E:  CALL   1558
1F32:  MOVFF  34,3C
1F36:  MOVFF  33,3B
1F3A:  MOVFF  32,3A
1F3E:  MOVFF  31,39
1F42:  MOVFF  03,40
1F46:  MOVFF  02,3F
1F4A:  MOVFF  01,3E
1F4E:  MOVFF  00,3D
1F52:  CALL   158E
1F56:  MOVFF  03,30
1F5A:  MOVFF  02,2F
1F5E:  MOVFF  01,2E
1F62:  MOVFF  00,2D
*
2268:  SLEEP 
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad1 + ad2); 
....................     float ad3Ratio = (float)ad3 / (float)(ad1 + ad2); 
....................     if (ad2 + ad3 > 300 && ad2Ratio < alignRatio && ad3Ratio < alignRatio) 
*
1F66:  MOVF   1C,W
1F68:  ADDWF  1A,W
1F6A:  MOVWF  31
1F6C:  MOVF   1D,W
1F6E:  ADDWFC 1B,W
1F70:  MOVWF  32
1F72:  SUBLW  00
1F74:  BC    1FD4
1F76:  XORLW  FF
1F78:  BNZ   1F80
1F7A:  MOVF   31,W
1F7C:  SUBLW  2C
1F7E:  BC    1FD4
1F80:  MOVFF  2C,38
1F84:  MOVFF  2B,37
1F88:  MOVFF  2A,36
1F8C:  MOVFF  29,35
1F90:  MOVFF  28,3C
1F94:  MOVFF  27,3B
1F98:  MOVFF  26,3A
1F9C:  MOVFF  25,39
1FA0:  CALL   16E8
1FA4:  BNC   1FD4
1FA6:  MOVFF  30,38
1FAA:  MOVFF  2F,37
1FAE:  MOVFF  2E,36
1FB2:  MOVFF  2D,35
1FB6:  MOVFF  28,3C
1FBA:  MOVFF  27,3B
1FBE:  MOVFF  26,3A
1FC2:  MOVFF  25,39
1FC6:  CALL   16E8
1FCA:  BNC   1FD4
....................     { 
....................         return 1; 
1FCC:  MOVLW  01
1FCE:  MOVWF  01
1FD0:  BRA    1FD8
....................     } 
1FD2:  BRA    1FD8
....................     else 
....................     { 
....................         return 0; 
1FD4:  MOVLW  00
1FD6:  MOVWF  01
....................     } 
1FD8:  GOTO   215A (RETURN)
.................... } 
.................... int8 IsRight() 
.................... { 
....................     if (ad1 < 300 && ad2 >= 300 && ad3 >= 300 && ad4 >= 300) 
*
1E4C:  MOVF   19,W
1E4E:  SUBLW  01
1E50:  BNC   1E92
1E52:  BNZ   1E5A
1E54:  MOVF   18,W
1E56:  SUBLW  2B
1E58:  BNC   1E92
1E5A:  MOVF   1B,W
1E5C:  SUBLW  00
1E5E:  BC    1E92
1E60:  XORLW  FF
1E62:  BNZ   1E6A
1E64:  MOVF   1A,W
1E66:  SUBLW  2B
1E68:  BC    1E92
1E6A:  MOVF   1D,W
1E6C:  SUBLW  00
1E6E:  BC    1E92
1E70:  XORLW  FF
1E72:  BNZ   1E7A
1E74:  MOVF   1C,W
1E76:  SUBLW  2B
1E78:  BC    1E92
1E7A:  MOVF   1F,W
1E7C:  SUBLW  00
1E7E:  BC    1E92
1E80:  XORLW  FF
1E82:  BNZ   1E8A
1E84:  MOVF   1E,W
1E86:  SUBLW  2B
1E88:  BC    1E92
....................     { 
....................         return 1; 
1E8A:  MOVLW  01
1E8C:  MOVWF  01
1E8E:  BRA    1E96
....................     } 
1E90:  BRA    1E96
....................     else 
....................     { 
....................         return 0; 
1E92:  MOVLW  00
1E94:  MOVWF  01
....................     } 
1E96:  GOTO   210A (RETURN)
.................... } 
.................... int8 IsCenterAndNotMargins() 
.................... { 
....................     if (ad1 < 300 && ad2 >= 300 && ad3 >= 300 && ad4 < 300) 
....................     { 
....................         return 1; 
....................     } 
....................     else 
....................     { 
....................         return 0; 
....................     } 
.................... } 
.................... int8 IsLeft() 
.................... { 
....................     if (ad1 >= 300 && ad2 >= 300 && ad3 >= 300 && ad4 < 300) 
*
1FDC:  MOVF   19,W
1FDE:  SUBLW  00
1FE0:  BC    2022
1FE2:  XORLW  FF
1FE4:  BNZ   1FEC
1FE6:  MOVF   18,W
1FE8:  SUBLW  2B
1FEA:  BC    2022
1FEC:  MOVF   1B,W
1FEE:  SUBLW  00
1FF0:  BC    2022
1FF2:  XORLW  FF
1FF4:  BNZ   1FFC
1FF6:  MOVF   1A,W
1FF8:  SUBLW  2B
1FFA:  BC    2022
1FFC:  MOVF   1D,W
1FFE:  SUBLW  00
2000:  BC    2022
2002:  XORLW  FF
2004:  BNZ   200C
2006:  MOVF   1C,W
2008:  SUBLW  2B
200A:  BC    2022
200C:  MOVF   1F,W
200E:  SUBLW  01
2010:  BNC   2022
2012:  BNZ   201A
2014:  MOVF   1E,W
2016:  SUBLW  2B
2018:  BNC   2022
....................     { 
....................         return 1; 
201A:  MOVLW  01
201C:  MOVWF  01
201E:  BRA    2026
....................     } 
2020:  BRA    2026
....................     else 
....................     { 
....................         return 0; 
2022:  MOVLW  00
2024:  MOVWF  01
....................     } 
2026:  GOTO   223C (RETURN)
.................... } 
.................... int8 IsAllAlign() 
.................... { 
....................     if (ad1 >= 300 && ad2 >= 300 && ad3 >= 300 && ad4 >= 300) 
*
150A:  MOVF   19,W
150C:  SUBLW  00
150E:  BC    1552
1510:  XORLW  FF
1512:  BNZ   151A
1514:  MOVF   18,W
1516:  SUBLW  2B
1518:  BC    1552
151A:  MOVF   1B,W
151C:  SUBLW  00
151E:  BC    1552
1520:  XORLW  FF
1522:  BNZ   152A
1524:  MOVF   1A,W
1526:  SUBLW  2B
1528:  BC    1552
152A:  MOVF   1D,W
152C:  SUBLW  00
152E:  BC    1552
1530:  XORLW  FF
1532:  BNZ   153A
1534:  MOVF   1C,W
1536:  SUBLW  2B
1538:  BC    1552
153A:  MOVF   1F,W
153C:  SUBLW  00
153E:  BC    1552
1540:  XORLW  FF
1542:  BNZ   154A
1544:  MOVF   1E,W
1546:  SUBLW  2B
1548:  BC    1552
....................     { 
....................         return 1; 
154A:  MOVLW  01
154C:  MOVWF  01
154E:  BRA    1556
....................     } 
1550:  BRA    1556
....................     else 
....................     { 
....................         return 0; 
1552:  MOVLW  00
1554:  MOVWF  01
....................     } 
1556:  RETURN 0
.................... } 
....................  
.................... void Align() 
*
1BCA:  MOVFF  1B,3A
1BCE:  MOVFF  1A,39
1BD2:  RCALL  1558
1BD4:  MOVFF  03,38
1BD8:  MOVFF  02,37
1BDC:  MOVFF  01,36
1BE0:  MOVFF  00,35
1BE4:  MOVF   1C,W
1BE6:  ADDWF  1A,W
1BE8:  MOVWF  01
1BEA:  MOVF   1D,W
1BEC:  ADDWFC 1B,W
1BEE:  MOVWF  03
1BF0:  MOVFF  01,39
1BF4:  MOVWF  3A
1BF6:  RCALL  1558
1BF8:  MOVFF  38,3C
1BFC:  MOVFF  37,3B
1C00:  MOVFF  36,3A
1C04:  MOVFF  35,39
1C08:  MOVFF  03,40
1C0C:  MOVFF  02,3F
1C10:  MOVFF  01,3E
1C14:  MOVFF  00,3D
1C18:  RCALL  158E
1C1A:  MOVFF  03,2C
1C1E:  MOVFF  02,2B
1C22:  MOVFF  01,2A
1C26:  MOVFF  00,29
1C2A:  MOVFF  1D,3A
1C2E:  MOVFF  1C,39
1C32:  RCALL  1558
1C34:  MOVFF  03,38
1C38:  MOVFF  02,37
1C3C:  MOVFF  01,36
1C40:  MOVFF  00,35
1C44:  MOVF   1C,W
1C46:  ADDWF  1A,W
1C48:  MOVWF  01
1C4A:  MOVF   1D,W
1C4C:  ADDWFC 1B,W
1C4E:  MOVWF  03
1C50:  MOVFF  01,39
1C54:  MOVWF  3A
1C56:  RCALL  1558
1C58:  MOVFF  38,3C
1C5C:  MOVFF  37,3B
1C60:  MOVFF  36,3A
1C64:  MOVFF  35,39
1C68:  MOVFF  03,40
1C6C:  MOVFF  02,3F
1C70:  MOVFF  01,3E
1C74:  MOVFF  00,3D
1C78:  RCALL  158E
1C7A:  MOVFF  03,30
1C7E:  MOVFF  02,2F
1C82:  MOVFF  01,2E
1C86:  MOVFF  00,2D
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad2 + ad3); 
....................     float ad3Ratio = (float)ad3 / (float)(ad2 + ad3); 
....................  
....................     ///alto significa escuro 
....................     if (ad2 + ad3 > 400) 
1C8A:  MOVF   1C,W
1C8C:  ADDWF  1A,W
1C8E:  MOVWF  35
1C90:  MOVF   1D,W
1C92:  ADDWFC 1B,W
1C94:  MOVWF  36
1C96:  SUBLW  00
1C98:  BTFSC  FD8.0
1C9A:  BRA    1E26
1C9C:  XORLW  FF
1C9E:  BNZ   1CA8
1CA0:  MOVF   35,W
1CA2:  SUBLW  90
1CA4:  BTFSC  FD8.0
1CA6:  BRA    1E26
1CA8:  CLRF   16
1CAA:  BTFSC  FF2.7
1CAC:  BSF    16.7
1CAE:  BCF    FF2.7
....................     { 
....................         //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................         //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................  
....................         lcd_pos_xy(1, 1); 
1CB0:  MOVLW  01
1CB2:  MOVWF  50
1CB4:  MOVWF  51
1CB6:  CALL   116A
1CBA:  BTFSC  16.7
1CBC:  BSF    FF2.7
....................  
....................         //O ad2 é o da direita, se este esta maior, significa que o robo esta a direita 
....................         if (ad2Ratio > alignRatio) 
1CBE:  MOVFF  28,38
1CC2:  MOVFF  27,37
1CC6:  MOVFF  26,36
1CCA:  MOVFF  25,35
1CCE:  MOVFF  2C,3C
1CD2:  MOVFF  2B,3B
1CD6:  MOVFF  2A,3A
1CDA:  MOVFF  29,39
1CDE:  RCALL  16E8
1CE0:  BNC   1CFC
....................         { 
....................             printf(lcd_escreve, "Esta a direita"); 
1CE2:  MOVLW  C4
1CE4:  MOVWF  FF6
1CE6:  MOVLW  13
1CE8:  MOVWF  FF7
1CEA:  CALL   14DE
....................             SetBothPwm(950); 
1CEE:  MOVLW  03
1CF0:  MOVWF  36
1CF2:  MOVLW  B6
1CF4:  MOVWF  35
1CF6:  RCALL  175E
....................             LeftBackwardRightForward(); 
1CF8:  BRA    17AC
....................         } 
1CFA:  BRA    1E24
....................         else if (ad3Ratio > alignRatio) 
1CFC:  MOVFF  28,38
1D00:  MOVFF  27,37
1D04:  MOVFF  26,36
1D08:  MOVFF  25,35
1D0C:  MOVFF  30,3C
1D10:  MOVFF  2F,3B
1D14:  MOVFF  2E,3A
1D18:  MOVFF  2D,39
1D1C:  RCALL  16E8
1D1E:  BNC   1D3A
....................         { 
....................             printf(lcd_escreve, "Esta a esquerda"); 
1D20:  MOVLW  D4
1D22:  MOVWF  FF6
1D24:  MOVLW  13
1D26:  MOVWF  FF7
1D28:  CALL   14DE
....................             SetBothPwm(950); 
1D2C:  MOVLW  03
1D2E:  MOVWF  36
1D30:  MOVLW  B6
1D32:  MOVWF  35
1D34:  RCALL  175E
....................             RightBackwardLeftForward(); 
1D36:  RCALL  17C0
....................         } 
1D38:  BRA    1E24
....................         else 
....................         { 
....................  
....................             ///777 é o minimo que o motor vai ter (ele precisa de uns 800 pra não ficar travado) e vai somar no maximo 246 
....................             ///Por isso que o maximo dele é 1023 (777 + 246), é possivel fazer com que o valor de maior que 1023 e limitar 
....................             ///Com um if, da para testar isso 
....................             long pwm1 = ad2Ratio * 173 + 850; 
....................             long pwm2 = ad3Ratio * 173 + 850; 
1D3A:  MOVFF  2C,38
1D3E:  MOVFF  2B,37
1D42:  MOVFF  2A,36
1D46:  MOVFF  29,35
1D4A:  CLRF   3C
1D4C:  CLRF   3B
1D4E:  MOVLW  2D
1D50:  MOVWF  3A
1D52:  MOVLW  86
1D54:  MOVWF  39
1D56:  RCALL  17D2
1D58:  MOVFF  03,38
1D5C:  MOVFF  02,37
1D60:  MOVFF  01,36
1D64:  MOVFF  00,35
1D68:  BCF    FD8.1
1D6A:  MOVFF  03,3C
1D6E:  MOVFF  02,3B
1D72:  MOVFF  01,3A
1D76:  MOVFF  00,39
1D7A:  CLRF   40
1D7C:  MOVLW  80
1D7E:  MOVWF  3F
1D80:  MOVLW  54
1D82:  MOVWF  3E
1D84:  MOVLW  88
1D86:  MOVWF  3D
1D88:  RCALL  18C4
1D8A:  MOVFF  03,38
1D8E:  MOVFF  02,37
1D92:  MOVFF  01,36
1D96:  MOVFF  00,35
1D9A:  RCALL  1B2E
1D9C:  MOVFF  02,32
1DA0:  MOVFF  01,31
1DA4:  MOVFF  30,38
1DA8:  MOVFF  2F,37
1DAC:  MOVFF  2E,36
1DB0:  MOVFF  2D,35
1DB4:  CLRF   3C
1DB6:  CLRF   3B
1DB8:  MOVLW  2D
1DBA:  MOVWF  3A
1DBC:  MOVLW  86
1DBE:  MOVWF  39
1DC0:  RCALL  17D2
1DC2:  MOVFF  03,38
1DC6:  MOVFF  02,37
1DCA:  MOVFF  01,36
1DCE:  MOVFF  00,35
1DD2:  BCF    FD8.1
1DD4:  MOVFF  03,3C
1DD8:  MOVFF  02,3B
1DDC:  MOVFF  01,3A
1DE0:  MOVFF  00,39
1DE4:  CLRF   40
1DE6:  MOVLW  80
1DE8:  MOVWF  3F
1DEA:  MOVLW  54
1DEC:  MOVWF  3E
1DEE:  MOVLW  88
1DF0:  MOVWF  3D
1DF2:  RCALL  18C4
1DF4:  MOVFF  03,38
1DF8:  MOVFF  02,37
1DFC:  MOVFF  01,36
1E00:  MOVFF  00,35
1E04:  RCALL  1B2E
1E06:  MOVFF  02,34
1E0A:  MOVFF  01,33
....................             SetLeft(pwm1); 
1E0E:  MOVFF  32,36
1E12:  MOVFF  31,35
1E16:  RCALL  1B66
....................             SetRight(pwm2); 
1E18:  MOVFF  34,36
1E1C:  MOVFF  33,35
1E20:  RCALL  1B8E
....................             frente(); 
1E22:  BRA    1BB6
....................             // SetLeft((long)(ad2Ratio * 100) + 850); 
....................             // SetRight((long)(ad3Ratio * 100) + 850); 
....................         } 
....................     } 
1E24:  BRA    1E4A
1E26:  CLRF   16
1E28:  BTFSC  FF2.7
1E2A:  BSF    16.7
1E2C:  BCF    FF2.7
....................     else 
....................     { 
....................         ///Esta fora da pista, deve fazer algo 
....................         //SetBothPwm(0); 
....................         lcd_pos_xy(1, 2); 
1E2E:  MOVLW  01
1E30:  MOVWF  50
1E32:  MOVLW  02
1E34:  MOVWF  51
1E36:  CALL   116A
1E3A:  BTFSC  16.7
1E3C:  BSF    FF2.7
....................  
....................         printf(lcd_escreve, "Se perdeu"); 
1E3E:  MOVLW  E4
1E40:  MOVWF  FF6
1E42:  MOVLW  13
1E44:  MOVWF  FF7
1E46:  CALL   14DE
....................     } 
1E4A:  RETURN 0
.................... } 
....................  
.................... void InvertedAlign() 
.................... { 
.................... } 
....................  
.................... void Setup() 
.................... { 
....................     adCounter = 1; 
*
14B0:  MOVLW  01
14B2:  MOVWF  22
....................     running = 0; 
14B4:  CLRF   17
....................  
....................     setup_adc_ports(AN0_TO_AN3); 
14B6:  MOVF   FC1,W
14B8:  ANDLW  C0
14BA:  IORLW  0B
14BC:  MOVWF  FC1
....................     setup_adc(ADC_CLOCK_DIV_4); 
14BE:  MOVF   FC0,W
14C0:  ANDLW  C0
14C2:  IORLW  04
14C4:  MOVWF  FC0
14C6:  BSF    FC0.7
14C8:  BSF    FC2.0
....................  
....................     setup_timer_0(RTCC_INTERNAL | RTCC_DIV_2 | RTCC_8_BIT); 
14CA:  MOVLW  C0
14CC:  MOVWF  FD5
....................     set_timer0(0); 
14CE:  CLRF   FD7
14D0:  CLRF   FD6
....................     enable_interrupts(INT_TIMER0); 
14D2:  BSF    FF2.5
....................     enable_interrupts(GLOBAL); 
14D4:  IORWF  FF2,F
....................  
....................     lcd_ini(); 
14D6:  BRA    13EE
....................     MotorInitialize(); 
14D8:  BRA    1490
14DA:  GOTO   2056 (RETURN)
....................     // SetBothPwm(0); 
....................     // frente(); 
.................... } 
....................  
.................... void ClearScreen() 
.................... { 
....................     lcd_escreve('\f'); 
*
11D2:  MOVLW  0C
11D4:  MOVWF  4F
11D6:  RCALL  118C
11D8:  GOTO   1330 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
