CCS PCH C Compiler, Version 5.015, 5967               30-ago-18 12:41

               Filename:   C:\Users\frepa\source\repos\Imposto\Source Code\main.lst

               ROM used:   6650 bytes (20%)
                           Largest free fragment is 22018
               RAM used:   42 (2%) at main() level
                           88 (4%) worst case
               Stack used: 12 locations (6 in main + 6 for interrupts)
               Stack size: 31

*
1000:  GOTO   20D2
*
1008:  MOVWF  04
100A:  MOVFF  FD8,05
100E:  MOVFF  FE0,06
1012:  MOVLB  0
1014:  MOVFF  FE9,0C
1018:  MOVFF  FEA,07
101C:  MOVFF  FE1,08
1020:  MOVFF  FE2,09
1024:  MOVFF  FD9,0A
1028:  MOVFF  FDA,0B
102C:  MOVFF  FF3,12
1030:  MOVFF  FF4,13
1034:  MOVFF  FFA,14
1038:  MOVFF  00,0E
103C:  MOVFF  01,0F
1040:  MOVFF  02,10
1044:  MOVFF  03,11
1048:  BTFSS  FF2.5
104A:  GOTO   1054
104E:  BTFSC  FF2.2
1050:  GOTO   12CC
1054:  MOVFF  0E,00
1058:  MOVFF  0F,01
105C:  MOVFF  10,02
1060:  MOVFF  11,03
1064:  MOVFF  0C,FE9
1068:  MOVFF  07,FEA
106C:  BSF    07.7
106E:  MOVFF  08,FE1
1072:  MOVFF  09,FE2
1076:  MOVFF  0A,FD9
107A:  MOVFF  0B,FDA
107E:  MOVFF  12,FF3
1082:  MOVFF  13,FF4
1086:  MOVFF  14,FFA
108A:  MOVF   04,W
108C:  MOVFF  06,FE0
1090:  MOVFF  05,FD8
1094:  RETFIE 0
.................... #include <main.h> 
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
1096:  MOVFF  FF2,0D
109A:  BCF    FF2.7
109C:  CLRF   FF7
109E:  ADDLW  B0
10A0:  MOVWF  FF6
10A2:  MOVLW  10
10A4:  ADDWFC FF7,F
10A6:  TBLRD*+
10A8:  MOVF   FF5,W
10AA:  BTFSC  0D.7
10AC:  BSF    FF2.7
10AE:  RETURN 0
10B0:  DATA 28,0C
10B2:  DATA 01,06
*
11DC:  TBLRD*+
11DE:  MOVFF  FF6,4A
11E2:  MOVFF  FF7,4B
11E6:  MOVFF  FF5,4F
11EA:  RCALL  118C
11EC:  MOVFF  4A,FF6
11F0:  MOVFF  4B,FF7
11F4:  DECFSZ 49,F
11F6:  BRA    11DC
11F8:  RETURN 0
11FA:  MOVF   50,W
11FC:  CLRF   01
11FE:  SUBWF  4F,W
1200:  BC    1208
1202:  MOVFF  4F,00
1206:  BRA    1220
1208:  CLRF   00
120A:  MOVLW  08
120C:  MOVWF  51
120E:  RLCF   4F,F
1210:  RLCF   00,F
1212:  MOVF   50,W
1214:  SUBWF  00,W
1216:  BTFSC  FD8.0
1218:  MOVWF  00
121A:  RLCF   01,F
121C:  DECFSZ 51,F
121E:  BRA    120E
1220:  RETURN 0
1222:  MOVLW  20
1224:  BTFSS  4A.4
1226:  MOVLW  30
1228:  MOVWF  4B
122A:  MOVFF  49,00
122E:  BTFSS  49.7
1230:  BRA    1242
1232:  COMF   00,F
1234:  INCF   00,F
1236:  MOVFF  00,49
123A:  MOVLW  2D
123C:  MOVWF  4B
123E:  BSF    4A.7
1240:  BSF    4A.0
1242:  MOVF   01,W
1244:  MOVFF  49,4F
1248:  MOVLW  64
124A:  MOVWF  50
124C:  RCALL  11FA
124E:  MOVFF  00,49
1252:  MOVLW  30
1254:  ADDWF  01,W
1256:  MOVWF  4C
1258:  MOVFF  49,4F
125C:  MOVLW  0A
125E:  MOVWF  50
1260:  RCALL  11FA
1262:  MOVLW  30
1264:  ADDWF  00,W
1266:  MOVWF  4E
1268:  MOVLW  30
126A:  ADDWF  01,W
126C:  MOVWF  4D
126E:  MOVFF  4B,00
1272:  MOVLW  30
1274:  SUBWF  4C,W
1276:  BZ    1280
1278:  BSF    4A.1
127A:  BTFSC  4A.7
127C:  BSF    4A.2
127E:  BRA    12A4
1280:  MOVFF  4B,4C
1284:  MOVLW  20
1286:  MOVWF  4B
1288:  MOVLW  30
128A:  SUBWF  4D,W
128C:  BZ    1296
128E:  BSF    4A.0
1290:  BTFSC  4A.7
1292:  BSF    4A.1
1294:  BRA    12A4
1296:  BTFSS  FD8.2
1298:  BSF    4A.0
129A:  BNZ   12A4
129C:  MOVFF  4C,4D
12A0:  MOVLW  20
12A2:  MOVWF  4C
12A4:  BTFSC  4A.2
12A6:  BRA    12B2
12A8:  BTFSC  4A.1
12AA:  BRA    12B8
12AC:  BTFSC  4A.0
12AE:  BRA    12BE
12B0:  BRA    12C4
12B2:  MOVFF  4B,4F
12B6:  RCALL  118C
12B8:  MOVFF  4C,4F
12BC:  RCALL  118C
12BE:  MOVFF  4D,4F
12C2:  RCALL  118C
12C4:  MOVFF  4E,4F
12C8:  RCALL  118C
12CA:  RETURN 0
*
1396:  DATA 20,64
1398:  DATA 3A,20
139A:  DATA 25,64
139C:  DATA 00,00
139E:  DATA 20,63
13A0:  DATA 3A,20
13A2:  DATA 25,64
13A4:  DATA 00,00
13A6:  DATA 20,49
13A8:  DATA 6E,69
13AA:  DATA 63,69
13AC:  DATA 61,6C
13AE:  DATA 69,7A
13B0:  DATA 61,6E
13B2:  DATA 64,6F
13B4:  DATA 00,00
13B6:  DATA 74,61
13B8:  DATA 20,6E
13BA:  DATA 61,20
13BC:  DATA 70,6F
13BE:  DATA 73,69
13C0:  DATA 63,61
13C2:  DATA 6F,00
13C4:  DATA 46,69
13C6:  DATA 6D,20
13C8:  DATA 64,6F
13CA:  DATA 20,70
13CC:  DATA 72,6F
13CE:  DATA 67,72
13D0:  DATA 61,6D
13D2:  DATA 61,64
13D4:  DATA 6F,00
13D6:  DATA 45,73
13D8:  DATA 74,61
13DA:  DATA 20,61
13DC:  DATA 20,64
13DE:  DATA 69,72
13E0:  DATA 65,69
13E2:  DATA 74,61
13E4:  DATA 00,00
13E6:  DATA 45,73
13E8:  DATA 74,61
13EA:  DATA 20,61
13EC:  DATA 20,65
13EE:  DATA 73,71
13F0:  DATA 75,65
13F2:  DATA 72,64
13F4:  DATA 61,00
13F6:  DATA 53,65
13F8:  DATA 20,70
13FA:  DATA 65,72
13FC:  DATA 64,65
13FE:  DATA 75,00
1400:  DATA 45,73
1402:  DATA 74,61
1404:  DATA 20,61
1406:  DATA 20,64
1408:  DATA 69,72
140A:  DATA 65,69
140C:  DATA 74,61
140E:  DATA 00,00
1410:  DATA 45,73
1412:  DATA 74,61
1414:  DATA 20,61
1416:  DATA 20,65
1418:  DATA 73,71
141A:  DATA 75,65
141C:  DATA 72,64
141E:  DATA 61,00
1420:  DATA 53,65
1422:  DATA 20,70
1424:  DATA 65,72
1426:  DATA 64,65
1428:  DATA 75,00
*
151A:  TBLRD*+
151C:  MOVF   FF5,F
151E:  BZ    1544
1520:  MOVFF  FF6,35
1524:  MOVFF  FF7,36
1528:  CLRF   16
152A:  BTFSC  FF2.7
152C:  BSF    16.7
152E:  BCF    FF2.7
1530:  MOVFF  FF5,4F
1534:  RCALL  118C
1536:  BTFSC  16.7
1538:  BSF    FF2.7
153A:  MOVFF  35,FF6
153E:  MOVFF  36,FF7
1542:  BRA    151A
1544:  RETURN 0
*
1594:  MOVLW  8E
1596:  MOVWF  00
1598:  MOVFF  3A,01
159C:  MOVFF  39,02
15A0:  CLRF   03
15A2:  MOVF   01,F
15A4:  BNZ   15B8
15A6:  MOVFF  02,01
15AA:  CLRF   02
15AC:  MOVLW  08
15AE:  SUBWF  00,F
15B0:  MOVF   01,F
15B2:  BNZ   15B8
15B4:  CLRF   00
15B6:  BRA    15C8
15B8:  BCF    FD8.0
15BA:  BTFSC  01.7
15BC:  BRA    15C6
15BE:  RLCF   02,F
15C0:  RLCF   01,F
15C2:  DECF   00,F
15C4:  BRA    15B8
15C6:  BCF    01.7
15C8:  RETURN 0
15CA:  MOVF   39,W
15CC:  BTFSC  FD8.2
15CE:  BRA    171A
15D0:  MOVWF  45
15D2:  MOVF   3D,W
15D4:  BTFSC  FD8.2
15D6:  BRA    171A
15D8:  SUBWF  45,F
15DA:  BNC   15E6
15DC:  MOVLW  7F
15DE:  ADDWF  45,F
15E0:  BTFSC  FD8.0
15E2:  BRA    171A
15E4:  BRA    15F2
15E6:  MOVLW  81
15E8:  SUBWF  45,F
15EA:  BTFSS  FD8.0
15EC:  BRA    171A
15EE:  BTFSC  FD8.2
15F0:  BRA    171A
15F2:  MOVFF  45,00
15F6:  CLRF   01
15F8:  CLRF   02
15FA:  CLRF   03
15FC:  CLRF   44
15FE:  MOVFF  3A,43
1602:  BSF    43.7
1604:  MOVFF  3B,42
1608:  MOVFF  3C,41
160C:  MOVLW  19
160E:  MOVWF  45
1610:  MOVF   40,W
1612:  SUBWF  41,F
1614:  BC    1630
1616:  MOVLW  01
1618:  SUBWF  42,F
161A:  BC    1630
161C:  SUBWF  43,F
161E:  BC    1630
1620:  SUBWF  44,F
1622:  BC    1630
1624:  INCF   44,F
1626:  INCF   43,F
1628:  INCF   42,F
162A:  MOVF   40,W
162C:  ADDWF  41,F
162E:  BRA    1680
1630:  MOVF   3F,W
1632:  SUBWF  42,F
1634:  BC    165A
1636:  MOVLW  01
1638:  SUBWF  43,F
163A:  BC    165A
163C:  SUBWF  44,F
163E:  BC    165A
1640:  INCF   44,F
1642:  INCF   43,F
1644:  MOVF   3F,W
1646:  ADDWF  42,F
1648:  MOVF   40,W
164A:  ADDWF  41,F
164C:  BNC   1680
164E:  INCF   42,F
1650:  BNZ   1680
1652:  INCF   43,F
1654:  BNZ   1680
1656:  INCF   44,F
1658:  BRA    1680
165A:  MOVF   3E,W
165C:  IORLW  80
165E:  SUBWF  43,F
1660:  BC    167E
1662:  MOVLW  01
1664:  SUBWF  44,F
1666:  BC    167E
1668:  INCF   44,F
166A:  MOVF   3E,W
166C:  IORLW  80
166E:  ADDWF  43,F
1670:  MOVF   3F,W
1672:  ADDWF  42,F
1674:  BNC   1648
1676:  INCF   43,F
1678:  BNZ   1648
167A:  INCF   44,F
167C:  BRA    1648
167E:  BSF    03.0
1680:  DECFSZ 45,F
1682:  BRA    1686
1684:  BRA    169C
1686:  BCF    FD8.0
1688:  RLCF   41,F
168A:  RLCF   42,F
168C:  RLCF   43,F
168E:  RLCF   44,F
1690:  BCF    FD8.0
1692:  RLCF   03,F
1694:  RLCF   02,F
1696:  RLCF   01,F
1698:  RLCF   46,F
169A:  BRA    1610
169C:  BTFSS  46.0
169E:  BRA    16AC
16A0:  BCF    FD8.0
16A2:  RRCF   01,F
16A4:  RRCF   02,F
16A6:  RRCF   03,F
16A8:  RRCF   46,F
16AA:  BRA    16B0
16AC:  DECF   00,F
16AE:  BZ    171A
16B0:  BTFSC  46.7
16B2:  BRA    16F0
16B4:  BCF    FD8.0
16B6:  RLCF   41,F
16B8:  RLCF   42,F
16BA:  RLCF   43,F
16BC:  RLCF   44,F
16BE:  MOVF   40,W
16C0:  SUBWF  41,F
16C2:  BC    16D2
16C4:  MOVLW  01
16C6:  SUBWF  42,F
16C8:  BC    16D2
16CA:  SUBWF  43,F
16CC:  BC    16D2
16CE:  SUBWF  44,F
16D0:  BNC   1706
16D2:  MOVF   3F,W
16D4:  SUBWF  42,F
16D6:  BC    16E2
16D8:  MOVLW  01
16DA:  SUBWF  43,F
16DC:  BC    16E2
16DE:  SUBWF  44,F
16E0:  BNC   1706
16E2:  MOVF   3E,W
16E4:  IORLW  80
16E6:  SUBWF  43,F
16E8:  BC    16F0
16EA:  MOVLW  01
16EC:  SUBWF  44,F
16EE:  BNC   1706
16F0:  INCF   03,F
16F2:  BNZ   1706
16F4:  INCF   02,F
16F6:  BNZ   1706
16F8:  INCF   01,F
16FA:  BNZ   1706
16FC:  INCF   00,F
16FE:  BZ    171A
1700:  RRCF   01,F
1702:  RRCF   02,F
1704:  RRCF   03,F
1706:  MOVFF  3A,45
170A:  MOVF   3E,W
170C:  XORWF  45,F
170E:  BTFSS  45.7
1710:  BRA    1716
1712:  BSF    01.7
1714:  BRA    1722
1716:  BCF    01.7
1718:  BRA    1722
171A:  CLRF   00
171C:  CLRF   01
171E:  CLRF   02
1720:  CLRF   03
1722:  RETURN 0
1724:  MOVFF  36,3D
1728:  MOVF   3A,W
172A:  XORWF  3D,F
172C:  BTFSS  3D.7
172E:  BRA    173A
1730:  BCF    FD8.2
1732:  BCF    FD8.0
1734:  BTFSC  36.7
1736:  BSF    FD8.0
1738:  BRA    1798
173A:  MOVFF  36,3D
173E:  MOVFF  39,3E
1742:  MOVF   35,W
1744:  SUBWF  3E,F
1746:  BZ    1754
1748:  BTFSS  3D.7
174A:  BRA    1798
174C:  MOVF   FD8,W
174E:  XORLW  01
1750:  MOVWF  FD8
1752:  BRA    1798
1754:  MOVFF  3A,3E
1758:  MOVF   36,W
175A:  SUBWF  3E,F
175C:  BZ    176A
175E:  BTFSS  3D.7
1760:  BRA    1798
1762:  MOVF   FD8,W
1764:  XORLW  01
1766:  MOVWF  FD8
1768:  BRA    1798
176A:  MOVFF  3B,3E
176E:  MOVF   37,W
1770:  SUBWF  3E,F
1772:  BZ    1780
1774:  BTFSS  3D.7
1776:  BRA    1798
1778:  MOVF   FD8,W
177A:  XORLW  01
177C:  MOVWF  FD8
177E:  BRA    1798
1780:  MOVFF  3C,3E
1784:  MOVF   38,W
1786:  SUBWF  3E,F
1788:  BZ    1796
178A:  BTFSS  3D.7
178C:  BRA    1798
178E:  MOVF   FD8,W
1790:  XORLW  01
1792:  MOVWF  FD8
1794:  BRA    1798
1796:  BCF    FD8.0
1798:  RETURN 0
*
180C:  MOVF   35,W
180E:  BTFSC  FD8.2
1810:  BRA    18F4
1812:  MOVWF  00
1814:  MOVF   39,W
1816:  BTFSC  FD8.2
1818:  BRA    18F4
181A:  ADDWF  00,F
181C:  BNC   1826
181E:  MOVLW  81
1820:  ADDWF  00,F
1822:  BC    18F4
1824:  BRA    182E
1826:  MOVLW  7F
1828:  SUBWF  00,F
182A:  BNC   18F4
182C:  BZ    18F4
182E:  MOVFF  36,3D
1832:  MOVF   3A,W
1834:  XORWF  3D,F
1836:  BSF    36.7
1838:  BSF    3A.7
183A:  MOVF   38,W
183C:  MULWF  3C
183E:  MOVFF  FF4,3F
1842:  MOVF   37,W
1844:  MULWF  3B
1846:  MOVFF  FF4,03
184A:  MOVFF  FF3,3E
184E:  MULWF  3C
1850:  MOVF   FF3,W
1852:  ADDWF  3F,F
1854:  MOVF   FF4,W
1856:  ADDWFC 3E,F
1858:  MOVLW  00
185A:  ADDWFC 03,F
185C:  MOVF   38,W
185E:  MULWF  3B
1860:  MOVF   FF3,W
1862:  ADDWF  3F,F
1864:  MOVF   FF4,W
1866:  ADDWFC 3E,F
1868:  MOVLW  00
186A:  CLRF   02
186C:  ADDWFC 03,F
186E:  ADDWFC 02,F
1870:  MOVF   36,W
1872:  MULWF  3C
1874:  MOVF   FF3,W
1876:  ADDWF  3E,F
1878:  MOVF   FF4,W
187A:  ADDWFC 03,F
187C:  MOVLW  00
187E:  ADDWFC 02,F
1880:  MOVF   36,W
1882:  MULWF  3B
1884:  MOVF   FF3,W
1886:  ADDWF  03,F
1888:  MOVF   FF4,W
188A:  ADDWFC 02,F
188C:  MOVLW  00
188E:  CLRF   01
1890:  ADDWFC 01,F
1892:  MOVF   38,W
1894:  MULWF  3A
1896:  MOVF   FF3,W
1898:  ADDWF  3E,F
189A:  MOVF   FF4,W
189C:  ADDWFC 03,F
189E:  MOVLW  00
18A0:  ADDWFC 02,F
18A2:  ADDWFC 01,F
18A4:  MOVF   37,W
18A6:  MULWF  3A
18A8:  MOVF   FF3,W
18AA:  ADDWF  03,F
18AC:  MOVF   FF4,W
18AE:  ADDWFC 02,F
18B0:  MOVLW  00
18B2:  ADDWFC 01,F
18B4:  MOVF   36,W
18B6:  MULWF  3A
18B8:  MOVF   FF3,W
18BA:  ADDWF  02,F
18BC:  MOVF   FF4,W
18BE:  ADDWFC 01,F
18C0:  INCF   00,F
18C2:  BTFSC  01.7
18C4:  BRA    18D0
18C6:  RLCF   3E,F
18C8:  RLCF   03,F
18CA:  RLCF   02,F
18CC:  RLCF   01,F
18CE:  DECF   00,F
18D0:  MOVLW  00
18D2:  BTFSS  3E.7
18D4:  BRA    18EA
18D6:  INCF   03,F
18D8:  ADDWFC 02,F
18DA:  ADDWFC 01,F
18DC:  MOVF   01,W
18DE:  BNZ   18EA
18E0:  MOVF   02,W
18E2:  BNZ   18EA
18E4:  MOVF   03,W
18E6:  BNZ   18EA
18E8:  INCF   00,F
18EA:  BTFSC  3D.7
18EC:  BSF    01.7
18EE:  BTFSS  3D.7
18F0:  BCF    01.7
18F2:  BRA    18FC
18F4:  CLRF   00
18F6:  CLRF   01
18F8:  CLRF   02
18FA:  CLRF   03
18FC:  RETURN 0
18FE:  MOVLW  80
1900:  BTFSC  FD8.1
1902:  XORWF  3E,F
1904:  CLRF   43
1906:  CLRF   44
1908:  MOVFF  3A,42
190C:  MOVF   3E,W
190E:  XORWF  42,F
1910:  MOVF   39,W
1912:  BTFSC  FD8.2
1914:  BRA    1ACE
1916:  MOVWF  41
1918:  MOVWF  00
191A:  MOVF   3D,W
191C:  BTFSC  FD8.2
191E:  BRA    1AE0
1920:  SUBWF  41,F
1922:  BTFSC  FD8.2
1924:  BRA    1A28
1926:  BNC   19A2
1928:  MOVFF  3E,47
192C:  BSF    47.7
192E:  MOVFF  3F,46
1932:  MOVFF  40,45
1936:  CLRF   44
1938:  BCF    FD8.0
193A:  RRCF   47,F
193C:  RRCF   46,F
193E:  RRCF   45,F
1940:  RRCF   44,F
1942:  DECFSZ 41,F
1944:  BRA    1936
1946:  BTFSS  42.7
1948:  BRA    1950
194A:  BSF    43.0
194C:  BRA    1B08
194E:  BCF    43.0
1950:  BCF    41.0
1952:  BSF    43.4
1954:  CLRF   FEA
1956:  MOVLW  3C
1958:  MOVWF  FE9
195A:  BRA    1B2E
195C:  BCF    43.4
195E:  BTFSC  42.7
1960:  BRA    1976
1962:  BTFSS  41.0
1964:  BRA    198C
1966:  RRCF   47,F
1968:  RRCF   46,F
196A:  RRCF   45,F
196C:  RRCF   44,F
196E:  INCF   00,F
1970:  BTFSC  FD8.2
1972:  BRA    1AFE
1974:  BRA    198C
1976:  BTFSC  47.7
1978:  BRA    1992
197A:  BCF    FD8.0
197C:  RLCF   44,F
197E:  RLCF   45,F
1980:  RLCF   46,F
1982:  RLCF   47,F
1984:  DECF   00,F
1986:  BTFSC  FD8.2
1988:  BRA    1AFE
198A:  BRA    1976
198C:  BSF    43.6
198E:  BRA    1A66
1990:  BCF    43.6
1992:  MOVFF  3A,42
1996:  BTFSS  3A.7
1998:  BRA    199E
199A:  BSF    47.7
199C:  BRA    1AF0
199E:  BCF    47.7
19A0:  BRA    1AF0
19A2:  MOVFF  3D,41
19A6:  MOVFF  3D,00
19AA:  MOVF   39,W
19AC:  SUBWF  41,F
19AE:  MOVFF  3A,47
19B2:  BSF    47.7
19B4:  MOVFF  3B,46
19B8:  MOVFF  3C,45
19BC:  CLRF   44
19BE:  BCF    FD8.0
19C0:  RRCF   47,F
19C2:  RRCF   46,F
19C4:  RRCF   45,F
19C6:  RRCF   44,F
19C8:  DECFSZ 41,F
19CA:  BRA    19BC
19CC:  BTFSS  42.7
19CE:  BRA    19D6
19D0:  BSF    43.1
19D2:  BRA    1B08
19D4:  BCF    43.1
19D6:  BCF    41.0
19D8:  BSF    43.5
19DA:  CLRF   FEA
19DC:  MOVLW  40
19DE:  MOVWF  FE9
19E0:  BRA    1B2E
19E2:  BCF    43.5
19E4:  BTFSC  42.7
19E6:  BRA    19FC
19E8:  BTFSS  41.0
19EA:  BRA    1A12
19EC:  RRCF   47,F
19EE:  RRCF   46,F
19F0:  RRCF   45,F
19F2:  RRCF   44,F
19F4:  INCF   00,F
19F6:  BTFSC  FD8.2
19F8:  BRA    1AFE
19FA:  BRA    1A12
19FC:  BTFSC  47.7
19FE:  BRA    1A18
1A00:  BCF    FD8.0
1A02:  RLCF   44,F
1A04:  RLCF   45,F
1A06:  RLCF   46,F
1A08:  RLCF   47,F
1A0A:  DECF   00,F
1A0C:  BTFSC  FD8.2
1A0E:  BRA    1AFE
1A10:  BRA    19FC
1A12:  BSF    43.7
1A14:  BRA    1A66
1A16:  BCF    43.7
1A18:  MOVFF  3E,42
1A1C:  BTFSS  3E.7
1A1E:  BRA    1A24
1A20:  BSF    47.7
1A22:  BRA    1AF0
1A24:  BCF    47.7
1A26:  BRA    1AF0
1A28:  MOVFF  3E,47
1A2C:  BSF    47.7
1A2E:  MOVFF  3F,46
1A32:  MOVFF  40,45
1A36:  BTFSS  42.7
1A38:  BRA    1A42
1A3A:  BCF    47.7
1A3C:  BSF    43.2
1A3E:  BRA    1B08
1A40:  BCF    43.2
1A42:  CLRF   44
1A44:  BCF    41.0
1A46:  CLRF   FEA
1A48:  MOVLW  3C
1A4A:  MOVWF  FE9
1A4C:  BRA    1B2E
1A4E:  BTFSC  42.7
1A50:  BRA    1A8A
1A52:  MOVFF  3A,42
1A56:  BTFSS  41.0
1A58:  BRA    1A66
1A5A:  RRCF   47,F
1A5C:  RRCF   46,F
1A5E:  RRCF   45,F
1A60:  RRCF   44,F
1A62:  INCF   00,F
1A64:  BZ    1AFE
1A66:  BTFSS  44.7
1A68:  BRA    1A80
1A6A:  INCF   45,F
1A6C:  BNZ   1A80
1A6E:  INCF   46,F
1A70:  BNZ   1A80
1A72:  INCF   47,F
1A74:  BNZ   1A80
1A76:  RRCF   47,F
1A78:  RRCF   46,F
1A7A:  RRCF   45,F
1A7C:  INCF   00,F
1A7E:  BZ    1AFE
1A80:  BTFSC  43.6
1A82:  BRA    1990
1A84:  BTFSC  43.7
1A86:  BRA    1A16
1A88:  BRA    1AC2
1A8A:  MOVLW  80
1A8C:  XORWF  47,F
1A8E:  BTFSS  47.7
1A90:  BRA    1A9A
1A92:  BRA    1B08
1A94:  MOVFF  3E,42
1A98:  BRA    1AAE
1A9A:  MOVFF  3A,42
1A9E:  MOVF   47,F
1AA0:  BNZ   1AAE
1AA2:  MOVF   46,F
1AA4:  BNZ   1AAE
1AA6:  MOVF   45,F
1AA8:  BNZ   1AAE
1AAA:  CLRF   00
1AAC:  BRA    1AF0
1AAE:  BTFSC  47.7
1AB0:  BRA    1AC2
1AB2:  BCF    FD8.0
1AB4:  RLCF   44,F
1AB6:  RLCF   45,F
1AB8:  RLCF   46,F
1ABA:  RLCF   47,F
1ABC:  DECFSZ 00,F
1ABE:  BRA    1AAE
1AC0:  BRA    1AFE
1AC2:  BTFSS  42.7
1AC4:  BRA    1ACA
1AC6:  BSF    47.7
1AC8:  BRA    1AF0
1ACA:  BCF    47.7
1ACC:  BRA    1AF0
1ACE:  MOVFF  3D,00
1AD2:  MOVFF  3E,47
1AD6:  MOVFF  3F,46
1ADA:  MOVFF  40,45
1ADE:  BRA    1AF0
1AE0:  MOVFF  39,00
1AE4:  MOVFF  3A,47
1AE8:  MOVFF  3B,46
1AEC:  MOVFF  3C,45
1AF0:  MOVFF  47,01
1AF4:  MOVFF  46,02
1AF8:  MOVFF  45,03
1AFC:  BRA    1B66
1AFE:  CLRF   00
1B00:  CLRF   01
1B02:  CLRF   02
1B04:  CLRF   03
1B06:  BRA    1B66
1B08:  CLRF   44
1B0A:  COMF   45,F
1B0C:  COMF   46,F
1B0E:  COMF   47,F
1B10:  COMF   44,F
1B12:  INCF   44,F
1B14:  BNZ   1B20
1B16:  INCF   45,F
1B18:  BNZ   1B20
1B1A:  INCF   46,F
1B1C:  BNZ   1B20
1B1E:  INCF   47,F
1B20:  BTFSC  43.0
1B22:  BRA    194E
1B24:  BTFSC  43.1
1B26:  BRA    19D4
1B28:  BTFSC  43.2
1B2A:  BRA    1A40
1B2C:  BRA    1A94
1B2E:  MOVF   FEF,W
1B30:  ADDWF  45,F
1B32:  BNC   1B3E
1B34:  INCF   46,F
1B36:  BNZ   1B3E
1B38:  INCF   47,F
1B3A:  BTFSC  FD8.2
1B3C:  BSF    41.0
1B3E:  MOVF   FED,F
1B40:  MOVF   FEF,W
1B42:  ADDWF  46,F
1B44:  BNC   1B4C
1B46:  INCF   47,F
1B48:  BTFSC  FD8.2
1B4A:  BSF    41.0
1B4C:  MOVF   FED,F
1B4E:  MOVF   FEF,W
1B50:  BTFSC  FEF.7
1B52:  BRA    1B56
1B54:  XORLW  80
1B56:  ADDWF  47,F
1B58:  BTFSC  FD8.0
1B5A:  BSF    41.0
1B5C:  BTFSC  43.4
1B5E:  BRA    195C
1B60:  BTFSC  43.5
1B62:  BRA    19E2
1B64:  BRA    1A4E
1B66:  RETURN 0
1B68:  MOVLW  8E
1B6A:  MOVWF  00
1B6C:  MOVF   35,W
1B6E:  SUBWF  00,F
1B70:  MOVFF  36,02
1B74:  MOVFF  37,01
1B78:  BSF    02.7
1B7A:  MOVF   00,F
1B7C:  BZ    1B90
1B7E:  BCF    FD8.0
1B80:  MOVF   02,F
1B82:  BNZ   1B88
1B84:  MOVF   01,F
1B86:  BZ    1B90
1B88:  RRCF   02,F
1B8A:  RRCF   01,F
1B8C:  DECFSZ 00,F
1B8E:  BRA    1B7E
1B90:  BTFSS  36.7
1B92:  BRA    1B9E
1B94:  COMF   01,F
1B96:  COMF   02,F
1B98:  INCF   01,F
1B9A:  BTFSC  FD8.2
1B9C:  INCF   02,F
1B9E:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=48MHz,crystal=20MHz) 
*
10B4:  MOVLW  01
10B6:  SUBWF  56,F
10B8:  BNC   10D2
10BA:  CLRF   FEA
10BC:  MOVLW  56
10BE:  MOVWF  FE9
10C0:  MOVF   FEF,W
10C2:  BZ    10D2
10C4:  MOVLW  02
10C6:  MOVWF  00
10C8:  DECFSZ 00,F
10CA:  BRA    10C8
10CC:  BRA    10CE
10CE:  DECFSZ FEF,F
10D0:  BRA    10C4
10D2:  RETURN 0
*
1142:  CLRF   FEA
1144:  MOVLW  50
1146:  MOVWF  FE9
1148:  MOVF   FEF,W
114A:  BZ    1168
114C:  MOVLW  0F
114E:  MOVWF  01
1150:  CLRF   00
1152:  DECFSZ 00,F
1154:  BRA    1152
1156:  DECFSZ 01,F
1158:  BRA    1150
115A:  MOVLW  8F
115C:  MOVWF  00
115E:  DECFSZ 00,F
1160:  BRA    115E
1162:  NOP   
1164:  DECFSZ FEF,F
1166:  BRA    114C
1168:  RETURN 0
....................  
.................... // #build(reset=0x1000, interrupt=0x1008) 
.................... // #org 0x000, 0xfff { } 
....................  
.................... #include <Motor1.c> 
.................... #build(reset = 0x1000, interrupt = 0x1008) 
.................... #org 0x000, 0xfff {} 
....................  
.................... #define m1p1 pin_e2 
.................... #define m1p2 pin_c0 
.................... #define m2p1 pin_d0 
.................... #define m2p2 pin_d1 
....................  
.................... void tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void frente() 
.................... { 
....................       output_bit(m1p1, 1); 
*
1BF0:  BSF    F8D.2
1BF2:  BCF    F96.2
....................       output_bit(m1p2, 0); 
1BF4:  BCF    F8B.0
1BF6:  BCF    F94.0
....................       output_bit(m2p1, 0); 
1BF8:  BCF    F8C.0
1BFA:  BCF    F95.0
....................       output_bit(m2p2, 1); 
1BFC:  BSF    F8C.1
1BFE:  BCF    F95.1
1C00:  GOTO   1E5A (RETURN)
.................... } 
....................  
.................... void gira_esquerda() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void gira_direita() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_frente() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_frente() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void para() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void AllForward() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
.................... void AllBackwards() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void LeftBackwardRightForward() 
.................... { 
....................       output_bit(m1p1, 1); 
*
17E8:  BSF    F8D.2
17EA:  BCF    F96.2
....................       output_bit(m1p2, 0); 
17EC:  BCF    F8B.0
17EE:  BCF    F94.0
....................       output_bit(m2p1, 1); 
17F0:  BSF    F8C.0
17F2:  BCF    F95.0
....................       output_bit(m2p2, 0); 
17F4:  BCF    F8C.1
17F6:  BCF    F95.1
17F8:  RETURN 0
.................... } 
.................... void RightBackwardLeftForward() 
.................... { 
....................       output_bit(m1p1, 0); 
17FA:  BCF    F8D.2
17FC:  BCF    F96.2
....................       output_bit(m1p2, 1); 
17FE:  BSF    F8B.0
1800:  BCF    F94.0
....................       output_bit(m2p1, 0); 
1802:  BCF    F8C.0
1804:  BCF    F95.0
....................       output_bit(m2p2, 1); 
1806:  BSF    F8C.1
1808:  BCF    F95.1
180A:  RETURN 0
.................... } 
....................  
.................... void MotorInitialize() 
.................... { 
....................       setup_timer_2(T2_DIV_BY_16, 255, 1); //341 us overflow, 341 us interrupt 
*
14CC:  MOVLW  00
14CE:  IORLW  06
14D0:  MOVWF  FCA
14D2:  MOVLW  FF
14D4:  MOVWF  FCB
....................  
....................       setup_ccp1(CCP_PWM | CCP_SHUTDOWN_AC_L | CCP_SHUTDOWN_BD_L); 
14D6:  BCF    F94.2
14D8:  BCF    F8B.2
14DA:  MOVLW  0C
14DC:  MOVWF  FBD
14DE:  CLRF   FB7
14E0:  CLRF   FB6
....................       setup_ccp2(CCP_PWM); 
14E2:  BCF    F94.1
14E4:  BCF    F8B.1
14E6:  MOVWF  FBA
14E8:  GOTO   1516 (RETURN)
.................... } 
....................  
.................... void SetBothPwm(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
179A:  MOVFF  36,02
179E:  MOVFF  35,01
17A2:  RRCF   02,F
17A4:  RRCF   01,F
17A6:  RRCF   02,F
17A8:  RRCF   01,F
17AA:  RRCF   02,F
17AC:  MOVFF  01,FBE
17B0:  RRCF   02,F
17B2:  RRCF   02,W
17B4:  ANDLW  30
17B6:  MOVWF  00
17B8:  MOVF   FBD,W
17BA:  ANDLW  CF
17BC:  IORWF  00,W
17BE:  MOVWF  FBD
....................       set_pwm2_duty((int16)vel); //-50); 
17C0:  MOVFF  36,02
17C4:  MOVFF  35,01
17C8:  RRCF   02,F
17CA:  RRCF   01,F
17CC:  RRCF   02,F
17CE:  RRCF   01,F
17D0:  RRCF   02,F
17D2:  MOVFF  01,FBB
17D6:  RRCF   02,F
17D8:  RRCF   02,W
17DA:  ANDLW  30
17DC:  MOVWF  00
17DE:  MOVF   FBA,W
17E0:  ANDLW  CF
17E2:  IORWF  00,W
17E4:  MOVWF  FBA
17E6:  RETURN 0
.................... } 
....................  
.................... void SetRight(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
1BC8:  MOVFF  36,02
1BCC:  MOVFF  35,01
1BD0:  RRCF   02,F
1BD2:  RRCF   01,F
1BD4:  RRCF   02,F
1BD6:  RRCF   01,F
1BD8:  RRCF   02,F
1BDA:  MOVFF  01,FBE
1BDE:  RRCF   02,F
1BE0:  RRCF   02,W
1BE2:  ANDLW  30
1BE4:  MOVWF  00
1BE6:  MOVF   FBD,W
1BE8:  ANDLW  CF
1BEA:  IORWF  00,W
1BEC:  MOVWF  FBD
1BEE:  RETURN 0
.................... } 
.................... void SetLeft(int16 vel) 
.................... { 
....................       set_pwm2_duty((int16)vel); 
*
1BA0:  MOVFF  36,02
1BA4:  MOVFF  35,01
1BA8:  RRCF   02,F
1BAA:  RRCF   01,F
1BAC:  RRCF   02,F
1BAE:  RRCF   01,F
1BB0:  RRCF   02,F
1BB2:  MOVFF  01,FBB
1BB6:  RRCF   02,F
1BB8:  RRCF   02,W
1BBA:  ANDLW  30
1BBC:  MOVWF  00
1BBE:  MOVF   FBA,W
1BC0:  ANDLW  CF
1BC2:  IORWF  00,W
1BC4:  MOVWF  FBA
1BC6:  RETURN 0
.................... } 
....................  
.................... #include <LCD_KIT.c> 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipula��o de m�dulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: F�bio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
.................... /* 
.................... lcd_cursor_on()                        fun��es LCD 
.................... lcd_cursor_pisca() 
.................... lcd_cursor_off() 
.................... lcd_corre_esquerda() 
.................... lcd_corre_direita() 
.................... lcd_envia_nibble( byte dado ) 
.................... lcd_le_byte() 
.................... lcd_ini() 
.................... lcd_pos_xy( byte x, byte y) 
.................... lcd_escreve( char c)                  \f  Clear display                            //// 
....................                                             \n  Go to start of second line               //// 
....................                                   \b  Move back one position                   //// 
....................  
.................... lcd_le( byte x, byte y) 
.................... lcd_apaga() 
.................... { 
....................  
.................... */ 
.................... // As defini��es a seguir s�o utilizadas para acesso aos pinos do display 
.................... // caso o pino RW n�o seja utilizado, comente a defini��o lcd_rw 
.................... #ifndef lcd_enable 
....................    #define lcd_rs         pin_d2      // pino rs do LCD 
....................    #define lcd_enable     pin_d3      // pino enable do LCD 
....................    #define lcd_d4         pin_d4      // pino de dados d4 do LCD 
....................    #define lcd_d5         pin_d5      // pino de dados d5 do LCD 
....................    #define lcd_d6         pin_d6      // pino de dados d6 do LCD 
....................    #define lcd_d7         pin_d7   // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endere�o da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seq��ncia de inicializa��o do m�dulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................  
.................... /*   O 0x20 eh p configurar o tipo do display e talz. 
....................    O Segundo numero configura o modo do cursor, sendo: 
....................                -> 0xf Cursor piscante 
....................                -> 0xe Cursor comum 
....................                -> 0xc Sem cursor 
....................    O terceiro (1) limpa o display 
....................    O Quarto volta com o cursor. 
.................... */ 
....................  
.................... byte lcd_le_byte() 
.................... // l� um byte do LCD (somente com pino RW) 
.................... { 
....................    byte dado; 
....................    // configura os pinos de dados como entradas 
....................    input(lcd_d4); 
....................    input(lcd_d5); 
....................    input(lcd_d6); 
....................    input(lcd_d7); 
....................    // se o pino rw for utilizado, coloca em 1 
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_high(lcd_enable); // habilita display 
....................    dado = 0;   // zera a vari�vel de leitura 
....................    // l� os quatro bits mais significativos 
....................    if (input(lcd_d7)) bit_set(dado,7); 
....................    if (input(lcd_d6)) bit_set(dado,6); 
....................    if (input(lcd_d5)) bit_set(dado,5); 
....................    if (input(lcd_d4)) bit_set(dado,4); 
....................    // d� um pulso na linha enable 
....................    output_low(lcd_enable); 
....................    output_high(lcd_enable); 
....................    // l� os quatro bits menos significativos 
....................    if (input(lcd_d7)) bit_set(dado,3); 
....................    if (input(lcd_d6)) bit_set(dado,2); 
....................    if (input(lcd_d5)) bit_set(dado,1); 
....................    if (input(lcd_d4)) bit_set(dado,0); 
....................    output_low(lcd_enable);   // desabilita o display 
....................    return dado;   // retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
....................    // coloca os quatro bits nas saidas 
....................    output_bit(lcd_d4,bit_test(dado,0)); 
*
10D4:  BTFSC  57.0
10D6:  BRA    10DC
10D8:  BCF    F8C.4
10DA:  BRA    10DE
10DC:  BSF    F8C.4
10DE:  BCF    F95.4
....................    output_bit(lcd_d5,bit_test(dado,1)); 
10E0:  BTFSC  57.1
10E2:  BRA    10E8
10E4:  BCF    F8C.5
10E6:  BRA    10EA
10E8:  BSF    F8C.5
10EA:  BCF    F95.5
....................    output_bit(lcd_d6,bit_test(dado,2)); 
10EC:  BTFSC  57.2
10EE:  BRA    10F4
10F0:  BCF    F8C.6
10F2:  BRA    10F6
10F4:  BSF    F8C.6
10F6:  BCF    F95.6
....................    output_bit(lcd_d7,bit_test(dado,3)); 
10F8:  BTFSC  57.3
10FA:  BRA    1100
10FC:  BCF    F8C.7
10FE:  BRA    1102
1100:  BSF    F8C.7
1102:  BCF    F95.7
....................    // d� um pulso na linha enable 
....................    output_high(lcd_enable); 
1104:  BCF    F95.3
1106:  BSF    F8C.3
....................    output_low(lcd_enable); 
1108:  BCF    F95.3
110A:  BCF    F8C.3
110C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
....................    // coloca a linha rs em 0 
....................    output_low(lcd_rs); 
110E:  BCF    F95.2
1110:  BCF    F8C.2
....................    // aguarda o display ficar desocupado 
....................    //while ( bit_test(lcd_le_byte(),7) ) ; 
....................    // configura a linha rs dependendo do modo selecionado 
....................    output_bit(lcd_rs,endereco); 
1112:  MOVF   54,F
1114:  BNZ   111A
1116:  BCF    F8C.2
1118:  BRA    111C
111A:  BSF    F8C.2
111C:  BCF    F95.2
....................    delay_us(100);   // aguarda 100 us 
111E:  MOVLW  64
1120:  MOVWF  56
1122:  RCALL  10B4
....................    // caso a linha rw esteja definida, coloca em 0 
....................    #ifdef lcd_rw 
....................       output_low(lcd_rw); 
....................    #endif 
....................    // desativa linha enable 
....................    output_low(lcd_enable); 
1124:  BCF    F95.3
1126:  BCF    F8C.3
....................    // envia a primeira parte do byte 
....................    lcd_envia_nibble(dado >> 4); 
1128:  SWAPF  55,W
112A:  MOVWF  56
112C:  MOVLW  0F
112E:  ANDWF  56,F
1130:  MOVFF  56,57
1134:  RCALL  10D4
....................    // envia a segunda parte do byte 
....................    lcd_envia_nibble(dado & 0x0f); 
1136:  MOVF   55,W
1138:  ANDLW  0F
113A:  MOVWF  56
113C:  MOVWF  57
113E:  RCALL  10D4
1140:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicializa��o do display 
.................... { 
....................    byte conta; 
....................    output_low(lcd_d4); 
*
142A:  BCF    F95.4
142C:  BCF    F8C.4
....................    output_low(lcd_d5); 
142E:  BCF    F95.5
1430:  BCF    F8C.5
....................    output_low(lcd_d6); 
1432:  BCF    F95.6
1434:  BCF    F8C.6
....................    output_low(lcd_d7); 
1436:  BCF    F95.7
1438:  BCF    F8C.7
....................    output_low(lcd_rs); 
143A:  BCF    F95.2
143C:  BCF    F8C.2
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_low(lcd_enable); 
143E:  BCF    F95.3
1440:  BCF    F8C.3
1442:  CLRF   16
1444:  BTFSC  FF2.7
1446:  BSF    16.7
1448:  BCF    FF2.7
....................    delay_ms(15); 
144A:  MOVLW  0F
144C:  MOVWF  50
144E:  RCALL  1142
1450:  BTFSC  16.7
1452:  BSF    FF2.7
....................    // envia uma seq��ncia de 3 vezes 0x03 
....................    // e depois 0x02 para configurar o m�dulo 
....................    // para modo de 4 bits 
....................    for(conta=1;conta<=3;++conta) 
1454:  MOVLW  01
1456:  MOVWF  29
1458:  MOVF   29,W
145A:  SUBLW  03
145C:  BNC   1486
145E:  CLRF   16
1460:  BTFSC  FF2.7
1462:  BSF    16.7
1464:  BCF    FF2.7
....................    { 
....................       lcd_envia_nibble(3); 
1466:  MOVLW  03
1468:  MOVWF  57
146A:  RCALL  10D4
146C:  BTFSC  16.7
146E:  BSF    FF2.7
1470:  CLRF   16
1472:  BTFSC  FF2.7
1474:  BSF    16.7
1476:  BCF    FF2.7
....................       delay_ms(5); 
1478:  MOVLW  05
147A:  MOVWF  50
147C:  RCALL  1142
147E:  BTFSC  16.7
1480:  BSF    FF2.7
1482:  INCF   29,F
1484:  BRA    1458
1486:  CLRF   16
1488:  BTFSC  FF2.7
148A:  BSF    16.7
148C:  BCF    FF2.7
....................    } 
....................    lcd_envia_nibble(2); 
148E:  MOVLW  02
1490:  MOVWF  57
1492:  RCALL  10D4
1494:  BTFSC  16.7
1496:  BSF    FF2.7
....................    // envia string de inicializa��o do display 
....................    for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
1498:  CLRF   29
149A:  MOVF   29,W
149C:  SUBLW  03
149E:  BNC   14C8
14A0:  CLRF   03
14A2:  MOVF   29,W
14A4:  MOVFF  FF2,2A
14A8:  BCF    FF2.7
14AA:  RCALL  1096
14AC:  BTFSC  2A.7
14AE:  BSF    FF2.7
14B0:  MOVWF  2A
14B2:  CLRF   16
14B4:  BTFSC  FF2.7
14B6:  BSF    16.7
14B8:  BCF    FF2.7
14BA:  CLRF   54
14BC:  MOVWF  55
14BE:  RCALL  110E
14C0:  BTFSC  16.7
14C2:  BSF    FF2.7
14C4:  INCF   29,F
14C6:  BRA    149A
14C8:  GOTO   1514 (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
116A:  DECFSZ 51,W
116C:  BRA    1170
116E:  BRA    1176
....................       endereco = lcd_seg_lin; 
1170:  MOVLW  40
1172:  MOVWF  52
1174:  BRA    1178
....................    else 
....................       endereco = 0; 
1176:  CLRF   52
....................    endereco += x-1; 
1178:  MOVLW  01
117A:  SUBWF  50,W
117C:  ADDWF  52,F
....................    lcd_envia_byte(0,0x80|endereco); 
117E:  MOVF   52,W
1180:  IORLW  80
1182:  MOVWF  53
1184:  CLRF   54
1186:  MOVWF  55
1188:  RCALL  110E
118A:  RETURN 0
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
118C:  MOVF   4F,W
118E:  XORLW  0C
1190:  BZ    11A0
1192:  XORLW  06
1194:  BZ    11B0
1196:  XORLW  07
1198:  BZ    11B0
119A:  XORLW  05
119C:  BZ    11BC
119E:  BRA    11C6
....................    { 
....................      case '\f'    :   lcd_envia_byte(0,1); 
11A0:  CLRF   54
11A2:  MOVLW  01
11A4:  MOVWF  55
11A6:  RCALL  110E
....................               delay_ms(2); 
11A8:  MOVLW  02
11AA:  MOVWF  50
11AC:  RCALL  1142
....................             break; 
11AE:  BRA    11D0
....................      case '\n'   : 
....................      case '\r'    :   lcd_pos_xy(1,2); 
11B0:  MOVLW  01
11B2:  MOVWF  50
11B4:  MOVLW  02
11B6:  MOVWF  51
11B8:  RCALL  116A
....................               break; 
11BA:  BRA    11D0
....................      case '\b'    :   lcd_envia_byte(0,0x10); 
11BC:  CLRF   54
11BE:  MOVLW  10
11C0:  MOVWF  55
11C2:  RCALL  110E
....................               break; 
11C4:  BRA    11D0
....................      default   :   lcd_envia_byte(1,c); 
11C6:  MOVLW  01
11C8:  MOVWF  54
11CA:  MOVFF  4F,55
11CE:  RCALL  110E
....................               break; 
....................    } 
11D0:  RETURN 0
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
....................    char valor; 
....................    // seleciona a posi��o do caractere 
....................    lcd_pos_xy(x,y); 
....................    // ativa rs 
....................    output_high(lcd_rs); 
....................    // l� o caractere 
....................    valor = lcd_le_byte(); 
....................    // desativa rs 
....................    output_low(lcd_rs); 
....................    // retorna o valor do caractere 
....................    return valor; 
.................... } 
....................  
.................... void lcd_apaga() 
.................... { 
....................    lcd_envia_byte(0,1); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_cursor_on() 
....................     { 
.................... lcd_envia_byte(0,0x0E); 
....................     } 
....................  
.................... void lcd_cursor_pisca() 
....................     { 
.................... lcd_envia_byte(0,0x0F); 
....................     } 
....................  
.................... void lcd_cursor_off() 
....................     { 
....................  lcd_envia_byte(0,0x0C); 
....................     } 
....................  
.................... void lcd_corre_esquerda() 
....................     { 
....................  lcd_envia_byte(0,0x18); 
....................     } 
....................  
.................... void lcd_corre_direita() 
....................     { 
.................... lcd_envia_byte(0,0x1C); 
....................     } 
....................  
....................  
....................  
.................... #define button1 pin_a4 
.................... #define button2 pin_a5 
.................... #define button3 pin_e0 
.................... #define button4 pin_e1 
....................  
.................... int running; 
....................  
.................... //extremo esquerda, centro esquerda, centro direita, extrema direita 
.................... int16 ad1, ad2, ad3, ad4; 
.................... int16 timerBase = 1; 
.................... int8 adCounter; 
....................  
.................... ///Em qual decisão ele ta 
.................... int8 decisionCounter = 0; 
.................... ///Isso aqui serve para ele so contabilizar as tomadas de decisão a cadada 200ms (no timerBase) 
.................... int8 decisionInCoolDown = 0; 
....................  
.................... //Quantos porcento pra um lado ele pode estar antes de ser considerado desalinhado 
.................... float alignRatio = 0.7f; 
....................  
.................... void ClearScreen(); 
.................... void Setup(); 
.................... void AndarReto(); 
.................... ///Se tiver retorna 1 
.................... int8 IsCenterAlign(); 
.................... int8 IsCenterAndNotMargins(); 
.................... int8 IsCenterInside(); 
.................... int8 IsMarginsInside(); 
.................... int8 IsMarginsOutside(); 
.................... int8 IsAllOutside(); 
.................... ///Curva a direita 
.................... int8 IsRight(); 
.................... int8 IsLeft(); 
.................... int8 IsAllAlign(); 
.................... ///uma linha preta sobre todos 
.................... void Align(); 
.................... void InvertedAlign(); 
....................  
.................... #int_timer0 
.................... void timerTick() 
.................... { 
....................     if (adCounter == 0) 
*
12CC:  MOVF   22,F
12CE:  BNZ   12E0
....................     { 
....................         ad1 = read_adc(); 
12D0:  BSF    FC2.1
12D2:  BTFSC  FC2.1
12D4:  BRA    12D2
12D6:  MOVFF  FC3,18
12DA:  MOVFF  FC4,19
....................     } 
12DE:  BRA    131E
....................     else if (adCounter == 1) 
12E0:  DECFSZ 22,W
12E2:  BRA    12F4
....................     { 
....................         ad2 = read_adc(); 
12E4:  BSF    FC2.1
12E6:  BTFSC  FC2.1
12E8:  BRA    12E6
12EA:  MOVFF  FC3,1A
12EE:  MOVFF  FC4,1B
....................     } 
12F2:  BRA    131E
....................     else if (adCounter == 2) 
12F4:  MOVF   22,W
12F6:  SUBLW  02
12F8:  BNZ   130A
....................     { 
....................         ad3 = read_adc(); 
12FA:  BSF    FC2.1
12FC:  BTFSC  FC2.1
12FE:  BRA    12FC
1300:  MOVFF  FC3,1C
1304:  MOVFF  FC4,1D
....................     } 
1308:  BRA    131E
....................     else if (adCounter == 3) 
130A:  MOVF   22,W
130C:  SUBLW  03
130E:  BNZ   131E
....................     { 
....................         ad4 = read_adc(); 
1310:  BSF    FC2.1
1312:  BTFSC  FC2.1
1314:  BRA    1312
1316:  MOVFF  FC3,1E
131A:  MOVFF  FC4,1F
....................     } 
....................     if (timerBase == 2000) 
131E:  MOVF   20,W
1320:  SUBLW  D0
1322:  BNZ   136E
1324:  MOVF   21,W
1326:  SUBLW  07
1328:  BNZ   136E
....................     { 
....................         timerBase = 0; 
132A:  CLRF   21
132C:  CLRF   20
....................         ClearScreen(); 
132E:  BRA    11D2
....................         lcd_pos_xy(1, 1); 
1330:  MOVLW  01
1332:  MOVWF  50
1334:  MOVWF  51
1336:  RCALL  116A
....................         // printf(lcd_escreve, "1: "); 
....................         // printf(lcd_escreve, "%04ld", ad1); 
....................         // printf(lcd_escreve, " 2: "); 
....................         // printf(lcd_escreve, "%04ld", ad2); 
....................         // lcd_pos_xy(1, 2); 
....................         // printf(lcd_escreve, "3: "); 
....................         // printf(lcd_escreve, "%04ld", ad3); 
....................         // printf(lcd_escreve, " 4: "); 
....................         // printf(lcd_escreve, "%04ld", ad3); 
....................         printf(lcd_escreve, " d: %d", decisionCounter); 
1338:  MOVLW  96
133A:  MOVWF  FF6
133C:  MOVLW  13
133E:  MOVWF  FF7
1340:  MOVLW  04
1342:  MOVWF  49
1344:  RCALL  11DC
1346:  MOVFF  23,49
134A:  MOVLW  18
134C:  MOVWF  4A
134E:  RCALL  1222
....................         printf(lcd_escreve, " c: %d", decisionInCoolDown); 
1350:  MOVLW  9E
1352:  MOVWF  FF6
1354:  MOVLW  13
1356:  MOVWF  FF7
1358:  MOVLW  04
135A:  MOVWF  49
135C:  RCALL  11DC
135E:  MOVFF  24,49
1362:  MOVLW  18
1364:  MOVWF  4A
1366:  RCALL  1222
....................  
....................         if (decisionInCoolDown > 0) 
1368:  MOVF   24,F
136A:  BZ    136E
....................         { 
....................             decisionInCoolDown--; 
136C:  DECF   24,F
....................         } 
....................     } 
....................     timerBase++; 
136E:  INCF   20,F
1370:  BTFSC  FD8.2
1372:  INCF   21,F
....................     adCounter++; 
1374:  INCF   22,F
....................  
....................     if (adCounter > 4) 
1376:  MOVF   22,W
1378:  SUBLW  04
137A:  BC    137E
....................     { 
....................         adCounter = 0; 
137C:  CLRF   22
....................     } 
....................  
....................     set_adc_channel(adCounter); 
137E:  RLCF   22,W
1380:  MOVWF  00
1382:  RLCF   00,F
1384:  MOVLW  FC
1386:  ANDWF  00,F
1388:  MOVF   FC2,W
138A:  ANDLW  C3
138C:  IORWF  00,W
138E:  MOVWF  FC2
1390:  BCF    FF2.2
1392:  GOTO   1054
.................... } 
....................  
.................... void main() 
*
20D2:  CLRF   FF8
20D4:  BCF    FD0.7
20D6:  BSF    07.7
20D8:  CLRF   21
20DA:  MOVLW  01
20DC:  MOVWF  20
20DE:  CLRF   23
20E0:  CLRF   24
20E2:  MOVLW  33
20E4:  MOVWF  28
20E6:  MOVWF  27
20E8:  MOVWF  26
20EA:  MOVLW  7E
20EC:  MOVWF  25
20EE:  MOVF   FC1,W
20F0:  ANDLW  C0
20F2:  IORLW  0F
20F4:  MOVWF  FC1
20F6:  MOVLW  07
20F8:  MOVWF  FB4
.................... { 
....................     Setup(); 
20FA:  GOTO   14EC
20FE:  CLRF   16
2100:  BTFSC  FF2.7
2102:  BSF    16.7
2104:  BCF    FF2.7
....................     lcd_pos_xy(1, 1); 
2106:  MOVLW  01
2108:  MOVWF  50
210A:  MOVWF  51
210C:  CALL   116A
2110:  BTFSC  16.7
2112:  BSF    FF2.7
2114:  CLRF   16
2116:  BTFSC  FF2.7
2118:  BSF    16.7
211A:  BCF    FF2.7
....................     delay_ms(5); 
211C:  MOVLW  05
211E:  MOVWF  50
2120:  CALL   1142
2124:  BTFSC  16.7
2126:  BSF    FF2.7
....................     printf(lcd_escreve, " Inicializando"); 
2128:  MOVLW  A6
212A:  MOVWF  FF6
212C:  MOVLW  13
212E:  MOVWF  FF7
2130:  CALL   151A
....................     delay_ms(1000); 
2134:  MOVLW  04
2136:  MOVWF  29
2138:  CLRF   16
213A:  BTFSC  FF2.7
213C:  BSF    16.7
213E:  BCF    FF2.7
2140:  MOVLW  FA
2142:  MOVWF  50
2144:  CALL   1142
2148:  BTFSC  16.7
214A:  BSF    FF2.7
214C:  DECFSZ 29,F
214E:  BRA    2138
....................     do 
....................     { 
....................         if (input(button1) == 0) 
2150:  BSF    F92.4
2152:  BTFSC  F80.4
2154:  BRA    215A
....................         { 
....................             running = 1; 
2156:  MOVLW  01
2158:  MOVWF  17
....................         } 
....................         if (input(button2) == 0) 
215A:  BSF    F92.5
215C:  BTFSC  F80.5
215E:  BRA    2162
....................         { 
....................             running = 0; 
2160:  CLRF   17
....................         } 
....................          if (decisioncounter == 0) 
2162:  MOVF   23,F
2164:  BNZ   21A8
....................          { 
....................              ///esperar até ser colocado na linha de partida 
....................              if (isallalign()) 
2166:  CALL   1546
216A:  MOVF   01,F
216C:  BZ    219E
216E:  CLRF   16
2170:  BTFSC  FF2.7
2172:  BSF    16.7
2174:  BCF    FF2.7
....................              { 
....................                  lcd_pos_xy(1, 2); 
2176:  MOVLW  01
2178:  MOVWF  50
217A:  MOVLW  02
217C:  MOVWF  51
217E:  CALL   116A
2182:  BTFSC  16.7
2184:  BSF    FF2.7
....................                  printf(lcd_escreve, "ta na posicao"); 
2186:  MOVLW  B6
2188:  MOVWF  FF6
218A:  MOVLW  13
218C:  MOVWF  FF7
218E:  CALL   151A
....................                  if (running) 
2192:  MOVF   17,F
2194:  BZ    219C
....................                  { 
....................                      decisioncounter++; 
2196:  INCF   23,F
....................                      decisionincooldown = 5; 
2198:  MOVLW  05
219A:  MOVWF  24
....................                  } 
....................              } 
219C:  BRA    21A4
....................              else 
....................              { 
....................                  if (running) 
219E:  MOVF   17,F
21A0:  BZ    21A4
....................                  { 
....................                      align(); 
21A2:  RCALL  1C04
....................                  } 
....................              } 
....................          } 
21A4:  GOTO   29E4
.................... 		 ///Começa desvio da Rampa 
....................          else if (decisioncounter == 1 && running) 
21A8:  DECFSZ 23,W
21AA:  BRA    21FA
21AC:  MOVF   17,F
21AE:  BZ    21FA
....................          { 
....................              ///se alinha ate achar a curva a direita 
....................              align(); 
21B0:  RCALL  1C04
....................              if (isright() && !decisionincooldown) 
21B2:  RCALL  1E82
21B4:  MOVF   01,F
21B6:  BZ    21F6
21B8:  MOVF   24,F
21BA:  BNZ   21F6
....................              { 
....................                  ///começa a fazer a curva a direita girando um pouco para a direita e dando uma ré 
....................                  setleft(900); 
21BC:  MOVLW  03
21BE:  MOVWF  36
21C0:  MOVLW  84
21C2:  MOVWF  35
21C4:  RCALL  1BA0
....................                  setright(950); 
21C6:  MOVLW  03
21C8:  MOVWF  36
21CA:  MOVLW  B6
21CC:  MOVWF  35
21CE:  RCALL  1BC8
....................                  rightbackwardleftforward(); 
21D0:  CALL   17FA
....................                  delay_ms(400); 
21D4:  MOVLW  02
21D6:  MOVWF  29
21D8:  CLRF   16
21DA:  BTFSC  FF2.7
21DC:  BSF    16.7
21DE:  BCF    FF2.7
21E0:  MOVLW  C8
21E2:  MOVWF  50
21E4:  CALL   1142
21E8:  BTFSC  16.7
21EA:  BSF    FF2.7
21EC:  DECFSZ 29,F
21EE:  BRA    21D8
....................                  decisioncounter++; 
21F0:  INCF   23,F
....................                  decisionincooldown = 5; 
21F2:  MOVLW  05
21F4:  MOVWF  24
....................              } 
....................          } 
21F6:  GOTO   29E4
.................... 		 else if (decisioncounter == 2 && running) 
21FA:  MOVF   23,W
21FC:  SUBLW  02
21FE:  BNZ   2218
2200:  MOVF   17,F
2202:  BZ    2218
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
2204:  RCALL  1ECE
2206:  MOVF   01,F
2208:  BZ    2214
220A:  MOVF   24,F
220C:  BNZ   2214
.................... 			 { 
.................... 				 decisioncounter++; 
220E:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2210:  MOVLW  05
2212:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
2214:  GOTO   29E4
.................... 		 else if (decisioncounter == 3)  
2218:  MOVF   23,W
221A:  SUBLW  03
221C:  BNZ   2268
.................... 		 { 
.................... 				align(); 
221E:  RCALL  1C04
.................... 				if (isLeft() && !decisionincooldown) 
2220:  RCALL  200E
2222:  MOVF   01,F
2224:  BZ    2264
2226:  MOVF   24,F
2228:  BNZ   2264
.................... 				{ 
.................... 					setleft(950); 
222A:  MOVLW  03
222C:  MOVWF  36
222E:  MOVLW  B6
2230:  MOVWF  35
2232:  RCALL  1BA0
.................... 					setright(900); 
2234:  MOVLW  03
2236:  MOVWF  36
2238:  MOVLW  84
223A:  MOVWF  35
223C:  RCALL  1BC8
.................... 					leftbackwardrightforward(); 
223E:  CALL   17E8
.................... 					delay_ms(400); 
2242:  MOVLW  02
2244:  MOVWF  29
2246:  CLRF   16
2248:  BTFSC  FF2.7
224A:  BSF    16.7
224C:  BCF    FF2.7
224E:  MOVLW  C8
2250:  MOVWF  50
2252:  CALL   1142
2256:  BTFSC  16.7
2258:  BSF    FF2.7
225A:  DECFSZ 29,F
225C:  BRA    2246
.................... 					decisioncounter++; 
225E:  INCF   23,F
.................... 					decisionincooldown = 5; 
2260:  MOVLW  05
2262:  MOVWF  24
.................... 				} 
.................... 		 } 
2264:  GOTO   29E4
.................... 		 else if (decisioncounter == 4) 
2268:  MOVF   23,W
226A:  SUBLW  04
226C:  BNZ   2282
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
226E:  RCALL  1ECE
2270:  MOVF   01,F
2272:  BZ    227E
2274:  MOVF   24,F
2276:  BNZ   227E
.................... 			 { 
.................... 				 decisioncounter++; 
2278:  INCF   23,F
.................... 				 decisionincooldown = 5; 
227A:  MOVLW  05
227C:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
227E:  GOTO   29E4
.................... 		 else if (decisioncounter == 5) 
2282:  MOVF   23,W
2284:  SUBLW  05
2286:  BNZ   22D2
.................... 		 { 
.................... 			 align(); 
2288:  RCALL  1C04
.................... 			 if (isLeft() && !decisionincooldown) 
228A:  RCALL  200E
228C:  MOVF   01,F
228E:  BZ    22CE
2290:  MOVF   24,F
2292:  BNZ   22CE
.................... 			 { 
.................... 				 setleft(950); 
2294:  MOVLW  03
2296:  MOVWF  36
2298:  MOVLW  B6
229A:  MOVWF  35
229C:  RCALL  1BA0
.................... 				 setright(900); 
229E:  MOVLW  03
22A0:  MOVWF  36
22A2:  MOVLW  84
22A4:  MOVWF  35
22A6:  RCALL  1BC8
.................... 				 leftbackwardrightforward(); 
22A8:  CALL   17E8
.................... 				 delay_ms(400); 
22AC:  MOVLW  02
22AE:  MOVWF  29
22B0:  CLRF   16
22B2:  BTFSC  FF2.7
22B4:  BSF    16.7
22B6:  BCF    FF2.7
22B8:  MOVLW  C8
22BA:  MOVWF  50
22BC:  CALL   1142
22C0:  BTFSC  16.7
22C2:  BSF    FF2.7
22C4:  DECFSZ 29,F
22C6:  BRA    22B0
.................... 				 decisioncounter++; 
22C8:  INCF   23,F
.................... 				 decisionincooldown = 5; 
22CA:  MOVLW  05
22CC:  MOVWF  24
.................... 			 } 
.................... 		 } 
22CE:  GOTO   29E4
.................... 		 else if (decisioncounter == 6) 
22D2:  MOVF   23,W
22D4:  SUBLW  06
22D6:  BNZ   22EC
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
22D8:  RCALL  1ECE
22DA:  MOVF   01,F
22DC:  BZ    22E8
22DE:  MOVF   24,F
22E0:  BNZ   22E8
.................... 			 { 
.................... 				 decisioncounter++; 
22E2:  INCF   23,F
.................... 				 decisionincooldown = 5; 
22E4:  MOVLW  05
22E6:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
22E8:  GOTO   29E4
.................... 		 ///Volta pra pista 
.................... 		 else if (decisioncounter == 7) 
22EC:  MOVF   23,W
22EE:  SUBLW  07
22F0:  BNZ   233C
.................... 		 { 
.................... 			 align(); 
22F2:  RCALL  1C04
.................... 			 if (isRight() && !decisionincooldown) 
22F4:  RCALL  1E82
22F6:  MOVF   01,F
22F8:  BZ    2338
22FA:  MOVF   24,F
22FC:  BNZ   2338
.................... 			 { 
.................... 				 setleft(900); 
22FE:  MOVLW  03
2300:  MOVWF  36
2302:  MOVLW  84
2304:  MOVWF  35
2306:  RCALL  1BA0
.................... 				 setright(950); 
2308:  MOVLW  03
230A:  MOVWF  36
230C:  MOVLW  B6
230E:  MOVWF  35
2310:  RCALL  1BC8
.................... 				 rightbackwardleftforward(); 
2312:  CALL   17FA
.................... 				 delay_ms(400); 
2316:  MOVLW  02
2318:  MOVWF  29
231A:  CLRF   16
231C:  BTFSC  FF2.7
231E:  BSF    16.7
2320:  BCF    FF2.7
2322:  MOVLW  C8
2324:  MOVWF  50
2326:  CALL   1142
232A:  BTFSC  16.7
232C:  BSF    FF2.7
232E:  DECFSZ 29,F
2330:  BRA    231A
.................... 				 decisioncounter++; 
2332:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2334:  MOVLW  05
2336:  MOVWF  24
.................... 			 } 
.................... 		 } 
2338:  GOTO   29E4
.................... 		 else if (decisioncounter == 8) 
233C:  MOVF   23,W
233E:  SUBLW  08
2340:  BNZ   2356
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
2342:  RCALL  1ECE
2344:  MOVF   01,F
2346:  BZ    2352
2348:  MOVF   24,F
234A:  BNZ   2352
.................... 			 { 
.................... 				 decisioncounter++; 
234C:  INCF   23,F
.................... 				 decisionincooldown = 5; 
234E:  MOVLW  05
2350:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
2352:  GOTO   29E4
.................... 		 ///Primeira curva 
.................... 		 else if (decisioncounter == 9) 
2356:  MOVF   23,W
2358:  SUBLW  09
235A:  BNZ   23A6
.................... 		 { 
.................... 			 align(); 
235C:  RCALL  1C04
.................... 			 if (isRight() && !decisionincooldown) 
235E:  RCALL  1E82
2360:  MOVF   01,F
2362:  BZ    23A2
2364:  MOVF   24,F
2366:  BNZ   23A2
.................... 			 { 
.................... 				 setleft(900); 
2368:  MOVLW  03
236A:  MOVWF  36
236C:  MOVLW  84
236E:  MOVWF  35
2370:  RCALL  1BA0
.................... 				 setright(950); 
2372:  MOVLW  03
2374:  MOVWF  36
2376:  MOVLW  B6
2378:  MOVWF  35
237A:  RCALL  1BC8
.................... 				 rightbackwardleftforward(); 
237C:  CALL   17FA
.................... 				 delay_ms(400); 
2380:  MOVLW  02
2382:  MOVWF  29
2384:  CLRF   16
2386:  BTFSC  FF2.7
2388:  BSF    16.7
238A:  BCF    FF2.7
238C:  MOVLW  C8
238E:  MOVWF  50
2390:  CALL   1142
2394:  BTFSC  16.7
2396:  BSF    FF2.7
2398:  DECFSZ 29,F
239A:  BRA    2384
.................... 				 decisioncounter++; 
239C:  INCF   23,F
.................... 				 decisionincooldown = 5; 
239E:  MOVLW  05
23A0:  MOVWF  24
.................... 			 } 
.................... 		 } 
23A2:  GOTO   29E4
.................... 		 else if (decisioncounter == 10) 
23A6:  MOVF   23,W
23A8:  SUBLW  0A
23AA:  BNZ   23C0
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
23AC:  RCALL  1ECE
23AE:  MOVF   01,F
23B0:  BZ    23BC
23B2:  MOVF   24,F
23B4:  BNZ   23BC
.................... 			 { 
.................... 				 decisioncounter++; 
23B6:  INCF   23,F
.................... 				 decisionincooldown = 5; 
23B8:  MOVLW  05
23BA:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
23BC:  GOTO   29E4
.................... 		 ///Começa desvio do Fixo 
.................... 		 else if (decisioncounter == 11) 
23C0:  MOVF   23,W
23C2:  SUBLW  0B
23C4:  BNZ   2412
.................... 		 { 
.................... 			 align(); 
23C6:  RCALL  1C04
.................... 			 if (isRight() && !decisionincooldown) 
23C8:  RCALL  1E82
23CA:  MOVF   01,F
23CC:  BZ    2410
23CE:  MOVF   24,F
23D0:  BNZ   2410
.................... 			 { 
.................... 				 setleft(900); 
23D2:  MOVLW  03
23D4:  MOVWF  36
23D6:  MOVLW  84
23D8:  MOVWF  35
23DA:  CALL   1BA0
.................... 				 setright(950); 
23DE:  MOVLW  03
23E0:  MOVWF  36
23E2:  MOVLW  B6
23E4:  MOVWF  35
23E6:  CALL   1BC8
.................... 				 rightbackwardleftforward(); 
23EA:  CALL   17FA
.................... 				 delay_ms(400); 
23EE:  MOVLW  02
23F0:  MOVWF  29
23F2:  CLRF   16
23F4:  BTFSC  FF2.7
23F6:  BSF    16.7
23F8:  BCF    FF2.7
23FA:  MOVLW  C8
23FC:  MOVWF  50
23FE:  CALL   1142
2402:  BTFSC  16.7
2404:  BSF    FF2.7
2406:  DECFSZ 29,F
2408:  BRA    23F2
.................... 				 decisioncounter++; 
240A:  INCF   23,F
.................... 				 decisionincooldown = 5; 
240C:  MOVLW  05
240E:  MOVWF  24
.................... 			 } 
.................... 		 } 
2410:  BRA    29E4
.................... 		 else if (decisioncounter == 12) 
2412:  MOVF   23,W
2414:  SUBLW  0C
2416:  BNZ   242A
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
2418:  RCALL  1ECE
241A:  MOVF   01,F
241C:  BZ    2428
241E:  MOVF   24,F
2420:  BNZ   2428
.................... 			 { 
.................... 				 decisioncounter++; 
2422:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2424:  MOVLW  05
2426:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
2428:  BRA    29E4
.................... 		 else if (decisioncounter == 13) 
242A:  MOVF   23,W
242C:  SUBLW  0D
242E:  BNZ   247E
.................... 		 { 
.................... 			 align(); 
2430:  CALL   1C04
.................... 			 if (isLeft() && !decisionincooldown) 
2434:  RCALL  200E
2436:  MOVF   01,F
2438:  BZ    247C
243A:  MOVF   24,F
243C:  BNZ   247C
.................... 			 { 
.................... 				 setleft(950); 
243E:  MOVLW  03
2440:  MOVWF  36
2442:  MOVLW  B6
2444:  MOVWF  35
2446:  CALL   1BA0
.................... 				 setright(900); 
244A:  MOVLW  03
244C:  MOVWF  36
244E:  MOVLW  84
2450:  MOVWF  35
2452:  CALL   1BC8
.................... 				 leftbackwardrightforward(); 
2456:  CALL   17E8
.................... 				 delay_ms(400); 
245A:  MOVLW  02
245C:  MOVWF  29
245E:  CLRF   16
2460:  BTFSC  FF2.7
2462:  BSF    16.7
2464:  BCF    FF2.7
2466:  MOVLW  C8
2468:  MOVWF  50
246A:  CALL   1142
246E:  BTFSC  16.7
2470:  BSF    FF2.7
2472:  DECFSZ 29,F
2474:  BRA    245E
.................... 				 decisioncounter++; 
2476:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2478:  MOVLW  05
247A:  MOVWF  24
.................... 			 } 
.................... 		 } 
247C:  BRA    29E4
.................... 		 else if (decisioncounter == 14) 
247E:  MOVF   23,W
2480:  SUBLW  0E
2482:  BNZ   2496
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
2484:  RCALL  1ECE
2486:  MOVF   01,F
2488:  BZ    2494
248A:  MOVF   24,F
248C:  BNZ   2494
.................... 			 { 
.................... 				 decisioncounter++; 
248E:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2490:  MOVLW  05
2492:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
2494:  BRA    29E4
.................... 		 else if (decisioncounter == 15) 
2496:  MOVF   23,W
2498:  SUBLW  0F
249A:  BNZ   24EA
.................... 		 { 
.................... 			 align(); 
249C:  CALL   1C04
.................... 			 if (isLeft() && !decisionincooldown) 
24A0:  RCALL  200E
24A2:  MOVF   01,F
24A4:  BZ    24E8
24A6:  MOVF   24,F
24A8:  BNZ   24E8
.................... 			 { 
.................... 				 setleft(950); 
24AA:  MOVLW  03
24AC:  MOVWF  36
24AE:  MOVLW  B6
24B0:  MOVWF  35
24B2:  CALL   1BA0
.................... 				 setright(900); 
24B6:  MOVLW  03
24B8:  MOVWF  36
24BA:  MOVLW  84
24BC:  MOVWF  35
24BE:  CALL   1BC8
.................... 				 leftbackwardrightforward(); 
24C2:  CALL   17E8
.................... 				 delay_ms(400); 
24C6:  MOVLW  02
24C8:  MOVWF  29
24CA:  CLRF   16
24CC:  BTFSC  FF2.7
24CE:  BSF    16.7
24D0:  BCF    FF2.7
24D2:  MOVLW  C8
24D4:  MOVWF  50
24D6:  CALL   1142
24DA:  BTFSC  16.7
24DC:  BSF    FF2.7
24DE:  DECFSZ 29,F
24E0:  BRA    24CA
.................... 				 decisioncounter++; 
24E2:  INCF   23,F
.................... 				 decisionincooldown = 5; 
24E4:  MOVLW  05
24E6:  MOVWF  24
.................... 			 } 
.................... 		 } 
24E8:  BRA    29E4
.................... 		 else if (decisioncounter == 16) 
24EA:  MOVF   23,W
24EC:  SUBLW  10
24EE:  BNZ   2502
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
24F0:  RCALL  1ECE
24F2:  MOVF   01,F
24F4:  BZ    2500
24F6:  MOVF   24,F
24F8:  BNZ   2500
.................... 			 { 
.................... 				 decisioncounter++; 
24FA:  INCF   23,F
.................... 				 decisionincooldown = 5; 
24FC:  MOVLW  05
24FE:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
2500:  BRA    29E4
.................... 		 ///Volta pra pista 
.................... 		 else if (decisioncounter == 17) 
2502:  MOVF   23,W
2504:  SUBLW  11
2506:  BNZ   2556
.................... 		 { 
.................... 			 align(); 
2508:  CALL   1C04
.................... 			 if (isRight() && !decisionincooldown) 
250C:  RCALL  1E82
250E:  MOVF   01,F
2510:  BZ    2554
2512:  MOVF   24,F
2514:  BNZ   2554
.................... 			 { 
.................... 				 setleft(900); 
2516:  MOVLW  03
2518:  MOVWF  36
251A:  MOVLW  84
251C:  MOVWF  35
251E:  CALL   1BA0
.................... 				 setright(950); 
2522:  MOVLW  03
2524:  MOVWF  36
2526:  MOVLW  B6
2528:  MOVWF  35
252A:  CALL   1BC8
.................... 				 rightbackwardleftforward(); 
252E:  CALL   17FA
.................... 				 delay_ms(400); 
2532:  MOVLW  02
2534:  MOVWF  29
2536:  CLRF   16
2538:  BTFSC  FF2.7
253A:  BSF    16.7
253C:  BCF    FF2.7
253E:  MOVLW  C8
2540:  MOVWF  50
2542:  CALL   1142
2546:  BTFSC  16.7
2548:  BSF    FF2.7
254A:  DECFSZ 29,F
254C:  BRA    2536
.................... 				 decisioncounter++; 
254E:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2550:  MOVLW  05
2552:  MOVWF  24
.................... 			 } 
.................... 		 } 
2554:  BRA    29E4
.................... 		 else if (decisioncounter == 18) 
2556:  MOVF   23,W
2558:  SUBLW  12
255A:  BNZ   256E
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
255C:  RCALL  1ECE
255E:  MOVF   01,F
2560:  BZ    256C
2562:  MOVF   24,F
2564:  BNZ   256C
.................... 			 { 
.................... 				 decisioncounter++; 
2566:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2568:  MOVLW  05
256A:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
256C:  BRA    29E4
.................... 		 ///Alinha no zigzag 
.................... 		 ///Dobra pra fazer desafio sem linha 
.................... 		 else if (decisioncounter == 19) 
256E:  MOVF   23,W
2570:  SUBLW  13
2572:  BNZ   25C2
.................... 		 { 
.................... 			 align(); 
2574:  CALL   1C04
.................... 			 if (isLeft() && !decisionincooldown) 
2578:  RCALL  200E
257A:  MOVF   01,F
257C:  BZ    25C0
257E:  MOVF   24,F
2580:  BNZ   25C0
.................... 			 { 
.................... 				 setleft(950); 
2582:  MOVLW  03
2584:  MOVWF  36
2586:  MOVLW  B6
2588:  MOVWF  35
258A:  CALL   1BA0
.................... 				 setright(900); 
258E:  MOVLW  03
2590:  MOVWF  36
2592:  MOVLW  84
2594:  MOVWF  35
2596:  CALL   1BC8
.................... 				 leftbackwardrightforward(); 
259A:  CALL   17E8
.................... 				 delay_ms(400); 
259E:  MOVLW  02
25A0:  MOVWF  29
25A2:  CLRF   16
25A4:  BTFSC  FF2.7
25A6:  BSF    16.7
25A8:  BCF    FF2.7
25AA:  MOVLW  C8
25AC:  MOVWF  50
25AE:  CALL   1142
25B2:  BTFSC  16.7
25B4:  BSF    FF2.7
25B6:  DECFSZ 29,F
25B8:  BRA    25A2
.................... 				 decisioncounter++; 
25BA:  INCF   23,F
.................... 				 decisionincooldown = 5; 
25BC:  MOVLW  05
25BE:  MOVWF  24
.................... 			 } 
.................... 		 } 
25C0:  BRA    29E4
.................... 		 else if (decisioncounter == 20) 
25C2:  MOVF   23,W
25C4:  SUBLW  14
25C6:  BNZ   25DA
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
25C8:  RCALL  1ECE
25CA:  MOVF   01,F
25CC:  BZ    25D8
25CE:  MOVF   24,F
25D0:  BNZ   25D8
.................... 			 { 
.................... 				 decisioncounter++; 
25D2:  INCF   23,F
.................... 				 decisionincooldown = 5; 
25D4:  MOVLW  05
25D6:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
25D8:  BRA    29E4
.................... 		 ///Começa desafio sem linha 
.................... 		 else if (decisionCounter == 21) 
25DA:  MOVF   23,W
25DC:  SUBLW  15
25DE:  BNZ   25F6
.................... 		 { 
.................... 			 ///Desafio de andar cego 
.................... 			 ///!!!!!!!!!!   AQUI ELE TERIA QUE ESTAR MUITO BEM ALINHADO, SERIA BOM TER A FUNÇÃO DE ALINHAR E COLOCAR PARA ALINHAR BEM AQUI 
.................... 			 Align(); 
25E0:  CALL   1C04
.................... 			 if (IsAllOutside() && !decisionInCoolDown) 
25E4:  BRA    205A
25E6:  MOVF   01,F
25E8:  BZ    25F4
25EA:  MOVF   24,F
25EC:  BNZ   25F4
.................... 			 { 
.................... 				 decisionCounter++; 
25EE:  INCF   23,F
.................... 				 decisionInCoolDown = 3; 
25F0:  MOVLW  03
25F2:  MOVWF  24
.................... 			 } 
.................... 		 } 
25F4:  BRA    29E4
.................... 		 ///Termina desafio sem linha 
.................... 		 else if (decisionCounter == 22) 
25F6:  MOVF   23,W
25F8:  SUBLW  16
25FA:  BNZ   261E
.................... 		 { 
.................... 			 ///ESTA NO DESAFIO DE ANDAR SEM LINHA 
.................... 			 SetBothPwm(890); 
25FC:  MOVLW  03
25FE:  MOVWF  36
2600:  MOVLW  7A
2602:  MOVWF  35
2604:  CALL   179A
.................... 			 if (IsCenterInside() && !decisionInCoolDown) 
2608:  BRA    20A2
260A:  MOVF   01,F
260C:  BZ    261C
260E:  MOVF   24,F
2610:  BNZ   261C
.................... 			 { 
.................... 				 Align(); 
2612:  CALL   1C04
.................... 				 decisionCounter++; 
2616:  INCF   23,F
.................... 				 decisionInCoolDown = 1; 
2618:  MOVLW  01
261A:  MOVWF  24
.................... 			 } 
.................... 		 } 
261C:  BRA    29E4
.................... 		 ///Curva Direita 
.................... 		 else if (decisioncounter == 23) 
261E:  MOVF   23,W
2620:  SUBLW  17
2622:  BNZ   2672
.................... 		 { 
.................... 			 align(); 
2624:  CALL   1C04
.................... 			 if (isRight() && !decisionincooldown) 
2628:  RCALL  1E82
262A:  MOVF   01,F
262C:  BZ    2670
262E:  MOVF   24,F
2630:  BNZ   2670
.................... 			 { 
.................... 				 setleft(900); 
2632:  MOVLW  03
2634:  MOVWF  36
2636:  MOVLW  84
2638:  MOVWF  35
263A:  CALL   1BA0
.................... 				 setright(950); 
263E:  MOVLW  03
2640:  MOVWF  36
2642:  MOVLW  B6
2644:  MOVWF  35
2646:  CALL   1BC8
.................... 				 rightbackwardleftforward(); 
264A:  CALL   17FA
.................... 				 delay_ms(400); 
264E:  MOVLW  02
2650:  MOVWF  29
2652:  CLRF   16
2654:  BTFSC  FF2.7
2656:  BSF    16.7
2658:  BCF    FF2.7
265A:  MOVLW  C8
265C:  MOVWF  50
265E:  CALL   1142
2662:  BTFSC  16.7
2664:  BSF    FF2.7
2666:  DECFSZ 29,F
2668:  BRA    2652
.................... 				 decisioncounter++; 
266A:  INCF   23,F
.................... 				 decisionincooldown = 5; 
266C:  MOVLW  05
266E:  MOVWF  24
.................... 			 } 
.................... 		 } 
2670:  BRA    29E4
.................... 		 else if (decisioncounter == 24) 
2672:  MOVF   23,W
2674:  SUBLW  18
2676:  BNZ   268A
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
2678:  RCALL  1ECE
267A:  MOVF   01,F
267C:  BZ    2688
267E:  MOVF   24,F
2680:  BNZ   2688
.................... 			 { 
.................... 				 decisioncounter++; 
2682:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2684:  MOVLW  05
2686:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
2688:  BRA    29E4
.................... 		 else if (decisioncounter == 25) 
268A:  MOVF   23,W
268C:  SUBLW  19
268E:  BNZ   26A8
.................... 		 { 
.................... 			 align(); 
2690:  CALL   1C04
.................... 			 if (isRight() && !decisionincooldown) 
2694:  CALL   1E82
2698:  MOVF   01,F
269A:  BZ    26A6
269C:  MOVF   24,F
269E:  BNZ   26A6
.................... 			 { 
.................... 				 decisioncounter++; 
26A0:  INCF   23,F
.................... 				 decisionincooldown = 2; 
26A2:  MOVLW  02
26A4:  MOVWF  24
.................... 			 } 
.................... 		 } 
26A6:  BRA    29E4
.................... 		 ///Começa desvio da lombada 
.................... 		 else if (decisioncounter == 26) 
26A8:  MOVF   23,W
26AA:  SUBLW  1A
26AC:  BNZ   26FE
.................... 		 { 
.................... 			 ///se alinha ate achar a curva a direita 
.................... 			 align(); 
26AE:  CALL   1C04
.................... 			 if (isright() && !decisionincooldown) 
26B2:  CALL   1E82
26B6:  MOVF   01,F
26B8:  BZ    26FC
26BA:  MOVF   24,F
26BC:  BNZ   26FC
.................... 			 { 
.................... 				 ///começa a fazer a curva a direita girando um pouco para a direita e dando uma ré 
.................... 				 setleft(900); 
26BE:  MOVLW  03
26C0:  MOVWF  36
26C2:  MOVLW  84
26C4:  MOVWF  35
26C6:  CALL   1BA0
.................... 				 setright(950); 
26CA:  MOVLW  03
26CC:  MOVWF  36
26CE:  MOVLW  B6
26D0:  MOVWF  35
26D2:  CALL   1BC8
.................... 				 rightbackwardleftforward(); 
26D6:  CALL   17FA
.................... 				 delay_ms(400); 
26DA:  MOVLW  02
26DC:  MOVWF  29
26DE:  CLRF   16
26E0:  BTFSC  FF2.7
26E2:  BSF    16.7
26E4:  BCF    FF2.7
26E6:  MOVLW  C8
26E8:  MOVWF  50
26EA:  CALL   1142
26EE:  BTFSC  16.7
26F0:  BSF    FF2.7
26F2:  DECFSZ 29,F
26F4:  BRA    26DE
.................... 				 decisioncounter++; 
26F6:  INCF   23,F
.................... 				 decisionincooldown = 5; 
26F8:  MOVLW  05
26FA:  MOVWF  24
.................... 			 } 
.................... 		 } 
26FC:  BRA    29E4
.................... 		 else if (decisioncounter == 27) 
26FE:  MOVF   23,W
2700:  SUBLW  1B
2702:  BNZ   2718
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
2704:  CALL   1ECE
2708:  MOVF   01,F
270A:  BZ    2716
270C:  MOVF   24,F
270E:  BNZ   2716
.................... 			 { 
.................... 				 decisioncounter++; 
2710:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2712:  MOVLW  05
2714:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
2716:  BRA    29E4
.................... 		 else if (decisioncounter == 28) 
2718:  MOVF   23,W
271A:  SUBLW  1C
271C:  BNZ   276C
.................... 		 { 
.................... 			 align(); 
271E:  CALL   1C04
.................... 			 if (isLeft() && !decisionincooldown) 
2722:  RCALL  200E
2724:  MOVF   01,F
2726:  BZ    276A
2728:  MOVF   24,F
272A:  BNZ   276A
.................... 			 { 
.................... 				 setleft(950); 
272C:  MOVLW  03
272E:  MOVWF  36
2730:  MOVLW  B6
2732:  MOVWF  35
2734:  CALL   1BA0
.................... 				 setright(900); 
2738:  MOVLW  03
273A:  MOVWF  36
273C:  MOVLW  84
273E:  MOVWF  35
2740:  CALL   1BC8
.................... 				 leftbackwardrightforward(); 
2744:  CALL   17E8
.................... 				 delay_ms(400); 
2748:  MOVLW  02
274A:  MOVWF  29
274C:  CLRF   16
274E:  BTFSC  FF2.7
2750:  BSF    16.7
2752:  BCF    FF2.7
2754:  MOVLW  C8
2756:  MOVWF  50
2758:  CALL   1142
275C:  BTFSC  16.7
275E:  BSF    FF2.7
2760:  DECFSZ 29,F
2762:  BRA    274C
.................... 				 decisioncounter++; 
2764:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2766:  MOVLW  05
2768:  MOVWF  24
.................... 			 } 
.................... 		 } 
276A:  BRA    29E4
.................... 		 else if (decisioncounter == 29) 
276C:  MOVF   23,W
276E:  SUBLW  1D
2770:  BNZ   2786
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
2772:  CALL   1ECE
2776:  MOVF   01,F
2778:  BZ    2784
277A:  MOVF   24,F
277C:  BNZ   2784
.................... 			 { 
.................... 				 decisioncounter++; 
277E:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2780:  MOVLW  05
2782:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
2784:  BRA    29E4
.................... 		 else if (decisioncounter == 30) 
2786:  MOVF   23,W
2788:  SUBLW  1E
278A:  BNZ   27DA
.................... 		 { 
.................... 			 align(); 
278C:  CALL   1C04
.................... 			 if (isLeft() && !decisionincooldown) 
2790:  RCALL  200E
2792:  MOVF   01,F
2794:  BZ    27D8
2796:  MOVF   24,F
2798:  BNZ   27D8
.................... 			 { 
.................... 				 setleft(950); 
279A:  MOVLW  03
279C:  MOVWF  36
279E:  MOVLW  B6
27A0:  MOVWF  35
27A2:  CALL   1BA0
.................... 				 setright(900); 
27A6:  MOVLW  03
27A8:  MOVWF  36
27AA:  MOVLW  84
27AC:  MOVWF  35
27AE:  CALL   1BC8
.................... 				 leftbackwardrightforward(); 
27B2:  CALL   17E8
.................... 				 delay_ms(400); 
27B6:  MOVLW  02
27B8:  MOVWF  29
27BA:  CLRF   16
27BC:  BTFSC  FF2.7
27BE:  BSF    16.7
27C0:  BCF    FF2.7
27C2:  MOVLW  C8
27C4:  MOVWF  50
27C6:  CALL   1142
27CA:  BTFSC  16.7
27CC:  BSF    FF2.7
27CE:  DECFSZ 29,F
27D0:  BRA    27BA
.................... 				 decisioncounter++; 
27D2:  INCF   23,F
.................... 				 decisionincooldown = 5; 
27D4:  MOVLW  05
27D6:  MOVWF  24
.................... 			 } 
.................... 		 } 
27D8:  BRA    29E4
.................... 		 else if (decisioncounter == 31) 
27DA:  MOVF   23,W
27DC:  SUBLW  1F
27DE:  BNZ   27F4
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
27E0:  CALL   1ECE
27E4:  MOVF   01,F
27E6:  BZ    27F2
27E8:  MOVF   24,F
27EA:  BNZ   27F2
.................... 			 { 
.................... 				 decisioncounter++; 
27EC:  INCF   23,F
.................... 				 decisionincooldown = 5; 
27EE:  MOVLW  05
27F0:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
27F2:  BRA    29E4
.................... 		 ///Volta pra pista 
.................... 		 else if (decisioncounter == 32) 
27F4:  MOVF   23,W
27F6:  SUBLW  20
27F8:  BNZ   284A
.................... 		 { 
.................... 			 align(); 
27FA:  CALL   1C04
.................... 			 if (isRight() && !decisionincooldown) 
27FE:  CALL   1E82
2802:  MOVF   01,F
2804:  BZ    2848
2806:  MOVF   24,F
2808:  BNZ   2848
.................... 			 { 
.................... 				 setleft(900); 
280A:  MOVLW  03
280C:  MOVWF  36
280E:  MOVLW  84
2810:  MOVWF  35
2812:  CALL   1BA0
.................... 				 setright(950); 
2816:  MOVLW  03
2818:  MOVWF  36
281A:  MOVLW  B6
281C:  MOVWF  35
281E:  CALL   1BC8
.................... 				 rightbackwardleftforward(); 
2822:  CALL   17FA
.................... 				 delay_ms(400); 
2826:  MOVLW  02
2828:  MOVWF  29
282A:  CLRF   16
282C:  BTFSC  FF2.7
282E:  BSF    16.7
2830:  BCF    FF2.7
2832:  MOVLW  C8
2834:  MOVWF  50
2836:  CALL   1142
283A:  BTFSC  16.7
283C:  BSF    FF2.7
283E:  DECFSZ 29,F
2840:  BRA    282A
.................... 				 decisioncounter++; 
2842:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2844:  MOVLW  05
2846:  MOVWF  24
.................... 			 } 
.................... 		 } 
2848:  BRA    29E4
.................... 		 else if (decisioncounter == 33) 
284A:  MOVF   23,W
284C:  SUBLW  21
284E:  BNZ   2864
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
2850:  CALL   1ECE
2854:  MOVF   01,F
2856:  BZ    2862
2858:  MOVF   24,F
285A:  BNZ   2862
.................... 			 { 
.................... 				 decisioncounter++; 
285C:  INCF   23,F
.................... 				 decisionincooldown = 5; 
285E:  MOVLW  05
2860:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
2862:  BRA    29E4
.................... 		 ///Curva direita final 
.................... 		 else if (decisioncounter == 34) 
2864:  MOVF   23,W
2866:  SUBLW  22
2868:  BNZ   28BA
.................... 		 { 
.................... 			 align(); 
286A:  CALL   1C04
.................... 			 if (isRight() && !decisionincooldown) 
286E:  CALL   1E82
2872:  MOVF   01,F
2874:  BZ    28B8
2876:  MOVF   24,F
2878:  BNZ   28B8
.................... 			 { 
.................... 				 setleft(900); 
287A:  MOVLW  03
287C:  MOVWF  36
287E:  MOVLW  84
2880:  MOVWF  35
2882:  CALL   1BA0
.................... 				 setright(950); 
2886:  MOVLW  03
2888:  MOVWF  36
288A:  MOVLW  B6
288C:  MOVWF  35
288E:  CALL   1BC8
.................... 				 rightbackwardleftforward(); 
2892:  CALL   17FA
.................... 				 delay_ms(400); 
2896:  MOVLW  02
2898:  MOVWF  29
289A:  CLRF   16
289C:  BTFSC  FF2.7
289E:  BSF    16.7
28A0:  BCF    FF2.7
28A2:  MOVLW  C8
28A4:  MOVWF  50
28A6:  CALL   1142
28AA:  BTFSC  16.7
28AC:  BSF    FF2.7
28AE:  DECFSZ 29,F
28B0:  BRA    289A
.................... 				 decisioncounter++; 
28B2:  INCF   23,F
.................... 				 decisionincooldown = 5; 
28B4:  MOVLW  05
28B6:  MOVWF  24
.................... 			 } 
.................... 		 } 
28B8:  BRA    29E4
.................... 		 else if (decisioncounter == 35) 
28BA:  MOVF   23,W
28BC:  SUBLW  23
28BE:  BNZ   28D4
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
28C0:  CALL   1ECE
28C4:  MOVF   01,F
28C6:  BZ    28D2
28C8:  MOVF   24,F
28CA:  BNZ   28D2
.................... 			 { 
.................... 				 decisioncounter++; 
28CC:  INCF   23,F
.................... 				 decisionincooldown = 5; 
28CE:  MOVLW  05
28D0:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
28D2:  BRA    29E4
.................... 		 else if (decisioncounter == 36) 
28D4:  MOVF   23,W
28D6:  SUBLW  24
28D8:  BNZ   28F2
.................... 		 { 
.................... 			 align(); 
28DA:  CALL   1C04
.................... 			 if (isRight() && !decisioninCoolDown) 
28DE:  CALL   1E82
28E2:  MOVF   01,F
28E4:  BZ    28F0
28E6:  MOVF   24,F
28E8:  BNZ   28F0
.................... 			 { 
.................... 				 decisioncounter++; 
28EA:  INCF   23,F
.................... 				 decisionincooldown = 5; 
28EC:  MOVLW  05
28EE:  MOVWF  24
.................... 			 } 
.................... 		 } 
28F0:  BRA    29E4
.................... 		 ///Primeira linha do desafio de parada 
.................... 		 else if (decisioncounter == 37) 
28F2:  MOVF   23,W
28F4:  SUBLW  25
28F6:  BNZ   2910
.................... 		 { 
.................... 			 ///primeira linha de parada 
.................... 			 align(); 
28F8:  CALL   1C04
.................... 			 if (isallalign() && !decisionincooldown) 
28FC:  CALL   1546
2900:  MOVF   01,F
2902:  BZ    290E
2904:  MOVF   24,F
2906:  BNZ   290E
.................... 			 { 
.................... 				 decisioncounter++; 
2908:  INCF   23,F
.................... 				 decisionincooldown = 10; 
290A:  MOVLW  0A
290C:  MOVWF  24
.................... 			 } 
.................... 		 } 
290E:  BRA    29E4
.................... 		 else if (decisioncounter == 38) 
2910:  MOVF   23,W
2912:  SUBLW  26
2914:  BNZ   2952
.................... 		 { 
.................... 			 ///logo após passar a primeira linha de parada, anda alinhado até o decisionincooldown e para 
.................... 			 align(); 
2916:  CALL   1C04
.................... 			 if (!decisionincooldown) 
291A:  MOVF   24,F
291C:  BNZ   2950
.................... 			 { 
.................... 				 setbothpwm(0); 
291E:  CLRF   36
2920:  CLRF   35
2922:  CALL   179A
.................... 				 delay_ms(2000); 
2926:  MOVLW  08
2928:  MOVWF  29
292A:  CLRF   16
292C:  BTFSC  FF2.7
292E:  BSF    16.7
2930:  BCF    FF2.7
2932:  MOVLW  FA
2934:  MOVWF  50
2936:  CALL   1142
293A:  BTFSC  16.7
293C:  BSF    FF2.7
293E:  DECFSZ 29,F
2940:  BRA    292A
.................... 				 setbothpwm(920); 
2942:  MOVLW  03
2944:  MOVWF  36
2946:  MOVLW  98
2948:  MOVWF  35
294A:  CALL   179A
.................... 				 decisioncounter++; 
294E:  INCF   23,F
.................... 			 } 
.................... 		 } 
2950:  BRA    29E4
.................... 		 ///Segunda linha do desafio de parada 
.................... 		 else if (decisioncounter == 39) 
2952:  MOVF   23,W
2954:  SUBLW  27
2956:  BNZ   2970
.................... 		 { 
.................... 			 ///logo após sair da parada, anda alinhado até achar a proxima linha completa 
.................... 			 align(); 
2958:  CALL   1C04
.................... 			 if (isallalign() && !decisionincooldown) 
295C:  CALL   1546
2960:  MOVF   01,F
2962:  BZ    296E
2964:  MOVF   24,F
2966:  BNZ   296E
.................... 			 { 
.................... 				 decisioncounter++; 
2968:  INCF   23,F
.................... 				 decisionincooldown = 5; 
296A:  MOVLW  05
296C:  MOVWF  24
.................... 			 } 
.................... 		 } 
296E:  BRA    29E4
.................... 		 else if (decisioncounter == 40) { 
2970:  MOVF   23,W
2972:  SUBLW  28
2974:  BNZ   298E
.................... 			 align(); 
2976:  CALL   1C04
.................... 			 if (isRight() && !decisioninCoolDown) 
297A:  CALL   1E82
297E:  MOVF   01,F
2980:  BZ    298C
2982:  MOVF   24,F
2984:  BNZ   298C
.................... 			 { 
.................... 				 decisioncounter++; 
2986:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2988:  MOVLW  05
298A:  MOVWF  24
.................... 			 } 
.................... 		 } 
298C:  BRA    29E4
.................... 		 ///Teste da linha final 
.................... 		 else if (decisionCounter == 41) 
298E:  MOVF   23,W
2990:  SUBLW  29
2992:  BNZ   29AA
.................... 		 { 
.................... 			 Align(); 
2994:  CALL   1C04
.................... 			 if (IsAllAlign() && !decisionInCoolDown) 
2998:  CALL   1546
299C:  MOVF   01,F
299E:  BZ    29A8
29A0:  MOVF   24,F
29A2:  BNZ   29A8
.................... 			 { 
.................... 				 decisionCounter++; 
29A4:  INCF   23,F
.................... 				 decisionInCoolDown = 0; 
29A6:  CLRF   24
.................... 			 } 
.................... 		 } 
29A8:  BRA    29E4
.................... 		 ///Encerra 
.................... 		 else if (decisionCounter == 42) 
29AA:  MOVF   23,W
29AC:  SUBLW  2A
29AE:  BNZ   29DC
.................... 		 { 
.................... 			 ///TODO: desvia do desafio de remover o bloco 
.................... 			 SetBothPwm(0); 
29B0:  CLRF   36
29B2:  CLRF   35
29B4:  CALL   179A
29B8:  CLRF   16
29BA:  BTFSC  FF2.7
29BC:  BSF    16.7
29BE:  BCF    FF2.7
.................... 			 lcd_pos_xy(1, 1); 
29C0:  MOVLW  01
29C2:  MOVWF  50
29C4:  MOVWF  51
29C6:  CALL   116A
29CA:  BTFSC  16.7
29CC:  BSF    FF2.7
.................... 			 printf(lcd_escreve, "Fim do programado"); 
29CE:  MOVLW  C4
29D0:  MOVWF  FF6
29D2:  MOVLW  13
29D4:  MOVWF  FF7
29D6:  CALL   151A
.................... 		 } 
29DA:  BRA    29E4
....................          /*else if (decisioncounter == 2 && running) 
....................          { 
....................              if (iscenteralign() && !decisionincooldown) 
....................              { 
....................                  decisioncounter++; 
....................                  decisionincooldown = 5; 
....................              } 
....................              else 
....................              { 
....................                  ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
....................              } 
....................          } 
....................          else if (decisioncounter == 3) 
....................          { 
....................              ///anda alinhado até achar a linha preta 
....................              align(); 
....................              if (isallalign() && !decisionincooldown) 
....................              { 
....................                  setleft(900); 
....................                  setright(950); 
....................                  rightbackwardleftforward(); 
....................                  delay_ms(500); 
....................                  decisioncounter++; 
....................                  decisionincooldown = 25; 
....................              } 
....................          } 
....................          else if (decisioncounter == 4) 
....................          { 
....................              ///primeira linha de parada 
....................              align(); 
....................              if (isallalign() && !decisionincooldown) 
....................              { 
....................                  decisioncounter++; 
....................                  decisionincooldown = 11; 
....................              } 
....................          } 
....................          else if (decisioncounter == 5) 
....................          { 
....................              ///logo após passar a primeira linha de parada, anda alinhado até o decisionincooldown e para 
....................              align(); 
....................              if (!decisionincooldown) 
....................              { 
....................                  setbothpwm(0); 
....................                  delay_ms(2000); 
....................                  setbothpwm(920); 
....................                  decisioncounter++; 
....................              } 
....................          } 
....................          else if (decisioncounter == 6) 
....................          { 
....................              ///logo após sair da parada, anda alinhado até achar a proxima linha completa 
....................              align(); 
....................              if (isallalign() && !decisionincooldown) 
....................              { 
....................                  decisioncounter++; 
....................                  decisionincooldown = 5; 
....................              } 
....................          } 
....................  
....................         //Era 7 
....................         else if (decisionCounter == 7) 
....................         { 
....................             ///Passou pela linha completa do desafio de parar anda alinhado até a linha da esquerda do desafio de andar invertido 
....................             Align(); 
....................             if (IsLeft() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 0; 
....................             } 
....................         } 
....................         else if (decisionCounter == 8) 
....................         { 
....................             ///Anda alinhado até chegar no desafio da linha invertida, a linha invertida começa quando o centro esta fora e as extremidades dentro 
....................  
....................             Align(); 
....................             if (IsMarginsInside() && !decisionInCoolDown) 
....................             { 
....................                 ///Iniciou o desafio de linha invertido 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 1; 
....................             } 
....................         } 
....................         else if (decisionCounter == 9) 
....................         { 
....................             ///Desafio da linha invertida 
....................             InvertedAlign(); 
....................             ///Anda ate não ter linha nas extremidades 
....................             if (IsMarginsOutside() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 2; 
....................             } 
....................         } 
....................         else if (decisionCounter == 10) 
....................         { 
....................             Align(); 
....................             if (IsLeft() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 5; 
....................             } 
....................         } 
....................         else if (decisionCounter == 11) 
....................         { 
....................             Align(); 
....................             if (IsLeft() && !decisionInCoolDown) 
....................             { 
....................                 SetLeft(950); 
....................                 SetRight(900); 
....................                 LeftBackwardRightForward(); 
....................                 delay_ms(500); 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 8; 
....................             } 
....................         } 
....................         else if (decisionCounter == 12) 
....................         { 
....................  
....................             Align(); 
....................             if (IsLeft() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 5; 
....................             } 
....................         } 
....................         else if (decisionCounter == 13) 
....................         { 
....................             ///Desafio de andar cego 
....................             ///!!!!!!!!!!   AQUI ELE TERIA QUE ESTAR MUITO BEM ALINHADO, SERIA BOM TER A FUNÇÃO DE ALINHAR E COLOCAR PARA ALINHAR BEM AQUI 
....................             Align(); 
....................             if (IsAllOutside() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 3; 
....................             } 
....................         } 
....................         else if (decisionCounter == 14) 
....................         { 
....................             ///ESTA NO DESAFIO DE ANDAR SEM LINHA 
....................             SetBothPwm(890); 
....................             if (IsCenterInside() && !decisionInCoolDown) 
....................             { 
....................                 Align(); 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 1; 
....................             } 
....................         } 
....................         else if (decisionCounter == 15) 
....................         { 
....................             ///Passou pelo desafio de andar sem linha 
....................             Align(); 
....................             if (IsLeft() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 1; 
....................             } 
....................         } 
....................         else if (decisionCounter == 16) 
....................         { 
....................             Align(); 
....................             if (IsRight() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 2; 
....................             } 
....................         } 
....................         else if (decisionCounter == 17) 
....................         { 
....................             Align(); 
....................             if (IsRight() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 2; 
....................             } 
....................         } 
....................         else if (decisionCounter == 18) 
....................         { 
....................             Align(); 
....................             if (IsLeft() && !decisionInCoolDown) 
....................             { 
....................                 SetLeft(950); 
....................                 SetRight(900); 
....................                 LeftBackwardRightForward(); 
....................                 delay_ms(500); 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 7; 
....................             } 
....................         } 
....................         else if (decisionCounter == 19) 
....................         { 
....................             Align(); 
....................             if (IsAllAlign() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 0; 
....................             } 
....................         } 
....................  
....................         else if (decisionCounter == 20) 
....................         { 
....................             ///TODO: desvia do desafio de remover o bloco 
....................             SetBothPwm(0); 
....................             lcd_pos_xy(1, 1); 
....................             printf(lcd_escreve, "Fim do programado"); 
....................         }*/ 
....................  
....................         else 
....................         { 
....................             ///Se ja passou por todas as decisões 
....................             SetBothPwm(0); 
29DC:  CLRF   36
29DE:  CLRF   35
29E0:  CALL   179A
....................         } 
....................  
....................         if (running == 0) 
29E4:  MOVF   17,F
29E6:  BNZ   29F8
....................         { 
....................             SetBothPwm(0); 
29E8:  CLRF   36
29EA:  CLRF   35
29EC:  CALL   179A
....................             SetBothPwm(0); 
29F0:  CLRF   36
29F2:  CLRF   35
29F4:  CALL   179A
....................         } 
....................     } while (1); 
29F8:  GOTO   2150
.................... } 
.................... int8 IsCenterAlign() 
*
1ECE:  MOVFF  1B,3A
1ED2:  MOVFF  1A,39
1ED6:  CALL   1594
1EDA:  MOVFF  03,34
1EDE:  MOVFF  02,33
1EE2:  MOVFF  01,32
1EE6:  MOVFF  00,31
1EEA:  MOVF   1A,W
1EEC:  ADDWF  18,W
1EEE:  MOVWF  01
1EF0:  MOVF   1B,W
1EF2:  ADDWFC 19,W
1EF4:  MOVWF  03
1EF6:  MOVFF  01,39
1EFA:  MOVWF  3A
1EFC:  CALL   1594
1F00:  MOVFF  34,3C
1F04:  MOVFF  33,3B
1F08:  MOVFF  32,3A
1F0C:  MOVFF  31,39
1F10:  MOVFF  03,40
1F14:  MOVFF  02,3F
1F18:  MOVFF  01,3E
1F1C:  MOVFF  00,3D
1F20:  CALL   15CA
1F24:  MOVFF  03,2C
1F28:  MOVFF  02,2B
1F2C:  MOVFF  01,2A
1F30:  MOVFF  00,29
1F34:  MOVFF  1D,3A
1F38:  MOVFF  1C,39
1F3C:  CALL   1594
1F40:  MOVFF  03,34
1F44:  MOVFF  02,33
1F48:  MOVFF  01,32
1F4C:  MOVFF  00,31
1F50:  MOVF   1A,W
1F52:  ADDWF  18,W
1F54:  MOVWF  01
1F56:  MOVF   1B,W
1F58:  ADDWFC 19,W
1F5A:  MOVWF  03
1F5C:  MOVFF  01,39
1F60:  MOVWF  3A
1F62:  CALL   1594
1F66:  MOVFF  34,3C
1F6A:  MOVFF  33,3B
1F6E:  MOVFF  32,3A
1F72:  MOVFF  31,39
1F76:  MOVFF  03,40
1F7A:  MOVFF  02,3F
1F7E:  MOVFF  01,3E
1F82:  MOVFF  00,3D
1F86:  CALL   15CA
1F8A:  MOVFF  03,30
1F8E:  MOVFF  02,2F
1F92:  MOVFF  01,2E
1F96:  MOVFF  00,2D
*
29FC:  SLEEP 
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad1 + ad2); 
....................     float ad3Ratio = (float)ad3 / (float)(ad1 + ad2); 
....................     if (ad2 + ad3 > 300 && ad2Ratio < alignRatio && ad3Ratio < alignRatio) 
*
1F9A:  MOVF   1C,W
1F9C:  ADDWF  1A,W
1F9E:  MOVWF  31
1FA0:  MOVF   1D,W
1FA2:  ADDWFC 1B,W
1FA4:  MOVWF  32
1FA6:  SUBLW  00
1FA8:  BC    2008
1FAA:  XORLW  FF
1FAC:  BNZ   1FB4
1FAE:  MOVF   31,W
1FB0:  SUBLW  2C
1FB2:  BC    2008
1FB4:  MOVFF  2C,38
1FB8:  MOVFF  2B,37
1FBC:  MOVFF  2A,36
1FC0:  MOVFF  29,35
1FC4:  MOVFF  28,3C
1FC8:  MOVFF  27,3B
1FCC:  MOVFF  26,3A
1FD0:  MOVFF  25,39
1FD4:  CALL   1724
1FD8:  BNC   2008
1FDA:  MOVFF  30,38
1FDE:  MOVFF  2F,37
1FE2:  MOVFF  2E,36
1FE6:  MOVFF  2D,35
1FEA:  MOVFF  28,3C
1FEE:  MOVFF  27,3B
1FF2:  MOVFF  26,3A
1FF6:  MOVFF  25,39
1FFA:  CALL   1724
1FFE:  BNC   2008
....................     { 
....................         return 1; 
2000:  MOVLW  01
2002:  MOVWF  01
2004:  BRA    200C
....................     } 
2006:  BRA    200C
....................     else 
....................     { 
....................         return 0; 
2008:  MOVLW  00
200A:  MOVWF  01
....................     } 
200C:  RETURN 0
.................... } 
.................... int8 IsRight() 
.................... { 
....................     if (ad1 < 300 && ad2 >= 300 && ad3 >= 300 && ad4 >= 300) 
*
1E82:  MOVF   19,W
1E84:  SUBLW  01
1E86:  BNC   1EC8
1E88:  BNZ   1E90
1E8A:  MOVF   18,W
1E8C:  SUBLW  2B
1E8E:  BNC   1EC8
1E90:  MOVF   1B,W
1E92:  SUBLW  00
1E94:  BC    1EC8
1E96:  XORLW  FF
1E98:  BNZ   1EA0
1E9A:  MOVF   1A,W
1E9C:  SUBLW  2B
1E9E:  BC    1EC8
1EA0:  MOVF   1D,W
1EA2:  SUBLW  00
1EA4:  BC    1EC8
1EA6:  XORLW  FF
1EA8:  BNZ   1EB0
1EAA:  MOVF   1C,W
1EAC:  SUBLW  2B
1EAE:  BC    1EC8
1EB0:  MOVF   1F,W
1EB2:  SUBLW  00
1EB4:  BC    1EC8
1EB6:  XORLW  FF
1EB8:  BNZ   1EC0
1EBA:  MOVF   1E,W
1EBC:  SUBLW  2B
1EBE:  BC    1EC8
....................     { 
....................         return 1; 
1EC0:  MOVLW  01
1EC2:  MOVWF  01
1EC4:  BRA    1ECC
....................     } 
1EC6:  BRA    1ECC
....................     else 
....................     { 
....................         return 0; 
1EC8:  MOVLW  00
1ECA:  MOVWF  01
....................     } 
1ECC:  RETURN 0
.................... } 
.................... int8 IsCenterAndNotMargins() 
.................... { 
....................     if (ad1 < 300 && ad2 >= 300 && ad3 >= 300 && ad4 < 300) 
....................     { 
....................         return 1; 
....................     } 
....................     else 
....................     { 
....................         return 0; 
....................     } 
.................... } 
.................... int8 IsCenterInside() 
.................... { 
....................     if (ad2 >= 300 && ad3 >= 300) 
*
20A2:  MOVF   1B,W
20A4:  SUBLW  00
20A6:  BC    20CA
20A8:  XORLW  FF
20AA:  BNZ   20B2
20AC:  MOVF   1A,W
20AE:  SUBLW  2B
20B0:  BC    20CA
20B2:  MOVF   1D,W
20B4:  SUBLW  00
20B6:  BC    20CA
20B8:  XORLW  FF
20BA:  BNZ   20C2
20BC:  MOVF   1C,W
20BE:  SUBLW  2B
20C0:  BC    20CA
....................     { 
....................         return 1; 
20C2:  MOVLW  01
20C4:  MOVWF  01
20C6:  BRA    20CE
....................     } 
20C8:  BRA    20CE
....................     else 
....................     { 
....................         return 0; 
20CA:  MOVLW  00
20CC:  MOVWF  01
....................     } 
20CE:  GOTO   260A (RETURN)
.................... } 
.................... int8 IsMarginsInside() 
.................... { 
....................     if (ad1 >= 300 && ad4 >= 400) 
....................     { 
....................         return 1; 
....................     } 
....................     else 
....................     { 
....................         return 0; 
....................     } 
.................... } 
.................... int8 IsMarginsOutside() 
.................... { 
....................     if (ad1 < 300 && ad4 < 400) 
....................     { 
....................         return 1; 
....................     } 
....................     else 
....................     { 
....................         return 0; 
....................     } 
.................... } 
.................... int8 IsAllOutside() 
.................... { 
....................     if (ad1 < 300 && ad2 < 300 && ad3 < 300 && ad4 < 300) 
*
205A:  MOVF   19,W
205C:  SUBLW  01
205E:  BNC   209A
2060:  BNZ   2068
2062:  MOVF   18,W
2064:  SUBLW  2B
2066:  BNC   209A
2068:  MOVF   1B,W
206A:  SUBLW  01
206C:  BNC   209A
206E:  BNZ   2076
2070:  MOVF   1A,W
2072:  SUBLW  2B
2074:  BNC   209A
2076:  MOVF   1D,W
2078:  SUBLW  01
207A:  BNC   209A
207C:  BNZ   2084
207E:  MOVF   1C,W
2080:  SUBLW  2B
2082:  BNC   209A
2084:  MOVF   1F,W
2086:  SUBLW  01
2088:  BNC   209A
208A:  BNZ   2092
208C:  MOVF   1E,W
208E:  SUBLW  2B
2090:  BNC   209A
....................     { 
....................         return 1; 
2092:  MOVLW  01
2094:  MOVWF  01
2096:  BRA    209E
....................     } 
2098:  BRA    209E
....................     else 
....................     { 
....................         return 0; 
209A:  MOVLW  00
209C:  MOVWF  01
....................     } 
209E:  GOTO   25E6 (RETURN)
.................... } 
.................... int8 IsLeft() 
.................... { 
....................     if (ad1 >= 300 && ad2 >= 300 && ad3 >= 300 && ad4 < 300) 
*
200E:  MOVF   19,W
2010:  SUBLW  00
2012:  BC    2054
2014:  XORLW  FF
2016:  BNZ   201E
2018:  MOVF   18,W
201A:  SUBLW  2B
201C:  BC    2054
201E:  MOVF   1B,W
2020:  SUBLW  00
2022:  BC    2054
2024:  XORLW  FF
2026:  BNZ   202E
2028:  MOVF   1A,W
202A:  SUBLW  2B
202C:  BC    2054
202E:  MOVF   1D,W
2030:  SUBLW  00
2032:  BC    2054
2034:  XORLW  FF
2036:  BNZ   203E
2038:  MOVF   1C,W
203A:  SUBLW  2B
203C:  BC    2054
203E:  MOVF   1F,W
2040:  SUBLW  01
2042:  BNC   2054
2044:  BNZ   204C
2046:  MOVF   1E,W
2048:  SUBLW  2B
204A:  BNC   2054
....................     { 
....................         return 1; 
204C:  MOVLW  01
204E:  MOVWF  01
2050:  BRA    2058
....................     } 
2052:  BRA    2058
....................     else 
....................     { 
....................         return 0; 
2054:  MOVLW  00
2056:  MOVWF  01
....................     } 
2058:  RETURN 0
.................... } 
.................... int8 IsAllAlign() 
.................... { 
....................     if (ad1 >= 300 && ad2 >= 300 && ad3 >= 300 && ad4 >= 300) 
*
1546:  MOVF   19,W
1548:  SUBLW  00
154A:  BC    158E
154C:  XORLW  FF
154E:  BNZ   1556
1550:  MOVF   18,W
1552:  SUBLW  2B
1554:  BC    158E
1556:  MOVF   1B,W
1558:  SUBLW  00
155A:  BC    158E
155C:  XORLW  FF
155E:  BNZ   1566
1560:  MOVF   1A,W
1562:  SUBLW  2B
1564:  BC    158E
1566:  MOVF   1D,W
1568:  SUBLW  00
156A:  BC    158E
156C:  XORLW  FF
156E:  BNZ   1576
1570:  MOVF   1C,W
1572:  SUBLW  2B
1574:  BC    158E
1576:  MOVF   1F,W
1578:  SUBLW  00
157A:  BC    158E
157C:  XORLW  FF
157E:  BNZ   1586
1580:  MOVF   1E,W
1582:  SUBLW  2B
1584:  BC    158E
....................     { 
....................         return 1; 
1586:  MOVLW  01
1588:  MOVWF  01
158A:  BRA    1592
....................     } 
158C:  BRA    1592
....................     else 
....................     { 
....................         return 0; 
158E:  MOVLW  00
1590:  MOVWF  01
....................     } 
1592:  RETURN 0
.................... } 
....................  
.................... void Align() 
*
1C04:  MOVFF  1B,3A
1C08:  MOVFF  1A,39
1C0C:  RCALL  1594
1C0E:  MOVFF  03,38
1C12:  MOVFF  02,37
1C16:  MOVFF  01,36
1C1A:  MOVFF  00,35
1C1E:  MOVF   1C,W
1C20:  ADDWF  1A,W
1C22:  MOVWF  01
1C24:  MOVF   1D,W
1C26:  ADDWFC 1B,W
1C28:  MOVWF  03
1C2A:  MOVFF  01,39
1C2E:  MOVWF  3A
1C30:  RCALL  1594
1C32:  MOVFF  38,3C
1C36:  MOVFF  37,3B
1C3A:  MOVFF  36,3A
1C3E:  MOVFF  35,39
1C42:  MOVFF  03,40
1C46:  MOVFF  02,3F
1C4A:  MOVFF  01,3E
1C4E:  MOVFF  00,3D
1C52:  RCALL  15CA
1C54:  MOVFF  03,2C
1C58:  MOVFF  02,2B
1C5C:  MOVFF  01,2A
1C60:  MOVFF  00,29
1C64:  MOVFF  1D,3A
1C68:  MOVFF  1C,39
1C6C:  RCALL  1594
1C6E:  MOVFF  03,38
1C72:  MOVFF  02,37
1C76:  MOVFF  01,36
1C7A:  MOVFF  00,35
1C7E:  MOVF   1C,W
1C80:  ADDWF  1A,W
1C82:  MOVWF  01
1C84:  MOVF   1D,W
1C86:  ADDWFC 1B,W
1C88:  MOVWF  03
1C8A:  MOVFF  01,39
1C8E:  MOVWF  3A
1C90:  RCALL  1594
1C92:  MOVFF  38,3C
1C96:  MOVFF  37,3B
1C9A:  MOVFF  36,3A
1C9E:  MOVFF  35,39
1CA2:  MOVFF  03,40
1CA6:  MOVFF  02,3F
1CAA:  MOVFF  01,3E
1CAE:  MOVFF  00,3D
1CB2:  RCALL  15CA
1CB4:  MOVFF  03,30
1CB8:  MOVFF  02,2F
1CBC:  MOVFF  01,2E
1CC0:  MOVFF  00,2D
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad2 + ad3); 
....................     float ad3Ratio = (float)ad3 / (float)(ad2 + ad3); 
....................  
....................     ///alto significa escuro 
....................     if (ad2 + ad3 > 400) 
1CC4:  MOVF   1C,W
1CC6:  ADDWF  1A,W
1CC8:  MOVWF  35
1CCA:  MOVF   1D,W
1CCC:  ADDWFC 1B,W
1CCE:  MOVWF  36
1CD0:  SUBLW  00
1CD2:  BTFSC  FD8.0
1CD4:  BRA    1E5C
1CD6:  XORLW  FF
1CD8:  BNZ   1CE2
1CDA:  MOVF   35,W
1CDC:  SUBLW  90
1CDE:  BTFSC  FD8.0
1CE0:  BRA    1E5C
1CE2:  CLRF   16
1CE4:  BTFSC  FF2.7
1CE6:  BSF    16.7
1CE8:  BCF    FF2.7
....................     { 
....................         //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................         //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................  
....................         lcd_pos_xy(1, 1); 
1CEA:  MOVLW  01
1CEC:  MOVWF  50
1CEE:  MOVWF  51
1CF0:  CALL   116A
1CF4:  BTFSC  16.7
1CF6:  BSF    FF2.7
....................  
....................         //O ad2 é o da direita, se este esta maior, significa que o robo esta a direita 
....................         if (ad2Ratio > alignRatio) 
1CF8:  MOVFF  28,38
1CFC:  MOVFF  27,37
1D00:  MOVFF  26,36
1D04:  MOVFF  25,35
1D08:  MOVFF  2C,3C
1D0C:  MOVFF  2B,3B
1D10:  MOVFF  2A,3A
1D14:  MOVFF  29,39
1D18:  RCALL  1724
1D1A:  BNC   1D36
....................         { 
....................             printf(lcd_escreve, "Esta a direita"); 
1D1C:  MOVLW  D6
1D1E:  MOVWF  FF6
1D20:  MOVLW  13
1D22:  MOVWF  FF7
1D24:  CALL   151A
....................             SetBothPwm(950); 
1D28:  MOVLW  03
1D2A:  MOVWF  36
1D2C:  MOVLW  B6
1D2E:  MOVWF  35
1D30:  RCALL  179A
....................             LeftBackwardRightForward(); 
1D32:  RCALL  17E8
....................         } 
1D34:  BRA    1E5A
....................         else if (ad3Ratio > alignRatio) 
1D36:  MOVFF  28,38
1D3A:  MOVFF  27,37
1D3E:  MOVFF  26,36
1D42:  MOVFF  25,35
1D46:  MOVFF  30,3C
1D4A:  MOVFF  2F,3B
1D4E:  MOVFF  2E,3A
1D52:  MOVFF  2D,39
1D56:  RCALL  1724
1D58:  BNC   1D74
....................         { 
....................             printf(lcd_escreve, "Esta a esquerda"); 
1D5A:  MOVLW  E6
1D5C:  MOVWF  FF6
1D5E:  MOVLW  13
1D60:  MOVWF  FF7
1D62:  CALL   151A
....................             SetBothPwm(950); 
1D66:  MOVLW  03
1D68:  MOVWF  36
1D6A:  MOVLW  B6
1D6C:  MOVWF  35
1D6E:  RCALL  179A
....................             RightBackwardLeftForward(); 
1D70:  RCALL  17FA
....................         } 
1D72:  BRA    1E5A
....................         else 
....................         { 
....................  
....................             ///850 é o minimo que o motor vai ter (ele precisa de uns 800 pra não ficar travado) e vai somar no maximo 173 
....................             ///Por isso que o maximo dele é 1023 (850 + 173), é possivel fazer com que o valor de maior que 1023 e limitar 
....................             ///Com um if, da para testar isso 
....................             long pwm1 = ad2Ratio * 123 + 900; 
....................             long pwm2 = ad3Ratio * 123 + 900; 
1D74:  MOVFF  2C,38
1D78:  MOVFF  2B,37
1D7C:  MOVFF  2A,36
1D80:  MOVFF  29,35
1D84:  CLRF   3C
1D86:  CLRF   3B
1D88:  MOVLW  76
1D8A:  MOVWF  3A
1D8C:  MOVLW  85
1D8E:  MOVWF  39
1D90:  RCALL  180C
1D92:  MOVFF  03,38
1D96:  MOVFF  02,37
1D9A:  MOVFF  01,36
1D9E:  MOVFF  00,35
1DA2:  BCF    FD8.1
1DA4:  MOVFF  03,3C
1DA8:  MOVFF  02,3B
1DAC:  MOVFF  01,3A
1DB0:  MOVFF  00,39
1DB4:  CLRF   40
1DB6:  CLRF   3F
1DB8:  MOVLW  61
1DBA:  MOVWF  3E
1DBC:  MOVLW  88
1DBE:  MOVWF  3D
1DC0:  RCALL  18FE
1DC2:  MOVFF  03,38
1DC6:  MOVFF  02,37
1DCA:  MOVFF  01,36
1DCE:  MOVFF  00,35
1DD2:  RCALL  1B68
1DD4:  MOVFF  02,32
1DD8:  MOVFF  01,31
1DDC:  MOVFF  30,38
1DE0:  MOVFF  2F,37
1DE4:  MOVFF  2E,36
1DE8:  MOVFF  2D,35
1DEC:  CLRF   3C
1DEE:  CLRF   3B
1DF0:  MOVLW  76
1DF2:  MOVWF  3A
1DF4:  MOVLW  85
1DF6:  MOVWF  39
1DF8:  RCALL  180C
1DFA:  MOVFF  03,38
1DFE:  MOVFF  02,37
1E02:  MOVFF  01,36
1E06:  MOVFF  00,35
1E0A:  BCF    FD8.1
1E0C:  MOVFF  03,3C
1E10:  MOVFF  02,3B
1E14:  MOVFF  01,3A
1E18:  MOVFF  00,39
1E1C:  CLRF   40
1E1E:  CLRF   3F
1E20:  MOVLW  61
1E22:  MOVWF  3E
1E24:  MOVLW  88
1E26:  MOVWF  3D
1E28:  RCALL  18FE
1E2A:  MOVFF  03,38
1E2E:  MOVFF  02,37
1E32:  MOVFF  01,36
1E36:  MOVFF  00,35
1E3A:  RCALL  1B68
1E3C:  MOVFF  02,34
1E40:  MOVFF  01,33
....................             SetLeft(pwm1); 
1E44:  MOVFF  32,36
1E48:  MOVFF  31,35
1E4C:  RCALL  1BA0
....................             SetRight(pwm2); 
1E4E:  MOVFF  34,36
1E52:  MOVFF  33,35
1E56:  RCALL  1BC8
....................             frente(); 
1E58:  BRA    1BF0
....................             // SetLeft((long)(ad2Ratio * 100) + 850); 
....................             // SetRight((long)(ad3Ratio * 100) + 850); 
....................         } 
....................     } 
1E5A:  BRA    1E80
1E5C:  CLRF   16
1E5E:  BTFSC  FF2.7
1E60:  BSF    16.7
1E62:  BCF    FF2.7
....................     else 
....................     { 
....................         ///Esta fora da pista, deve fazer algo 
....................         //SetBothPwm(0); 
....................         lcd_pos_xy(1, 2); 
1E64:  MOVLW  01
1E66:  MOVWF  50
1E68:  MOVLW  02
1E6A:  MOVWF  51
1E6C:  CALL   116A
1E70:  BTFSC  16.7
1E72:  BSF    FF2.7
....................  
....................         printf(lcd_escreve, "Se perdeu"); 
1E74:  MOVLW  F6
1E76:  MOVWF  FF6
1E78:  MOVLW  13
1E7A:  MOVWF  FF7
1E7C:  CALL   151A
....................     } 
1E80:  RETURN 0
.................... } 
....................  
.................... ///BASICAMENTE faz a mesma coisa que o algin, mas troca os sensores (coloca o da esquerda na direitea) 
.................... void InvertedAlign() 
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad2 + ad3); 
....................     float ad3Ratio = (float)ad3 / (float)(ad2 + ad3); 
....................  
....................     ///alto significa escuro 
....................     if (ad2 + ad3 <= 400) 
....................     { 
....................         //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................         //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................  
....................         lcd_pos_xy(1, 1); 
....................  
....................         //O ad2 é o da direita, se este esta maior, significa que o robo esta a direita 
....................         if (ad3Ratio > alignRatio) 
....................         { 
....................             printf(lcd_escreve, "Esta a direita"); 
....................             SetBothPwm(950); 
....................             LeftBackwardRightForward(); 
....................         } 
....................         else if (ad2Ratio > alignRatio) 
....................         { 
....................             printf(lcd_escreve, "Esta a esquerda"); 
....................             SetBothPwm(950); 
....................             RightBackwardLeftForward(); 
....................         } 
....................         else 
....................         { 
....................  
....................             ///850 é o minimo que o motor vai ter (ele precisa de uns 800 pra não ficar travado) e vai somar no maximo 173 
....................             ///Por isso que o maximo dele é 1023 (850 + 173), é possivel fazer com que o valor de maior que 1023 e limitar 
....................             ///Com um if, da para testar isso 
....................             long pwm1 = ad2Ratio * 173 + 850; 
....................             long pwm2 = ad3Ratio * 173 + 850; 
....................             SetLeft(pwm2); 
....................             SetRight(pwm1); 
....................             frente(); 
....................             // SetLeft((long)(ad2Ratio * 100) + 850); 
....................             // SetRight((long)(ad3Ratio * 100) + 850); 
....................         } 
....................     } 
....................     else 
....................     { 
....................         ///Esta fora da pista, deve fazer algo 
....................         //SetBothPwm(0); 
....................         lcd_pos_xy(1, 2); 
....................  
....................         printf(lcd_escreve, "Se perdeu"); 
....................     } 
.................... } 
....................  
.................... void Setup() 
.................... { 
....................     adCounter = 1; 
*
14EC:  MOVLW  01
14EE:  MOVWF  22
....................     running = 0; 
14F0:  CLRF   17
....................  
....................     setup_adc_ports(AN0_TO_AN3); 
14F2:  MOVF   FC1,W
14F4:  ANDLW  C0
14F6:  IORLW  0B
14F8:  MOVWF  FC1
....................     setup_adc(ADC_CLOCK_DIV_4); 
14FA:  MOVF   FC0,W
14FC:  ANDLW  C0
14FE:  IORLW  04
1500:  MOVWF  FC0
1502:  BSF    FC0.7
1504:  BSF    FC2.0
....................  
....................     setup_timer_0(RTCC_INTERNAL | RTCC_DIV_2 | RTCC_8_BIT); 
1506:  MOVLW  C0
1508:  MOVWF  FD5
....................     set_timer0(0); 
150A:  CLRF   FD7
150C:  CLRF   FD6
....................     enable_interrupts(INT_TIMER0); 
150E:  BSF    FF2.5
....................     enable_interrupts(GLOBAL); 
1510:  IORWF  FF2,F
....................  
....................     lcd_ini(); 
1512:  BRA    142A
....................     MotorInitialize(); 
1514:  BRA    14CC
1516:  GOTO   20FE (RETURN)
....................     // SetBothPwm(0); 
....................     // frente(); 
.................... } 
....................  
.................... void ClearScreen() 
.................... { 
....................     lcd_escreve('\f'); 
*
11D2:  MOVLW  0C
11D4:  MOVWF  4F
11D6:  RCALL  118C
11D8:  GOTO   1330 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
