CCS PCH C Compiler, Version 5.015, 5967               29-ago-18 08:07

               Filename:   D:\Projetos\Imposto\Source Code\main.lst

               ROM used:   6040 bytes (18%)
                           Largest free fragment is 22628
               RAM used:   42 (2%) at main() level
                           88 (4%) worst case
               Stack used: 12 locations (6 in main + 6 for interrupts)
               Stack size: 31

*
1000:  GOTO   23D4
*
1008:  MOVWF  04
100A:  MOVFF  FD8,05
100E:  MOVFF  FE0,06
1012:  MOVLB  0
1014:  MOVFF  FE9,0C
1018:  MOVFF  FEA,07
101C:  MOVFF  FE1,08
1020:  MOVFF  FE2,09
1024:  MOVFF  FD9,0A
1028:  MOVFF  FDA,0B
102C:  MOVFF  FF3,12
1030:  MOVFF  FF4,13
1034:  MOVFF  FFA,14
1038:  MOVFF  00,0E
103C:  MOVFF  01,0F
1040:  MOVFF  02,10
1044:  MOVFF  03,11
1048:  BTFSS  FF2.5
104A:  GOTO   1054
104E:  BTFSC  FF2.2
1050:  GOTO   12CC
1054:  MOVFF  0E,00
1058:  MOVFF  0F,01
105C:  MOVFF  10,02
1060:  MOVFF  11,03
1064:  MOVFF  0C,FE9
1068:  MOVFF  07,FEA
106C:  BSF    07.7
106E:  MOVFF  08,FE1
1072:  MOVFF  09,FE2
1076:  MOVFF  0A,FD9
107A:  MOVFF  0B,FDA
107E:  MOVFF  12,FF3
1082:  MOVFF  13,FF4
1086:  MOVFF  14,FFA
108A:  MOVF   04,W
108C:  MOVFF  06,FE0
1090:  MOVFF  05,FD8
1094:  RETFIE 0
.................... #include <main.h> 
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
1096:  MOVFF  FF2,0D
109A:  BCF    FF2.7
109C:  CLRF   FF7
109E:  ADDLW  B0
10A0:  MOVWF  FF6
10A2:  MOVLW  10
10A4:  ADDWFC FF7,F
10A6:  TBLRD*+
10A8:  MOVF   FF5,W
10AA:  BTFSC  0D.7
10AC:  BSF    FF2.7
10AE:  RETURN 0
10B0:  DATA 28,0C
10B2:  DATA 01,06
*
11DC:  TBLRD*+
11DE:  MOVFF  FF6,4A
11E2:  MOVFF  FF7,4B
11E6:  MOVFF  FF5,4F
11EA:  RCALL  118C
11EC:  MOVFF  4A,FF6
11F0:  MOVFF  4B,FF7
11F4:  DECFSZ 49,F
11F6:  BRA    11DC
11F8:  RETURN 0
11FA:  MOVF   50,W
11FC:  CLRF   01
11FE:  SUBWF  4F,W
1200:  BC    1208
1202:  MOVFF  4F,00
1206:  BRA    1220
1208:  CLRF   00
120A:  MOVLW  08
120C:  MOVWF  51
120E:  RLCF   4F,F
1210:  RLCF   00,F
1212:  MOVF   50,W
1214:  SUBWF  00,W
1216:  BTFSC  FD8.0
1218:  MOVWF  00
121A:  RLCF   01,F
121C:  DECFSZ 51,F
121E:  BRA    120E
1220:  RETURN 0
1222:  MOVLW  20
1224:  BTFSS  4A.4
1226:  MOVLW  30
1228:  MOVWF  4B
122A:  MOVFF  49,00
122E:  BTFSS  49.7
1230:  BRA    1242
1232:  COMF   00,F
1234:  INCF   00,F
1236:  MOVFF  00,49
123A:  MOVLW  2D
123C:  MOVWF  4B
123E:  BSF    4A.7
1240:  BSF    4A.0
1242:  MOVF   01,W
1244:  MOVFF  49,4F
1248:  MOVLW  64
124A:  MOVWF  50
124C:  RCALL  11FA
124E:  MOVFF  00,49
1252:  MOVLW  30
1254:  ADDWF  01,W
1256:  MOVWF  4C
1258:  MOVFF  49,4F
125C:  MOVLW  0A
125E:  MOVWF  50
1260:  RCALL  11FA
1262:  MOVLW  30
1264:  ADDWF  00,W
1266:  MOVWF  4E
1268:  MOVLW  30
126A:  ADDWF  01,W
126C:  MOVWF  4D
126E:  MOVFF  4B,00
1272:  MOVLW  30
1274:  SUBWF  4C,W
1276:  BZ    1280
1278:  BSF    4A.1
127A:  BTFSC  4A.7
127C:  BSF    4A.2
127E:  BRA    12A4
1280:  MOVFF  4B,4C
1284:  MOVLW  20
1286:  MOVWF  4B
1288:  MOVLW  30
128A:  SUBWF  4D,W
128C:  BZ    1296
128E:  BSF    4A.0
1290:  BTFSC  4A.7
1292:  BSF    4A.1
1294:  BRA    12A4
1296:  BTFSS  FD8.2
1298:  BSF    4A.0
129A:  BNZ   12A4
129C:  MOVFF  4C,4D
12A0:  MOVLW  20
12A2:  MOVWF  4C
12A4:  BTFSC  4A.2
12A6:  BRA    12B2
12A8:  BTFSC  4A.1
12AA:  BRA    12B8
12AC:  BTFSC  4A.0
12AE:  BRA    12BE
12B0:  BRA    12C4
12B2:  MOVFF  4B,4F
12B6:  RCALL  118C
12B8:  MOVFF  4C,4F
12BC:  RCALL  118C
12BE:  MOVFF  4D,4F
12C2:  RCALL  118C
12C4:  MOVFF  4E,4F
12C8:  RCALL  118C
12CA:  RETURN 0
*
1396:  DATA 20,64
1398:  DATA 3A,20
139A:  DATA 25,64
139C:  DATA 00,00
139E:  DATA 20,63
13A0:  DATA 3A,20
13A2:  DATA 25,64
13A4:  DATA 00,00
13A6:  DATA 20,49
13A8:  DATA 6E,69
13AA:  DATA 63,69
13AC:  DATA 61,6C
13AE:  DATA 69,7A
13B0:  DATA 61,6E
13B2:  DATA 64,6F
13B4:  DATA 00,00
13B6:  DATA 54,41
13B8:  DATA 20,4E
13BA:  DATA 41,20
13BC:  DATA 50,4F
13BE:  DATA 53,49
13C0:  DATA 43,41
13C2:  DATA 4F,00
13C4:  DATA 46,69
13C6:  DATA 6D,20
13C8:  DATA 64,6F
13CA:  DATA 20,70
13CC:  DATA 72,6F
13CE:  DATA 67,72
13D0:  DATA 61,6D
13D2:  DATA 61,64
13D4:  DATA 6F,00
13D6:  DATA 45,73
13D8:  DATA 74,61
13DA:  DATA 20,61
13DC:  DATA 20,64
13DE:  DATA 69,72
13E0:  DATA 65,69
13E2:  DATA 74,61
13E4:  DATA 00,00
13E6:  DATA 45,73
13E8:  DATA 74,61
13EA:  DATA 20,61
13EC:  DATA 20,65
13EE:  DATA 73,71
13F0:  DATA 75,65
13F2:  DATA 72,64
13F4:  DATA 61,00
13F6:  DATA 53,65
13F8:  DATA 20,70
13FA:  DATA 65,72
13FC:  DATA 64,65
13FE:  DATA 75,00
1400:  DATA 45,73
1402:  DATA 74,61
1404:  DATA 20,61
1406:  DATA 20,64
1408:  DATA 69,72
140A:  DATA 65,69
140C:  DATA 74,61
140E:  DATA 00,00
1410:  DATA 45,73
1412:  DATA 74,61
1414:  DATA 20,61
1416:  DATA 20,65
1418:  DATA 73,71
141A:  DATA 75,65
141C:  DATA 72,64
141E:  DATA 61,00
1420:  DATA 53,65
1422:  DATA 20,70
1424:  DATA 65,72
1426:  DATA 64,65
1428:  DATA 75,00
*
151A:  TBLRD*+
151C:  MOVF   FF5,F
151E:  BZ    1544
1520:  MOVFF  FF6,35
1524:  MOVFF  FF7,36
1528:  CLRF   16
152A:  BTFSC  FF2.7
152C:  BSF    16.7
152E:  BCF    FF2.7
1530:  MOVFF  FF5,4F
1534:  RCALL  118C
1536:  BTFSC  16.7
1538:  BSF    FF2.7
153A:  MOVFF  35,FF6
153E:  MOVFF  36,FF7
1542:  BRA    151A
1544:  RETURN 0
*
1594:  MOVLW  8E
1596:  MOVWF  00
1598:  MOVFF  3A,01
159C:  MOVFF  39,02
15A0:  CLRF   03
15A2:  MOVF   01,F
15A4:  BNZ   15B8
15A6:  MOVFF  02,01
15AA:  CLRF   02
15AC:  MOVLW  08
15AE:  SUBWF  00,F
15B0:  MOVF   01,F
15B2:  BNZ   15B8
15B4:  CLRF   00
15B6:  BRA    15C8
15B8:  BCF    FD8.0
15BA:  BTFSC  01.7
15BC:  BRA    15C6
15BE:  RLCF   02,F
15C0:  RLCF   01,F
15C2:  DECF   00,F
15C4:  BRA    15B8
15C6:  BCF    01.7
15C8:  RETURN 0
15CA:  MOVF   39,W
15CC:  BTFSC  FD8.2
15CE:  BRA    171A
15D0:  MOVWF  45
15D2:  MOVF   3D,W
15D4:  BTFSC  FD8.2
15D6:  BRA    171A
15D8:  SUBWF  45,F
15DA:  BNC   15E6
15DC:  MOVLW  7F
15DE:  ADDWF  45,F
15E0:  BTFSC  FD8.0
15E2:  BRA    171A
15E4:  BRA    15F2
15E6:  MOVLW  81
15E8:  SUBWF  45,F
15EA:  BTFSS  FD8.0
15EC:  BRA    171A
15EE:  BTFSC  FD8.2
15F0:  BRA    171A
15F2:  MOVFF  45,00
15F6:  CLRF   01
15F8:  CLRF   02
15FA:  CLRF   03
15FC:  CLRF   44
15FE:  MOVFF  3A,43
1602:  BSF    43.7
1604:  MOVFF  3B,42
1608:  MOVFF  3C,41
160C:  MOVLW  19
160E:  MOVWF  45
1610:  MOVF   40,W
1612:  SUBWF  41,F
1614:  BC    1630
1616:  MOVLW  01
1618:  SUBWF  42,F
161A:  BC    1630
161C:  SUBWF  43,F
161E:  BC    1630
1620:  SUBWF  44,F
1622:  BC    1630
1624:  INCF   44,F
1626:  INCF   43,F
1628:  INCF   42,F
162A:  MOVF   40,W
162C:  ADDWF  41,F
162E:  BRA    1680
1630:  MOVF   3F,W
1632:  SUBWF  42,F
1634:  BC    165A
1636:  MOVLW  01
1638:  SUBWF  43,F
163A:  BC    165A
163C:  SUBWF  44,F
163E:  BC    165A
1640:  INCF   44,F
1642:  INCF   43,F
1644:  MOVF   3F,W
1646:  ADDWF  42,F
1648:  MOVF   40,W
164A:  ADDWF  41,F
164C:  BNC   1680
164E:  INCF   42,F
1650:  BNZ   1680
1652:  INCF   43,F
1654:  BNZ   1680
1656:  INCF   44,F
1658:  BRA    1680
165A:  MOVF   3E,W
165C:  IORLW  80
165E:  SUBWF  43,F
1660:  BC    167E
1662:  MOVLW  01
1664:  SUBWF  44,F
1666:  BC    167E
1668:  INCF   44,F
166A:  MOVF   3E,W
166C:  IORLW  80
166E:  ADDWF  43,F
1670:  MOVF   3F,W
1672:  ADDWF  42,F
1674:  BNC   1648
1676:  INCF   43,F
1678:  BNZ   1648
167A:  INCF   44,F
167C:  BRA    1648
167E:  BSF    03.0
1680:  DECFSZ 45,F
1682:  BRA    1686
1684:  BRA    169C
1686:  BCF    FD8.0
1688:  RLCF   41,F
168A:  RLCF   42,F
168C:  RLCF   43,F
168E:  RLCF   44,F
1690:  BCF    FD8.0
1692:  RLCF   03,F
1694:  RLCF   02,F
1696:  RLCF   01,F
1698:  RLCF   46,F
169A:  BRA    1610
169C:  BTFSS  46.0
169E:  BRA    16AC
16A0:  BCF    FD8.0
16A2:  RRCF   01,F
16A4:  RRCF   02,F
16A6:  RRCF   03,F
16A8:  RRCF   46,F
16AA:  BRA    16B0
16AC:  DECF   00,F
16AE:  BZ    171A
16B0:  BTFSC  46.7
16B2:  BRA    16F0
16B4:  BCF    FD8.0
16B6:  RLCF   41,F
16B8:  RLCF   42,F
16BA:  RLCF   43,F
16BC:  RLCF   44,F
16BE:  MOVF   40,W
16C0:  SUBWF  41,F
16C2:  BC    16D2
16C4:  MOVLW  01
16C6:  SUBWF  42,F
16C8:  BC    16D2
16CA:  SUBWF  43,F
16CC:  BC    16D2
16CE:  SUBWF  44,F
16D0:  BNC   1706
16D2:  MOVF   3F,W
16D4:  SUBWF  42,F
16D6:  BC    16E2
16D8:  MOVLW  01
16DA:  SUBWF  43,F
16DC:  BC    16E2
16DE:  SUBWF  44,F
16E0:  BNC   1706
16E2:  MOVF   3E,W
16E4:  IORLW  80
16E6:  SUBWF  43,F
16E8:  BC    16F0
16EA:  MOVLW  01
16EC:  SUBWF  44,F
16EE:  BNC   1706
16F0:  INCF   03,F
16F2:  BNZ   1706
16F4:  INCF   02,F
16F6:  BNZ   1706
16F8:  INCF   01,F
16FA:  BNZ   1706
16FC:  INCF   00,F
16FE:  BZ    171A
1700:  RRCF   01,F
1702:  RRCF   02,F
1704:  RRCF   03,F
1706:  MOVFF  3A,45
170A:  MOVF   3E,W
170C:  XORWF  45,F
170E:  BTFSS  45.7
1710:  BRA    1716
1712:  BSF    01.7
1714:  BRA    1722
1716:  BCF    01.7
1718:  BRA    1722
171A:  CLRF   00
171C:  CLRF   01
171E:  CLRF   02
1720:  CLRF   03
1722:  RETURN 0
1724:  MOVFF  36,3D
1728:  MOVF   3A,W
172A:  XORWF  3D,F
172C:  BTFSS  3D.7
172E:  BRA    173A
1730:  BCF    FD8.2
1732:  BCF    FD8.0
1734:  BTFSC  36.7
1736:  BSF    FD8.0
1738:  BRA    1798
173A:  MOVFF  36,3D
173E:  MOVFF  39,3E
1742:  MOVF   35,W
1744:  SUBWF  3E,F
1746:  BZ    1754
1748:  BTFSS  3D.7
174A:  BRA    1798
174C:  MOVF   FD8,W
174E:  XORLW  01
1750:  MOVWF  FD8
1752:  BRA    1798
1754:  MOVFF  3A,3E
1758:  MOVF   36,W
175A:  SUBWF  3E,F
175C:  BZ    176A
175E:  BTFSS  3D.7
1760:  BRA    1798
1762:  MOVF   FD8,W
1764:  XORLW  01
1766:  MOVWF  FD8
1768:  BRA    1798
176A:  MOVFF  3B,3E
176E:  MOVF   37,W
1770:  SUBWF  3E,F
1772:  BZ    1780
1774:  BTFSS  3D.7
1776:  BRA    1798
1778:  MOVF   FD8,W
177A:  XORLW  01
177C:  MOVWF  FD8
177E:  BRA    1798
1780:  MOVFF  3C,3E
1784:  MOVF   38,W
1786:  SUBWF  3E,F
1788:  BZ    1796
178A:  BTFSS  3D.7
178C:  BRA    1798
178E:  MOVF   FD8,W
1790:  XORLW  01
1792:  MOVWF  FD8
1794:  BRA    1798
1796:  BCF    FD8.0
1798:  RETURN 0
*
180C:  MOVF   35,W
180E:  BTFSC  FD8.2
1810:  BRA    18F4
1812:  MOVWF  00
1814:  MOVF   39,W
1816:  BTFSC  FD8.2
1818:  BRA    18F4
181A:  ADDWF  00,F
181C:  BNC   1826
181E:  MOVLW  81
1820:  ADDWF  00,F
1822:  BC    18F4
1824:  BRA    182E
1826:  MOVLW  7F
1828:  SUBWF  00,F
182A:  BNC   18F4
182C:  BZ    18F4
182E:  MOVFF  36,3D
1832:  MOVF   3A,W
1834:  XORWF  3D,F
1836:  BSF    36.7
1838:  BSF    3A.7
183A:  MOVF   38,W
183C:  MULWF  3C
183E:  MOVFF  FF4,3F
1842:  MOVF   37,W
1844:  MULWF  3B
1846:  MOVFF  FF4,03
184A:  MOVFF  FF3,3E
184E:  MULWF  3C
1850:  MOVF   FF3,W
1852:  ADDWF  3F,F
1854:  MOVF   FF4,W
1856:  ADDWFC 3E,F
1858:  MOVLW  00
185A:  ADDWFC 03,F
185C:  MOVF   38,W
185E:  MULWF  3B
1860:  MOVF   FF3,W
1862:  ADDWF  3F,F
1864:  MOVF   FF4,W
1866:  ADDWFC 3E,F
1868:  MOVLW  00
186A:  CLRF   02
186C:  ADDWFC 03,F
186E:  ADDWFC 02,F
1870:  MOVF   36,W
1872:  MULWF  3C
1874:  MOVF   FF3,W
1876:  ADDWF  3E,F
1878:  MOVF   FF4,W
187A:  ADDWFC 03,F
187C:  MOVLW  00
187E:  ADDWFC 02,F
1880:  MOVF   36,W
1882:  MULWF  3B
1884:  MOVF   FF3,W
1886:  ADDWF  03,F
1888:  MOVF   FF4,W
188A:  ADDWFC 02,F
188C:  MOVLW  00
188E:  CLRF   01
1890:  ADDWFC 01,F
1892:  MOVF   38,W
1894:  MULWF  3A
1896:  MOVF   FF3,W
1898:  ADDWF  3E,F
189A:  MOVF   FF4,W
189C:  ADDWFC 03,F
189E:  MOVLW  00
18A0:  ADDWFC 02,F
18A2:  ADDWFC 01,F
18A4:  MOVF   37,W
18A6:  MULWF  3A
18A8:  MOVF   FF3,W
18AA:  ADDWF  03,F
18AC:  MOVF   FF4,W
18AE:  ADDWFC 02,F
18B0:  MOVLW  00
18B2:  ADDWFC 01,F
18B4:  MOVF   36,W
18B6:  MULWF  3A
18B8:  MOVF   FF3,W
18BA:  ADDWF  02,F
18BC:  MOVF   FF4,W
18BE:  ADDWFC 01,F
18C0:  INCF   00,F
18C2:  BTFSC  01.7
18C4:  BRA    18D0
18C6:  RLCF   3E,F
18C8:  RLCF   03,F
18CA:  RLCF   02,F
18CC:  RLCF   01,F
18CE:  DECF   00,F
18D0:  MOVLW  00
18D2:  BTFSS  3E.7
18D4:  BRA    18EA
18D6:  INCF   03,F
18D8:  ADDWFC 02,F
18DA:  ADDWFC 01,F
18DC:  MOVF   01,W
18DE:  BNZ   18EA
18E0:  MOVF   02,W
18E2:  BNZ   18EA
18E4:  MOVF   03,W
18E6:  BNZ   18EA
18E8:  INCF   00,F
18EA:  BTFSC  3D.7
18EC:  BSF    01.7
18EE:  BTFSS  3D.7
18F0:  BCF    01.7
18F2:  BRA    18FC
18F4:  CLRF   00
18F6:  CLRF   01
18F8:  CLRF   02
18FA:  CLRF   03
18FC:  RETURN 0
18FE:  MOVLW  80
1900:  BTFSC  FD8.1
1902:  XORWF  3E,F
1904:  CLRF   43
1906:  CLRF   44
1908:  MOVFF  3A,42
190C:  MOVF   3E,W
190E:  XORWF  42,F
1910:  MOVF   39,W
1912:  BTFSC  FD8.2
1914:  BRA    1ACE
1916:  MOVWF  41
1918:  MOVWF  00
191A:  MOVF   3D,W
191C:  BTFSC  FD8.2
191E:  BRA    1AE0
1920:  SUBWF  41,F
1922:  BTFSC  FD8.2
1924:  BRA    1A28
1926:  BNC   19A2
1928:  MOVFF  3E,47
192C:  BSF    47.7
192E:  MOVFF  3F,46
1932:  MOVFF  40,45
1936:  CLRF   44
1938:  BCF    FD8.0
193A:  RRCF   47,F
193C:  RRCF   46,F
193E:  RRCF   45,F
1940:  RRCF   44,F
1942:  DECFSZ 41,F
1944:  BRA    1936
1946:  BTFSS  42.7
1948:  BRA    1950
194A:  BSF    43.0
194C:  BRA    1B08
194E:  BCF    43.0
1950:  BCF    41.0
1952:  BSF    43.4
1954:  CLRF   FEA
1956:  MOVLW  3C
1958:  MOVWF  FE9
195A:  BRA    1B2E
195C:  BCF    43.4
195E:  BTFSC  42.7
1960:  BRA    1976
1962:  BTFSS  41.0
1964:  BRA    198C
1966:  RRCF   47,F
1968:  RRCF   46,F
196A:  RRCF   45,F
196C:  RRCF   44,F
196E:  INCF   00,F
1970:  BTFSC  FD8.2
1972:  BRA    1AFE
1974:  BRA    198C
1976:  BTFSC  47.7
1978:  BRA    1992
197A:  BCF    FD8.0
197C:  RLCF   44,F
197E:  RLCF   45,F
1980:  RLCF   46,F
1982:  RLCF   47,F
1984:  DECF   00,F
1986:  BTFSC  FD8.2
1988:  BRA    1AFE
198A:  BRA    1976
198C:  BSF    43.6
198E:  BRA    1A66
1990:  BCF    43.6
1992:  MOVFF  3A,42
1996:  BTFSS  3A.7
1998:  BRA    199E
199A:  BSF    47.7
199C:  BRA    1AF0
199E:  BCF    47.7
19A0:  BRA    1AF0
19A2:  MOVFF  3D,41
19A6:  MOVFF  3D,00
19AA:  MOVF   39,W
19AC:  SUBWF  41,F
19AE:  MOVFF  3A,47
19B2:  BSF    47.7
19B4:  MOVFF  3B,46
19B8:  MOVFF  3C,45
19BC:  CLRF   44
19BE:  BCF    FD8.0
19C0:  RRCF   47,F
19C2:  RRCF   46,F
19C4:  RRCF   45,F
19C6:  RRCF   44,F
19C8:  DECFSZ 41,F
19CA:  BRA    19BC
19CC:  BTFSS  42.7
19CE:  BRA    19D6
19D0:  BSF    43.1
19D2:  BRA    1B08
19D4:  BCF    43.1
19D6:  BCF    41.0
19D8:  BSF    43.5
19DA:  CLRF   FEA
19DC:  MOVLW  40
19DE:  MOVWF  FE9
19E0:  BRA    1B2E
19E2:  BCF    43.5
19E4:  BTFSC  42.7
19E6:  BRA    19FC
19E8:  BTFSS  41.0
19EA:  BRA    1A12
19EC:  RRCF   47,F
19EE:  RRCF   46,F
19F0:  RRCF   45,F
19F2:  RRCF   44,F
19F4:  INCF   00,F
19F6:  BTFSC  FD8.2
19F8:  BRA    1AFE
19FA:  BRA    1A12
19FC:  BTFSC  47.7
19FE:  BRA    1A18
1A00:  BCF    FD8.0
1A02:  RLCF   44,F
1A04:  RLCF   45,F
1A06:  RLCF   46,F
1A08:  RLCF   47,F
1A0A:  DECF   00,F
1A0C:  BTFSC  FD8.2
1A0E:  BRA    1AFE
1A10:  BRA    19FC
1A12:  BSF    43.7
1A14:  BRA    1A66
1A16:  BCF    43.7
1A18:  MOVFF  3E,42
1A1C:  BTFSS  3E.7
1A1E:  BRA    1A24
1A20:  BSF    47.7
1A22:  BRA    1AF0
1A24:  BCF    47.7
1A26:  BRA    1AF0
1A28:  MOVFF  3E,47
1A2C:  BSF    47.7
1A2E:  MOVFF  3F,46
1A32:  MOVFF  40,45
1A36:  BTFSS  42.7
1A38:  BRA    1A42
1A3A:  BCF    47.7
1A3C:  BSF    43.2
1A3E:  BRA    1B08
1A40:  BCF    43.2
1A42:  CLRF   44
1A44:  BCF    41.0
1A46:  CLRF   FEA
1A48:  MOVLW  3C
1A4A:  MOVWF  FE9
1A4C:  BRA    1B2E
1A4E:  BTFSC  42.7
1A50:  BRA    1A8A
1A52:  MOVFF  3A,42
1A56:  BTFSS  41.0
1A58:  BRA    1A66
1A5A:  RRCF   47,F
1A5C:  RRCF   46,F
1A5E:  RRCF   45,F
1A60:  RRCF   44,F
1A62:  INCF   00,F
1A64:  BZ    1AFE
1A66:  BTFSS  44.7
1A68:  BRA    1A80
1A6A:  INCF   45,F
1A6C:  BNZ   1A80
1A6E:  INCF   46,F
1A70:  BNZ   1A80
1A72:  INCF   47,F
1A74:  BNZ   1A80
1A76:  RRCF   47,F
1A78:  RRCF   46,F
1A7A:  RRCF   45,F
1A7C:  INCF   00,F
1A7E:  BZ    1AFE
1A80:  BTFSC  43.6
1A82:  BRA    1990
1A84:  BTFSC  43.7
1A86:  BRA    1A16
1A88:  BRA    1AC2
1A8A:  MOVLW  80
1A8C:  XORWF  47,F
1A8E:  BTFSS  47.7
1A90:  BRA    1A9A
1A92:  BRA    1B08
1A94:  MOVFF  3E,42
1A98:  BRA    1AAE
1A9A:  MOVFF  3A,42
1A9E:  MOVF   47,F
1AA0:  BNZ   1AAE
1AA2:  MOVF   46,F
1AA4:  BNZ   1AAE
1AA6:  MOVF   45,F
1AA8:  BNZ   1AAE
1AAA:  CLRF   00
1AAC:  BRA    1AF0
1AAE:  BTFSC  47.7
1AB0:  BRA    1AC2
1AB2:  BCF    FD8.0
1AB4:  RLCF   44,F
1AB6:  RLCF   45,F
1AB8:  RLCF   46,F
1ABA:  RLCF   47,F
1ABC:  DECFSZ 00,F
1ABE:  BRA    1AAE
1AC0:  BRA    1AFE
1AC2:  BTFSS  42.7
1AC4:  BRA    1ACA
1AC6:  BSF    47.7
1AC8:  BRA    1AF0
1ACA:  BCF    47.7
1ACC:  BRA    1AF0
1ACE:  MOVFF  3D,00
1AD2:  MOVFF  3E,47
1AD6:  MOVFF  3F,46
1ADA:  MOVFF  40,45
1ADE:  BRA    1AF0
1AE0:  MOVFF  39,00
1AE4:  MOVFF  3A,47
1AE8:  MOVFF  3B,46
1AEC:  MOVFF  3C,45
1AF0:  MOVFF  47,01
1AF4:  MOVFF  46,02
1AF8:  MOVFF  45,03
1AFC:  BRA    1B66
1AFE:  CLRF   00
1B00:  CLRF   01
1B02:  CLRF   02
1B04:  CLRF   03
1B06:  BRA    1B66
1B08:  CLRF   44
1B0A:  COMF   45,F
1B0C:  COMF   46,F
1B0E:  COMF   47,F
1B10:  COMF   44,F
1B12:  INCF   44,F
1B14:  BNZ   1B20
1B16:  INCF   45,F
1B18:  BNZ   1B20
1B1A:  INCF   46,F
1B1C:  BNZ   1B20
1B1E:  INCF   47,F
1B20:  BTFSC  43.0
1B22:  BRA    194E
1B24:  BTFSC  43.1
1B26:  BRA    19D4
1B28:  BTFSC  43.2
1B2A:  BRA    1A40
1B2C:  BRA    1A94
1B2E:  MOVF   FEF,W
1B30:  ADDWF  45,F
1B32:  BNC   1B3E
1B34:  INCF   46,F
1B36:  BNZ   1B3E
1B38:  INCF   47,F
1B3A:  BTFSC  FD8.2
1B3C:  BSF    41.0
1B3E:  MOVF   FED,F
1B40:  MOVF   FEF,W
1B42:  ADDWF  46,F
1B44:  BNC   1B4C
1B46:  INCF   47,F
1B48:  BTFSC  FD8.2
1B4A:  BSF    41.0
1B4C:  MOVF   FED,F
1B4E:  MOVF   FEF,W
1B50:  BTFSC  FEF.7
1B52:  BRA    1B56
1B54:  XORLW  80
1B56:  ADDWF  47,F
1B58:  BTFSC  FD8.0
1B5A:  BSF    41.0
1B5C:  BTFSC  43.4
1B5E:  BRA    195C
1B60:  BTFSC  43.5
1B62:  BRA    19E2
1B64:  BRA    1A4E
1B66:  RETURN 0
1B68:  MOVLW  8E
1B6A:  MOVWF  00
1B6C:  MOVF   35,W
1B6E:  SUBWF  00,F
1B70:  MOVFF  36,02
1B74:  MOVFF  37,01
1B78:  BSF    02.7
1B7A:  MOVF   00,F
1B7C:  BZ    1B90
1B7E:  BCF    FD8.0
1B80:  MOVF   02,F
1B82:  BNZ   1B88
1B84:  MOVF   01,F
1B86:  BZ    1B90
1B88:  RRCF   02,F
1B8A:  RRCF   01,F
1B8C:  DECFSZ 00,F
1B8E:  BRA    1B7E
1B90:  BTFSS  36.7
1B92:  BRA    1B9E
1B94:  COMF   01,F
1B96:  COMF   02,F
1B98:  INCF   01,F
1B9A:  BTFSC  FD8.2
1B9C:  INCF   02,F
1B9E:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=48MHz,crystal=20MHz) 
*
10B4:  MOVLW  01
10B6:  SUBWF  56,F
10B8:  BNC   10D2
10BA:  CLRF   FEA
10BC:  MOVLW  56
10BE:  MOVWF  FE9
10C0:  MOVF   FEF,W
10C2:  BZ    10D2
10C4:  MOVLW  02
10C6:  MOVWF  00
10C8:  DECFSZ 00,F
10CA:  BRA    10C8
10CC:  BRA    10CE
10CE:  DECFSZ FEF,F
10D0:  BRA    10C4
10D2:  RETURN 0
*
1142:  CLRF   FEA
1144:  MOVLW  50
1146:  MOVWF  FE9
1148:  MOVF   FEF,W
114A:  BZ    1168
114C:  MOVLW  0F
114E:  MOVWF  01
1150:  CLRF   00
1152:  DECFSZ 00,F
1154:  BRA    1152
1156:  DECFSZ 01,F
1158:  BRA    1150
115A:  MOVLW  8F
115C:  MOVWF  00
115E:  DECFSZ 00,F
1160:  BRA    115E
1162:  NOP   
1164:  DECFSZ FEF,F
1166:  BRA    114C
1168:  RETURN 0
....................  
.................... // #build(reset=0x1000, interrupt=0x1008) 
.................... // #org 0x000, 0xfff { } 
....................  
.................... #include <Motor1.c> 
.................... #build(reset = 0x1000, interrupt = 0x1008) 
.................... #org 0x000, 0xfff {} 
....................  
.................... #define m1p1 pin_e2 
.................... #define m1p2 pin_c0 
.................... #define m2p1 pin_d0 
.................... #define m2p2 pin_d1 
....................  
.................... void tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void frente() 
.................... { 
....................       output_bit(m1p1, 1); 
*
1BF0:  BSF    F8D.2
1BF2:  BCF    F96.2
....................       output_bit(m1p2, 0); 
1BF4:  BCF    F8B.0
1BF6:  BCF    F94.0
....................       output_bit(m2p1, 0); 
1BF8:  BCF    F8C.0
1BFA:  BCF    F95.0
....................       output_bit(m2p2, 1); 
1BFC:  BSF    F8C.1
1BFE:  BCF    F95.1
1C00:  RETURN 0
.................... } 
....................  
.................... void gira_esquerda() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void gira_direita() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_frente() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_frente() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void para() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void AllForward() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
.................... void AllBackwards() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void LeftBackwardRightForward() 
.................... { 
....................       output_bit(m1p1, 1); 
*
17E8:  BSF    F8D.2
17EA:  BCF    F96.2
....................       output_bit(m1p2, 0); 
17EC:  BCF    F8B.0
17EE:  BCF    F94.0
....................       output_bit(m2p1, 1); 
17F0:  BSF    F8C.0
17F2:  BCF    F95.0
....................       output_bit(m2p2, 0); 
17F4:  BCF    F8C.1
17F6:  BCF    F95.1
17F8:  RETURN 0
.................... } 
.................... void RightBackwardLeftForward() 
.................... { 
....................       output_bit(m1p1, 0); 
17FA:  BCF    F8D.2
17FC:  BCF    F96.2
....................       output_bit(m1p2, 1); 
17FE:  BSF    F8B.0
1800:  BCF    F94.0
....................       output_bit(m2p1, 0); 
1802:  BCF    F8C.0
1804:  BCF    F95.0
....................       output_bit(m2p2, 1); 
1806:  BSF    F8C.1
1808:  BCF    F95.1
180A:  RETURN 0
.................... } 
....................  
.................... void MotorInitialize() 
.................... { 
....................       setup_timer_2(T2_DIV_BY_16, 255, 1); //341 us overflow, 341 us interrupt 
*
14CC:  MOVLW  00
14CE:  IORLW  06
14D0:  MOVWF  FCA
14D2:  MOVLW  FF
14D4:  MOVWF  FCB
....................  
....................       setup_ccp1(CCP_PWM | CCP_SHUTDOWN_AC_L | CCP_SHUTDOWN_BD_L); 
14D6:  BCF    F94.2
14D8:  BCF    F8B.2
14DA:  MOVLW  0C
14DC:  MOVWF  FBD
14DE:  CLRF   FB7
14E0:  CLRF   FB6
....................       setup_ccp2(CCP_PWM); 
14E2:  BCF    F94.1
14E4:  BCF    F8B.1
14E6:  MOVWF  FBA
14E8:  GOTO   1516 (RETURN)
.................... } 
....................  
.................... void SetBothPwm(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
179A:  MOVFF  36,02
179E:  MOVFF  35,01
17A2:  RRCF   02,F
17A4:  RRCF   01,F
17A6:  RRCF   02,F
17A8:  RRCF   01,F
17AA:  RRCF   02,F
17AC:  MOVFF  01,FBE
17B0:  RRCF   02,F
17B2:  RRCF   02,W
17B4:  ANDLW  30
17B6:  MOVWF  00
17B8:  MOVF   FBD,W
17BA:  ANDLW  CF
17BC:  IORWF  00,W
17BE:  MOVWF  FBD
....................       set_pwm2_duty((int16)vel); //-50); 
17C0:  MOVFF  36,02
17C4:  MOVFF  35,01
17C8:  RRCF   02,F
17CA:  RRCF   01,F
17CC:  RRCF   02,F
17CE:  RRCF   01,F
17D0:  RRCF   02,F
17D2:  MOVFF  01,FBB
17D6:  RRCF   02,F
17D8:  RRCF   02,W
17DA:  ANDLW  30
17DC:  MOVWF  00
17DE:  MOVF   FBA,W
17E0:  ANDLW  CF
17E2:  IORWF  00,W
17E4:  MOVWF  FBA
17E6:  RETURN 0
.................... } 
....................  
.................... void SetRight(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
1BC8:  MOVFF  36,02
1BCC:  MOVFF  35,01
1BD0:  RRCF   02,F
1BD2:  RRCF   01,F
1BD4:  RRCF   02,F
1BD6:  RRCF   01,F
1BD8:  RRCF   02,F
1BDA:  MOVFF  01,FBE
1BDE:  RRCF   02,F
1BE0:  RRCF   02,W
1BE2:  ANDLW  30
1BE4:  MOVWF  00
1BE6:  MOVF   FBD,W
1BE8:  ANDLW  CF
1BEA:  IORWF  00,W
1BEC:  MOVWF  FBD
1BEE:  RETURN 0
.................... } 
.................... void SetLeft(int16 vel) 
.................... { 
....................       set_pwm2_duty((int16)vel); 
*
1BA0:  MOVFF  36,02
1BA4:  MOVFF  35,01
1BA8:  RRCF   02,F
1BAA:  RRCF   01,F
1BAC:  RRCF   02,F
1BAE:  RRCF   01,F
1BB0:  RRCF   02,F
1BB2:  MOVFF  01,FBB
1BB6:  RRCF   02,F
1BB8:  RRCF   02,W
1BBA:  ANDLW  30
1BBC:  MOVWF  00
1BBE:  MOVF   FBA,W
1BC0:  ANDLW  CF
1BC2:  IORWF  00,W
1BC4:  MOVWF  FBA
1BC6:  RETURN 0
.................... } 
....................  
.................... #include <LCD_KIT.c> 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipula��o de m�dulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: F�bio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
.................... /* 
.................... lcd_cursor_on()                        fun��es LCD 
.................... lcd_cursor_pisca() 
.................... lcd_cursor_off() 
.................... lcd_corre_esquerda() 
.................... lcd_corre_direita() 
.................... lcd_envia_nibble( byte dado ) 
.................... lcd_le_byte() 
.................... lcd_ini() 
.................... lcd_pos_xy( byte x, byte y) 
.................... lcd_escreve( char c)                  \f  Clear display                            //// 
....................                                             \n  Go to start of second line               //// 
....................                                   \b  Move back one position                   //// 
....................  
.................... lcd_le( byte x, byte y) 
.................... lcd_apaga() 
.................... { 
....................  
.................... */ 
.................... // As defini��es a seguir s�o utilizadas para acesso aos pinos do display 
.................... // caso o pino RW n�o seja utilizado, comente a defini��o lcd_rw 
.................... #ifndef lcd_enable 
....................    #define lcd_rs         pin_d2      // pino rs do LCD 
....................    #define lcd_enable     pin_d3      // pino enable do LCD 
....................    #define lcd_d4         pin_d4      // pino de dados d4 do LCD 
....................    #define lcd_d5         pin_d5      // pino de dados d5 do LCD 
....................    #define lcd_d6         pin_d6      // pino de dados d6 do LCD 
....................    #define lcd_d7         pin_d7   // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endere�o da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seq��ncia de inicializa��o do m�dulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................  
.................... /*   O 0x20 eh p configurar o tipo do display e talz. 
....................    O Segundo numero configura o modo do cursor, sendo: 
....................                -> 0xf Cursor piscante 
....................                -> 0xe Cursor comum 
....................                -> 0xc Sem cursor 
....................    O terceiro (1) limpa o display 
....................    O Quarto volta com o cursor. 
.................... */ 
....................  
.................... byte lcd_le_byte() 
.................... // l� um byte do LCD (somente com pino RW) 
.................... { 
....................    byte dado; 
....................    // configura os pinos de dados como entradas 
....................    input(lcd_d4); 
....................    input(lcd_d5); 
....................    input(lcd_d6); 
....................    input(lcd_d7); 
....................    // se o pino rw for utilizado, coloca em 1 
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_high(lcd_enable); // habilita display 
....................    dado = 0;   // zera a vari�vel de leitura 
....................    // l� os quatro bits mais significativos 
....................    if (input(lcd_d7)) bit_set(dado,7); 
....................    if (input(lcd_d6)) bit_set(dado,6); 
....................    if (input(lcd_d5)) bit_set(dado,5); 
....................    if (input(lcd_d4)) bit_set(dado,4); 
....................    // d� um pulso na linha enable 
....................    output_low(lcd_enable); 
....................    output_high(lcd_enable); 
....................    // l� os quatro bits menos significativos 
....................    if (input(lcd_d7)) bit_set(dado,3); 
....................    if (input(lcd_d6)) bit_set(dado,2); 
....................    if (input(lcd_d5)) bit_set(dado,1); 
....................    if (input(lcd_d4)) bit_set(dado,0); 
....................    output_low(lcd_enable);   // desabilita o display 
....................    return dado;   // retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
....................    // coloca os quatro bits nas saidas 
....................    output_bit(lcd_d4,bit_test(dado,0)); 
*
10D4:  BTFSC  57.0
10D6:  BRA    10DC
10D8:  BCF    F8C.4
10DA:  BRA    10DE
10DC:  BSF    F8C.4
10DE:  BCF    F95.4
....................    output_bit(lcd_d5,bit_test(dado,1)); 
10E0:  BTFSC  57.1
10E2:  BRA    10E8
10E4:  BCF    F8C.5
10E6:  BRA    10EA
10E8:  BSF    F8C.5
10EA:  BCF    F95.5
....................    output_bit(lcd_d6,bit_test(dado,2)); 
10EC:  BTFSC  57.2
10EE:  BRA    10F4
10F0:  BCF    F8C.6
10F2:  BRA    10F6
10F4:  BSF    F8C.6
10F6:  BCF    F95.6
....................    output_bit(lcd_d7,bit_test(dado,3)); 
10F8:  BTFSC  57.3
10FA:  BRA    1100
10FC:  BCF    F8C.7
10FE:  BRA    1102
1100:  BSF    F8C.7
1102:  BCF    F95.7
....................    // d� um pulso na linha enable 
....................    output_high(lcd_enable); 
1104:  BCF    F95.3
1106:  BSF    F8C.3
....................    output_low(lcd_enable); 
1108:  BCF    F95.3
110A:  BCF    F8C.3
110C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
....................    // coloca a linha rs em 0 
....................    output_low(lcd_rs); 
110E:  BCF    F95.2
1110:  BCF    F8C.2
....................    // aguarda o display ficar desocupado 
....................    //while ( bit_test(lcd_le_byte(),7) ) ; 
....................    // configura a linha rs dependendo do modo selecionado 
....................    output_bit(lcd_rs,endereco); 
1112:  MOVF   54,F
1114:  BNZ   111A
1116:  BCF    F8C.2
1118:  BRA    111C
111A:  BSF    F8C.2
111C:  BCF    F95.2
....................    delay_us(100);   // aguarda 100 us 
111E:  MOVLW  64
1120:  MOVWF  56
1122:  RCALL  10B4
....................    // caso a linha rw esteja definida, coloca em 0 
....................    #ifdef lcd_rw 
....................       output_low(lcd_rw); 
....................    #endif 
....................    // desativa linha enable 
....................    output_low(lcd_enable); 
1124:  BCF    F95.3
1126:  BCF    F8C.3
....................    // envia a primeira parte do byte 
....................    lcd_envia_nibble(dado >> 4); 
1128:  SWAPF  55,W
112A:  MOVWF  56
112C:  MOVLW  0F
112E:  ANDWF  56,F
1130:  MOVFF  56,57
1134:  RCALL  10D4
....................    // envia a segunda parte do byte 
....................    lcd_envia_nibble(dado & 0x0f); 
1136:  MOVF   55,W
1138:  ANDLW  0F
113A:  MOVWF  56
113C:  MOVWF  57
113E:  RCALL  10D4
1140:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicializa��o do display 
.................... { 
....................    byte conta; 
....................    output_low(lcd_d4); 
*
142A:  BCF    F95.4
142C:  BCF    F8C.4
....................    output_low(lcd_d5); 
142E:  BCF    F95.5
1430:  BCF    F8C.5
....................    output_low(lcd_d6); 
1432:  BCF    F95.6
1434:  BCF    F8C.6
....................    output_low(lcd_d7); 
1436:  BCF    F95.7
1438:  BCF    F8C.7
....................    output_low(lcd_rs); 
143A:  BCF    F95.2
143C:  BCF    F8C.2
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_low(lcd_enable); 
143E:  BCF    F95.3
1440:  BCF    F8C.3
1442:  CLRF   16
1444:  BTFSC  FF2.7
1446:  BSF    16.7
1448:  BCF    FF2.7
....................    delay_ms(15); 
144A:  MOVLW  0F
144C:  MOVWF  50
144E:  RCALL  1142
1450:  BTFSC  16.7
1452:  BSF    FF2.7
....................    // envia uma seq��ncia de 3 vezes 0x03 
....................    // e depois 0x02 para configurar o m�dulo 
....................    // para modo de 4 bits 
....................    for(conta=1;conta<=3;++conta) 
1454:  MOVLW  01
1456:  MOVWF  29
1458:  MOVF   29,W
145A:  SUBLW  03
145C:  BNC   1486
145E:  CLRF   16
1460:  BTFSC  FF2.7
1462:  BSF    16.7
1464:  BCF    FF2.7
....................    { 
....................       lcd_envia_nibble(3); 
1466:  MOVLW  03
1468:  MOVWF  57
146A:  RCALL  10D4
146C:  BTFSC  16.7
146E:  BSF    FF2.7
1470:  CLRF   16
1472:  BTFSC  FF2.7
1474:  BSF    16.7
1476:  BCF    FF2.7
....................       delay_ms(5); 
1478:  MOVLW  05
147A:  MOVWF  50
147C:  RCALL  1142
147E:  BTFSC  16.7
1480:  BSF    FF2.7
1482:  INCF   29,F
1484:  BRA    1458
1486:  CLRF   16
1488:  BTFSC  FF2.7
148A:  BSF    16.7
148C:  BCF    FF2.7
....................    } 
....................    lcd_envia_nibble(2); 
148E:  MOVLW  02
1490:  MOVWF  57
1492:  RCALL  10D4
1494:  BTFSC  16.7
1496:  BSF    FF2.7
....................    // envia string de inicializa��o do display 
....................    for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
1498:  CLRF   29
149A:  MOVF   29,W
149C:  SUBLW  03
149E:  BNC   14C8
14A0:  CLRF   03
14A2:  MOVF   29,W
14A4:  MOVFF  FF2,2A
14A8:  BCF    FF2.7
14AA:  RCALL  1096
14AC:  BTFSC  2A.7
14AE:  BSF    FF2.7
14B0:  MOVWF  2A
14B2:  CLRF   16
14B4:  BTFSC  FF2.7
14B6:  BSF    16.7
14B8:  BCF    FF2.7
14BA:  CLRF   54
14BC:  MOVWF  55
14BE:  RCALL  110E
14C0:  BTFSC  16.7
14C2:  BSF    FF2.7
14C4:  INCF   29,F
14C6:  BRA    149A
14C8:  GOTO   1514 (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
116A:  DECFSZ 51,W
116C:  BRA    1170
116E:  BRA    1176
....................       endereco = lcd_seg_lin; 
1170:  MOVLW  40
1172:  MOVWF  52
1174:  BRA    1178
....................    else 
....................       endereco = 0; 
1176:  CLRF   52
....................    endereco += x-1; 
1178:  MOVLW  01
117A:  SUBWF  50,W
117C:  ADDWF  52,F
....................    lcd_envia_byte(0,0x80|endereco); 
117E:  MOVF   52,W
1180:  IORLW  80
1182:  MOVWF  53
1184:  CLRF   54
1186:  MOVWF  55
1188:  RCALL  110E
118A:  RETURN 0
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
118C:  MOVF   4F,W
118E:  XORLW  0C
1190:  BZ    11A0
1192:  XORLW  06
1194:  BZ    11B0
1196:  XORLW  07
1198:  BZ    11B0
119A:  XORLW  05
119C:  BZ    11BC
119E:  BRA    11C6
....................    { 
....................      case '\f'    :   lcd_envia_byte(0,1); 
11A0:  CLRF   54
11A2:  MOVLW  01
11A4:  MOVWF  55
11A6:  RCALL  110E
....................               delay_ms(2); 
11A8:  MOVLW  02
11AA:  MOVWF  50
11AC:  RCALL  1142
....................             break; 
11AE:  BRA    11D0
....................      case '\n'   : 
....................      case '\r'    :   lcd_pos_xy(1,2); 
11B0:  MOVLW  01
11B2:  MOVWF  50
11B4:  MOVLW  02
11B6:  MOVWF  51
11B8:  RCALL  116A
....................               break; 
11BA:  BRA    11D0
....................      case '\b'    :   lcd_envia_byte(0,0x10); 
11BC:  CLRF   54
11BE:  MOVLW  10
11C0:  MOVWF  55
11C2:  RCALL  110E
....................               break; 
11C4:  BRA    11D0
....................      default   :   lcd_envia_byte(1,c); 
11C6:  MOVLW  01
11C8:  MOVWF  54
11CA:  MOVFF  4F,55
11CE:  RCALL  110E
....................               break; 
....................    } 
11D0:  RETURN 0
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
....................    char valor; 
....................    // seleciona a posi��o do caractere 
....................    lcd_pos_xy(x,y); 
....................    // ativa rs 
....................    output_high(lcd_rs); 
....................    // l� o caractere 
....................    valor = lcd_le_byte(); 
....................    // desativa rs 
....................    output_low(lcd_rs); 
....................    // retorna o valor do caractere 
....................    return valor; 
.................... } 
....................  
.................... void lcd_apaga() 
.................... { 
....................    lcd_envia_byte(0,1); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_cursor_on() 
....................     { 
.................... lcd_envia_byte(0,0x0E); 
....................     } 
....................  
.................... void lcd_cursor_pisca() 
....................     { 
.................... lcd_envia_byte(0,0x0F); 
....................     } 
....................  
.................... void lcd_cursor_off() 
....................     { 
....................  lcd_envia_byte(0,0x0C); 
....................     } 
....................  
.................... void lcd_corre_esquerda() 
....................     { 
....................  lcd_envia_byte(0,0x18); 
....................     } 
....................  
.................... void lcd_corre_direita() 
....................     { 
.................... lcd_envia_byte(0,0x1C); 
....................     } 
....................  
....................  
....................  
.................... #define button1 pin_a4 
.................... #define button2 pin_a5 
.................... #define button3 pin_e0 
.................... #define button4 pin_e1 
....................  
.................... int running; 
....................  
.................... //extremo esquerda, centro esquerda, centro direita, extrema direita 
.................... int16 ad1, ad2, ad3, ad4; 
.................... int16 timerBase = 1; 
.................... int8 adCounter; 
....................  
.................... ///Em qual decisão ele ta 
.................... int8 decisionCounter = 0; 
.................... ///Isso aqui serve para ele so contabilizar as tomadas de decisão a cadada 200ms (no timerBase) 
.................... int8 decisionInCoolDown = 0; 
....................  
.................... //Quantos porcento pra um lado ele pode estar antes de ser considerado desalinhado 
.................... float alignRatio = 0.7f; 
....................  
.................... void ClearScreen(); 
.................... void Setup(); 
.................... void AndarReto(); 
.................... ///Se tiver retorna 1 
.................... int8 IsCenterAlign(); 
.................... int8 IsCenterAndNotMargins(); 
.................... int8 IsCenterInside(); 
.................... int8 IsMarginsInside(); 
.................... int8 IsMarginsOutside(); 
.................... int8 IsAllOutside(); 
.................... ///Curva a direita 
.................... int8 IsRight(); 
.................... int8 IsLeft(); 
.................... int8 IsAllAlign(); 
.................... ///uma linha preta sobre todos 
.................... void Align(); 
.................... void InvertedAlign(); 
....................  
.................... #int_timer0 
.................... void timerTick() 
.................... { 
....................     if (adCounter == 0) 
*
12CC:  MOVF   22,F
12CE:  BNZ   12E0
....................     { 
....................         ad1 = read_adc(); 
12D0:  BSF    FC2.1
12D2:  BTFSC  FC2.1
12D4:  BRA    12D2
12D6:  MOVFF  FC3,18
12DA:  MOVFF  FC4,19
....................     } 
12DE:  BRA    131E
....................     else if (adCounter == 1) 
12E0:  DECFSZ 22,W
12E2:  BRA    12F4
....................     { 
....................         ad2 = read_adc(); 
12E4:  BSF    FC2.1
12E6:  BTFSC  FC2.1
12E8:  BRA    12E6
12EA:  MOVFF  FC3,1A
12EE:  MOVFF  FC4,1B
....................     } 
12F2:  BRA    131E
....................     else if (adCounter == 2) 
12F4:  MOVF   22,W
12F6:  SUBLW  02
12F8:  BNZ   130A
....................     { 
....................         ad3 = read_adc(); 
12FA:  BSF    FC2.1
12FC:  BTFSC  FC2.1
12FE:  BRA    12FC
1300:  MOVFF  FC3,1C
1304:  MOVFF  FC4,1D
....................     } 
1308:  BRA    131E
....................     else if (adCounter == 3) 
130A:  MOVF   22,W
130C:  SUBLW  03
130E:  BNZ   131E
....................     { 
....................         ad4 = read_adc(); 
1310:  BSF    FC2.1
1312:  BTFSC  FC2.1
1314:  BRA    1312
1316:  MOVFF  FC3,1E
131A:  MOVFF  FC4,1F
....................     } 
....................     if (timerBase == 2000) 
131E:  MOVF   20,W
1320:  SUBLW  D0
1322:  BNZ   136E
1324:  MOVF   21,W
1326:  SUBLW  07
1328:  BNZ   136E
....................     { 
....................         timerBase = 0; 
132A:  CLRF   21
132C:  CLRF   20
....................         ClearScreen(); 
132E:  BRA    11D2
....................         lcd_pos_xy(1, 1); 
1330:  MOVLW  01
1332:  MOVWF  50
1334:  MOVWF  51
1336:  RCALL  116A
....................         // printf(lcd_escreve, "1: "); 
....................         // printf(lcd_escreve, "%04ld", ad1); 
....................         // printf(lcd_escreve, " 2: "); 
....................         // printf(lcd_escreve, "%04ld", ad2); 
....................         // lcd_pos_xy(1, 2); 
....................         // printf(lcd_escreve, "3: "); 
....................         // printf(lcd_escreve, "%04ld", ad3); 
....................         // printf(lcd_escreve, " 4: "); 
....................         // printf(lcd_escreve, "%04ld", ad3); 
....................         printf(lcd_escreve, " d: %d", decisionCounter); 
1338:  MOVLW  96
133A:  MOVWF  FF6
133C:  MOVLW  13
133E:  MOVWF  FF7
1340:  MOVLW  04
1342:  MOVWF  49
1344:  RCALL  11DC
1346:  MOVFF  23,49
134A:  MOVLW  18
134C:  MOVWF  4A
134E:  RCALL  1222
....................         printf(lcd_escreve, " c: %d", decisionInCoolDown); 
1350:  MOVLW  9E
1352:  MOVWF  FF6
1354:  MOVLW  13
1356:  MOVWF  FF7
1358:  MOVLW  04
135A:  MOVWF  49
135C:  RCALL  11DC
135E:  MOVFF  24,49
1362:  MOVLW  18
1364:  MOVWF  4A
1366:  RCALL  1222
....................  
....................         if (decisionInCoolDown > 0) 
1368:  MOVF   24,F
136A:  BZ    136E
....................         { 
....................             decisionInCoolDown--; 
136C:  DECF   24,F
....................         } 
....................     } 
....................     timerBase++; 
136E:  INCF   20,F
1370:  BTFSC  FD8.2
1372:  INCF   21,F
....................     adCounter++; 
1374:  INCF   22,F
....................  
....................     if (adCounter > 4) 
1376:  MOVF   22,W
1378:  SUBLW  04
137A:  BC    137E
....................     { 
....................         adCounter = 0; 
137C:  CLRF   22
....................     } 
....................  
....................     set_adc_channel(adCounter); 
137E:  RLCF   22,W
1380:  MOVWF  00
1382:  RLCF   00,F
1384:  MOVLW  FC
1386:  ANDWF  00,F
1388:  MOVF   FC2,W
138A:  ANDLW  C3
138C:  IORWF  00,W
138E:  MOVWF  FC2
1390:  BCF    FF2.2
1392:  GOTO   1054
.................... } 
....................  
.................... void main() 
*
23D4:  CLRF   FF8
23D6:  BCF    FD0.7
23D8:  BSF    07.7
23DA:  CLRF   21
23DC:  MOVLW  01
23DE:  MOVWF  20
23E0:  CLRF   23
23E2:  CLRF   24
23E4:  MOVLW  33
23E6:  MOVWF  28
23E8:  MOVWF  27
23EA:  MOVWF  26
23EC:  MOVLW  7E
23EE:  MOVWF  25
23F0:  MOVF   FC1,W
23F2:  ANDLW  C0
23F4:  IORLW  0F
23F6:  MOVWF  FC1
23F8:  MOVLW  07
23FA:  MOVWF  FB4
.................... { 
....................     Setup(); 
23FC:  GOTO   14EC
2400:  CLRF   16
2402:  BTFSC  FF2.7
2404:  BSF    16.7
2406:  BCF    FF2.7
....................     lcd_pos_xy(1, 1); 
2408:  MOVLW  01
240A:  MOVWF  50
240C:  MOVWF  51
240E:  CALL   116A
2412:  BTFSC  16.7
2414:  BSF    FF2.7
2416:  CLRF   16
2418:  BTFSC  FF2.7
241A:  BSF    16.7
241C:  BCF    FF2.7
....................     delay_ms(5); 
241E:  MOVLW  05
2420:  MOVWF  50
2422:  CALL   1142
2426:  BTFSC  16.7
2428:  BSF    FF2.7
....................     printf(lcd_escreve, " Inicializando"); 
242A:  MOVLW  A6
242C:  MOVWF  FF6
242E:  MOVLW  13
2430:  MOVWF  FF7
2432:  CALL   151A
....................     delay_ms(1000); 
2436:  MOVLW  04
2438:  MOVWF  29
243A:  CLRF   16
243C:  BTFSC  FF2.7
243E:  BSF    16.7
2440:  BCF    FF2.7
2442:  MOVLW  FA
2444:  MOVWF  50
2446:  CALL   1142
244A:  BTFSC  16.7
244C:  BSF    FF2.7
244E:  DECFSZ 29,F
2450:  BRA    243A
....................     do 
....................     { 
....................         if (input(button1) == 0) 
2452:  BSF    F92.4
2454:  BTFSC  F80.4
2456:  BRA    245C
....................         { 
....................             running = 1; 
2458:  MOVLW  01
245A:  MOVWF  17
....................         } 
....................         if (input(button2) == 0) 
245C:  BSF    F92.5
245E:  BTFSC  F80.5
2460:  BRA    2464
....................         { 
....................             running = 0; 
2462:  CLRF   17
....................         } 
....................         if (decisionCounter == 0) 
2464:  MOVF   23,F
2466:  BNZ   24AA
....................         { 
....................             ///Esperar até ser colocado na linha de partida 
....................             if (IsAllAlign()) 
2468:  CALL   1546
246C:  MOVF   01,F
246E:  BZ    24A0
2470:  CLRF   16
2472:  BTFSC  FF2.7
2474:  BSF    16.7
2476:  BCF    FF2.7
....................             { 
....................                 lcd_pos_xy(1, 2); 
2478:  MOVLW  01
247A:  MOVWF  50
247C:  MOVLW  02
247E:  MOVWF  51
2480:  CALL   116A
2484:  BTFSC  16.7
2486:  BSF    FF2.7
....................                 printf(lcd_escreve, "TA NA POSICAO"); 
2488:  MOVLW  B6
248A:  MOVWF  FF6
248C:  MOVLW  13
248E:  MOVWF  FF7
2490:  CALL   151A
....................                 if (running) 
2494:  MOVF   17,F
2496:  BZ    249E
....................                 { 
....................                     decisionCounter++; 
2498:  INCF   23,F
....................                     decisionInCoolDown = 5; 
249A:  MOVLW  05
249C:  MOVWF  24
....................                 } 
....................             } 
249E:  BRA    24A8
....................             else 
....................             { 
....................                 if (running) 
24A0:  MOVF   17,F
24A2:  BZ    24A8
....................                 { 
....................                     Align(); 
24A4:  CALL   1C02
....................                 } 
....................             } 
....................         } 
24A8:  BRA    2784
....................         else if (decisionCounter == 1 && running) 
24AA:  DECFSZ 23,W
24AC:  BRA    2500
24AE:  MOVF   17,F
24B0:  BZ    2500
....................         { 
....................             ///Se alinha ate achar a curva a direita 
....................             Align(); 
24B2:  CALL   1C02
....................             if (IsRight() && !decisionInCoolDown) 
24B6:  RCALL  1E84
24B8:  MOVF   01,F
24BA:  BZ    24FE
24BC:  MOVF   24,F
24BE:  BNZ   24FE
....................             { 
....................                 ///Começa a fazer a curva a direita girando um pouco para a direita e dando uma ré 
....................                 SetLeft(900); 
24C0:  MOVLW  03
24C2:  MOVWF  36
24C4:  MOVLW  84
24C6:  MOVWF  35
24C8:  CALL   1BA0
....................                 SetRight(950); 
24CC:  MOVLW  03
24CE:  MOVWF  36
24D0:  MOVLW  B6
24D2:  MOVWF  35
24D4:  CALL   1BC8
....................                 RightBackwardLeftForward(); 
24D8:  CALL   17FA
....................                 delay_ms(400); 
24DC:  MOVLW  02
24DE:  MOVWF  29
24E0:  CLRF   16
24E2:  BTFSC  FF2.7
24E4:  BSF    16.7
24E6:  BCF    FF2.7
24E8:  MOVLW  C8
24EA:  MOVWF  50
24EC:  CALL   1142
24F0:  BTFSC  16.7
24F2:  BSF    FF2.7
24F4:  DECFSZ 29,F
24F6:  BRA    24E0
....................                 decisionCounter++; 
24F8:  INCF   23,F
....................                 decisionInCoolDown = 5; 
24FA:  MOVLW  05
24FC:  MOVWF  24
....................             } 
....................         } 
24FE:  BRA    2784
....................         else if (decisionCounter == 2 && running) 
2500:  MOVF   23,W
2502:  SUBLW  02
2504:  BNZ   251C
2506:  MOVF   17,F
2508:  BZ    251C
....................         { 
....................             if (IsCenterAlign() && !decisionInCoolDown) 
250A:  BRA    1ED0
250C:  MOVF   01,F
250E:  BZ    251A
2510:  MOVF   24,F
2512:  BNZ   251A
....................             { 
....................                 decisionCounter++; 
2514:  INCF   23,F
....................                 decisionInCoolDown = 5; 
2516:  MOVLW  05
2518:  MOVWF  24
....................             } 
....................             else 
....................             { 
....................                 ///Continua Girando do jeito que estava ate ficar com os 2 sensores no centro 
....................             } 
....................         } 
251A:  BRA    2784
....................         else if (decisionCounter == 3) 
251C:  MOVF   23,W
251E:  SUBLW  03
2520:  BNZ   2572
....................         { 
....................             ///Anda alinhado até achar a linha preta 
....................             Align(); 
2522:  CALL   1C02
....................             if (IsAllAlign() && !decisionInCoolDown) 
2526:  CALL   1546
252A:  MOVF   01,F
252C:  BZ    2570
252E:  MOVF   24,F
2530:  BNZ   2570
....................             { 
....................                 SetLeft(900); 
2532:  MOVLW  03
2534:  MOVWF  36
2536:  MOVLW  84
2538:  MOVWF  35
253A:  CALL   1BA0
....................                 SetRight(950); 
253E:  MOVLW  03
2540:  MOVWF  36
2542:  MOVLW  B6
2544:  MOVWF  35
2546:  CALL   1BC8
....................                 RightBackwardLeftForward(); 
254A:  CALL   17FA
....................                 delay_ms(500); 
254E:  MOVLW  02
2550:  MOVWF  29
2552:  CLRF   16
2554:  BTFSC  FF2.7
2556:  BSF    16.7
2558:  BCF    FF2.7
255A:  MOVLW  FA
255C:  MOVWF  50
255E:  CALL   1142
2562:  BTFSC  16.7
2564:  BSF    FF2.7
2566:  DECFSZ 29,F
2568:  BRA    2552
....................                 decisionCounter++; 
256A:  INCF   23,F
....................                 decisionInCoolDown = 25; 
256C:  MOVLW  19
256E:  MOVWF  24
....................             } 
....................         } 
2570:  BRA    2784
....................         else if (decisionCounter == 4) 
2572:  MOVF   23,W
2574:  SUBLW  04
2576:  BNZ   2590
....................         { 
....................             ///Primeira linha de parada 
....................             Align(); 
2578:  CALL   1C02
....................             if (IsAllAlign() && !decisionInCoolDown) 
257C:  CALL   1546
2580:  MOVF   01,F
2582:  BZ    258E
2584:  MOVF   24,F
2586:  BNZ   258E
....................             { 
....................                 decisionCounter++; 
2588:  INCF   23,F
....................                 decisionInCoolDown = 10; 
258A:  MOVLW  0A
258C:  MOVWF  24
....................             } 
....................         } 
258E:  BRA    2784
....................         else if (decisionCounter == 5) 
2590:  MOVF   23,W
2592:  SUBLW  05
2594:  BNZ   25D2
....................         { 
....................             ///Logo após passar a primeira linha de parada, anda alinhado até o decisioninCoolDown e para 
....................             Align(); 
2596:  CALL   1C02
....................             if (!decisionInCoolDown) 
259A:  MOVF   24,F
259C:  BNZ   25D0
....................             { 
....................                 SetBothPwm(0); 
259E:  CLRF   36
25A0:  CLRF   35
25A2:  CALL   179A
....................                 delay_ms(2000); 
25A6:  MOVLW  08
25A8:  MOVWF  29
25AA:  CLRF   16
25AC:  BTFSC  FF2.7
25AE:  BSF    16.7
25B0:  BCF    FF2.7
25B2:  MOVLW  FA
25B4:  MOVWF  50
25B6:  CALL   1142
25BA:  BTFSC  16.7
25BC:  BSF    FF2.7
25BE:  DECFSZ 29,F
25C0:  BRA    25AA
....................                 SetBothPwm(920); 
25C2:  MOVLW  03
25C4:  MOVWF  36
25C6:  MOVLW  98
25C8:  MOVWF  35
25CA:  CALL   179A
....................                 decisionCounter++; 
25CE:  INCF   23,F
....................             } 
....................         } 
25D0:  BRA    2784
....................         else if (decisionCounter == 6) 
25D2:  MOVF   23,W
25D4:  SUBLW  06
25D6:  BNZ   25F0
....................         { 
....................             ///Logo após sair da parada, anda alinhado até achar a proxima linha completa 
....................             Align(); 
25D8:  CALL   1C02
....................             if (IsAllAlign() && !decisionInCoolDown) 
25DC:  CALL   1546
25E0:  MOVF   01,F
25E2:  BZ    25EE
25E4:  MOVF   24,F
25E6:  BNZ   25EE
....................             { 
....................                 decisionCounter++; 
25E8:  INCF   23,F
....................                 decisionInCoolDown = 5; 
25EA:  MOVLW  05
25EC:  MOVWF  24
....................             } 
....................         } 
25EE:  BRA    2784
....................         else if (decisionCounter == 7) 
25F0:  MOVF   23,W
25F2:  SUBLW  07
25F4:  BNZ   260A
....................         { 
....................             ///Passou pela linha completa do desafio de parar anda alinhado até a linha da esquerda do desafio de andar invertido 
....................             Align(); 
25F6:  CALL   1C02
....................             if (IsLeft() && !decisionInCoolDown) 
25FA:  RCALL  2012
25FC:  MOVF   01,F
25FE:  BZ    2608
2600:  MOVF   24,F
2602:  BNZ   2608
....................             { 
....................                 decisionCounter++; 
2604:  INCF   23,F
....................                 decisionInCoolDown = 0; 
2606:  CLRF   24
....................             } 
....................         } 
2608:  BRA    2784
....................         else if (decisionCounter == 8) 
260A:  MOVF   23,W
260C:  SUBLW  08
260E:  BNZ   2626
....................         { 
....................             ///Anda alinhado até chegar no desafio da linha invertida, a linha invertida começa quando o centro esta fora e as extremidades dentro 
....................  
....................             /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
....................             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
....................                 FREDERICO, TALVEZ AQUI SEJA BOM 
....................                 ALINHAR COM UM VALOR MENOR DE PWM 
....................                 OU ALINHAR DE FORMA MAIS SENSIVEL 
....................             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
....................             */ 
....................             Align(); 
2610:  CALL   1C02
....................             if (IsMarginsInside() && !decisionInCoolDown) 
2614:  BRA    205E
2616:  MOVF   01,F
2618:  BZ    2624
261A:  MOVF   24,F
261C:  BNZ   2624
....................             { 
....................                 ///Iniciou o desafio de linha invertido 
....................                 decisionCounter++; 
261E:  INCF   23,F
....................                 decisionInCoolDown = 20; 
2620:  MOVLW  14
2622:  MOVWF  24
....................             } 
....................         } 
2624:  BRA    2784
....................         else if (decisionCounter == 9) 
2626:  MOVF   23,W
2628:  SUBLW  09
262A:  BNZ   2640
....................         { 
....................             ///Desafio da linha invertida 
....................             InvertedAlign(); 
262C:  BRA    208E
....................             ///Anda ate não ter linha nas extremidades 
....................             if (IsMarginsOutside() && !decisionInCoolDown) 
262E:  BRA    2330
2630:  MOVF   01,F
2632:  BZ    263E
2634:  MOVF   24,F
2636:  BNZ   263E
....................             { 
....................                 decisionCounter++; 
2638:  INCF   23,F
....................                 decisionInCoolDown = 5; 
263A:  MOVLW  05
263C:  MOVWF  24
....................             } 
....................         } 
263E:  BRA    2784
....................         else if (decisionCounter == 10) 
2640:  MOVF   23,W
2642:  SUBLW  0A
2644:  BNZ   265C
....................         { 
....................             ///Fim do desafio de linha invertida 
....................             Align(); 
2646:  CALL   1C02
....................             if (IsLeft() && !decisionInCoolDown) 
264A:  RCALL  2012
264C:  MOVF   01,F
264E:  BZ    265A
2650:  MOVF   24,F
2652:  BNZ   265A
....................             { 
....................                 decisionCounter++; 
2654:  INCF   23,F
....................                 decisionInCoolDown = 8; 
2656:  MOVLW  08
2658:  MOVWF  24
....................             } 
....................         } 
265A:  BRA    2784
....................         ///11 e 12 curva esquerda 
....................         else if (decisionCounter == 11) 
265C:  MOVF   23,W
265E:  SUBLW  0B
2660:  BNZ   26B0
....................         { 
....................             ///Curva 90 graus a esquerda 
....................             Align(); 
2662:  CALL   1C02
....................             if (IsLeft() && !decisionInCoolDown) 
2666:  RCALL  2012
2668:  MOVF   01,F
266A:  BZ    26AE
266C:  MOVF   24,F
266E:  BNZ   26AE
....................             { 
....................                 ///TODO: Curva esquerda 
....................                 SetLeft(950); 
2670:  MOVLW  03
2672:  MOVWF  36
2674:  MOVLW  B6
2676:  MOVWF  35
2678:  CALL   1BA0
....................                 SetRight(900); 
267C:  MOVLW  03
267E:  MOVWF  36
2680:  MOVLW  84
2682:  MOVWF  35
2684:  CALL   1BC8
....................                 LeftBackwardRightForward(); 
2688:  CALL   17E8
....................                 delay_ms(500); 
268C:  MOVLW  02
268E:  MOVWF  29
2690:  CLRF   16
2692:  BTFSC  FF2.7
2694:  BSF    16.7
2696:  BCF    FF2.7
2698:  MOVLW  FA
269A:  MOVWF  50
269C:  CALL   1142
26A0:  BTFSC  16.7
26A2:  BSF    FF2.7
26A4:  DECFSZ 29,F
26A6:  BRA    2690
....................                 decisionCounter++; 
26A8:  INCF   23,F
....................                 decisionInCoolDown = 25; 
26AA:  MOVLW  19
26AC:  MOVWF  24
....................             } 
....................         } 
26AE:  BRA    2784
....................         else if (decisionCounter == 12) 
26B0:  MOVF   23,W
26B2:  SUBLW  0C
26B4:  BNZ   26CC
....................         { 
....................  
....................             Align(); 
26B6:  CALL   1C02
....................             if (IsLeft() && !decisionInCoolDown) 
26BA:  RCALL  2012
26BC:  MOVF   01,F
26BE:  BZ    26CA
26C0:  MOVF   24,F
26C2:  BNZ   26CA
....................             { 
....................                 decisionCounter++; 
26C4:  INCF   23,F
....................                 decisionInCoolDown = 5; 
26C6:  MOVLW  05
26C8:  MOVWF  24
....................             } 
....................         } 
26CA:  BRA    2784
....................         else if (decisionCounter == 13) 
26CC:  MOVF   23,W
26CE:  SUBLW  0D
26D0:  BNZ   26E8
....................         { 
....................             ///Desafio de andar cego 
....................             ///!!!!!!!!!!   AQUI ELE TERIA QUE ESTAR MUITO BEM ALINHADO, SERIA BOM TER A FUNÇÃO DE ALINHAR E COLOCAR PARA ALINHAR BEM AQUI 
....................             Align(); 
26D2:  CALL   1C02
....................             if (IsAllOutside() && !decisionInCoolDown) 
26D6:  BRA    235C
26D8:  MOVF   01,F
26DA:  BZ    26E6
26DC:  MOVF   24,F
26DE:  BNZ   26E6
....................             { 
....................                 decisionCounter++; 
26E0:  INCF   23,F
....................                 decisionInCoolDown = 25; 
26E2:  MOVLW  19
26E4:  MOVWF  24
....................             } 
....................         } 
26E6:  BRA    2784
....................         else if(decisionCounter == 14) 
26E8:  MOVF   23,W
26EA:  SUBLW  0E
26EC:  BNZ   2710
....................         { 
....................             ///ESTA NO DESAFIO DE ANDAR SEM LINHA 
....................             SetBothPwm(870); 
26EE:  MOVLW  03
26F0:  MOVWF  36
26F2:  MOVLW  66
26F4:  MOVWF  35
26F6:  CALL   179A
....................             if(IsCenterInside() && !decisionInCoolDown) 
26FA:  BRA    23A4
26FC:  MOVF   01,F
26FE:  BZ    270E
2700:  MOVF   24,F
2702:  BNZ   270E
....................             { 
....................                 Align(); 
2704:  CALL   1C02
....................                 decisionCounter++; 
2708:  INCF   23,F
....................                 decisionInCoolDown = 5; 
270A:  MOVLW  05
270C:  MOVWF  24
....................             } 
....................         } 
270E:  BRA    2784
....................         else if(decisionCounter == 15) 
2710:  MOVF   23,W
2712:  SUBLW  0F
2714:  BNZ   272C
....................         { 
....................             ///Passou pelo desafio de andar sem linha 
....................             Align(); 
2716:  CALL   1C02
....................             if(IsLeft() && !decisionInCoolDown) 
271A:  RCALL  2012
271C:  MOVF   01,F
271E:  BZ    272A
2720:  MOVF   24,F
2722:  BNZ   272A
....................             { 
....................                 decisionCounter++; 
2724:  INCF   23,F
....................                 decisionInCoolDown = 8; 
2726:  MOVLW  08
2728:  MOVWF  24
....................             } 
....................         } 
272A:  BRA    2784
....................         else if(decisionCounter == 16) 
272C:  MOVF   23,W
272E:  SUBLW  10
2730:  BNZ   274A
....................         { 
....................             Align(); 
2732:  CALL   1C02
....................             if(IsRight() && !decisionInCoolDown) 
2736:  CALL   1E84
273A:  MOVF   01,F
273C:  BZ    2748
273E:  MOVF   24,F
2740:  BNZ   2748
....................             { 
....................                 decisionCounter++; 
2742:  INCF   23,F
....................                 decisionInCoolDown = 8; 
2744:  MOVLW  08
2746:  MOVWF  24
....................             } 
....................         } 
2748:  BRA    2784
....................         else if(decisionCounter == 17) 
274A:  MOVF   23,W
274C:  SUBLW  11
274E:  BNZ   277C
....................         { 
....................             ///TODO: desvia do desafio de remover o bloco 
....................            SetBothPwm(0); 
2750:  CLRF   36
2752:  CLRF   35
2754:  CALL   179A
2758:  CLRF   16
275A:  BTFSC  FF2.7
275C:  BSF    16.7
275E:  BCF    FF2.7
....................            lcd_pos_xy(1,1); 
2760:  MOVLW  01
2762:  MOVWF  50
2764:  MOVWF  51
2766:  CALL   116A
276A:  BTFSC  16.7
276C:  BSF    FF2.7
....................            printf(lcd_escreve, "Fim do programado"); 
276E:  MOVLW  C4
2770:  MOVWF  FF6
2772:  MOVLW  13
2774:  MOVWF  FF7
2776:  CALL   151A
....................         } 
277A:  BRA    2784
....................  
....................         else 
....................         { 
....................             ///Se ja passou por todas as decisões 
....................             SetBothPwm(0); 
277C:  CLRF   36
277E:  CLRF   35
2780:  CALL   179A
....................         } 
....................  
....................         if (running == 0) 
2784:  MOVF   17,F
2786:  BNZ   2798
....................         { 
....................             SetBothPwm(0); 
2788:  CLRF   36
278A:  CLRF   35
278C:  CALL   179A
....................             SetBothPwm(0); 
2790:  CLRF   36
2792:  CLRF   35
2794:  CALL   179A
....................         } 
....................     } while (1); 
2798:  BRA    2452
.................... } 
.................... int8 IsCenterAlign() 
*
1ED0:  MOVFF  1B,3A
1ED4:  MOVFF  1A,39
1ED8:  CALL   1594
1EDC:  MOVFF  03,34
1EE0:  MOVFF  02,33
1EE4:  MOVFF  01,32
1EE8:  MOVFF  00,31
1EEC:  MOVF   1A,W
1EEE:  ADDWF  18,W
1EF0:  MOVWF  01
1EF2:  MOVF   1B,W
1EF4:  ADDWFC 19,W
1EF6:  MOVWF  03
1EF8:  MOVFF  01,39
1EFC:  MOVWF  3A
1EFE:  CALL   1594
1F02:  MOVFF  34,3C
1F06:  MOVFF  33,3B
1F0A:  MOVFF  32,3A
1F0E:  MOVFF  31,39
1F12:  MOVFF  03,40
1F16:  MOVFF  02,3F
1F1A:  MOVFF  01,3E
1F1E:  MOVFF  00,3D
1F22:  CALL   15CA
1F26:  MOVFF  03,2C
1F2A:  MOVFF  02,2B
1F2E:  MOVFF  01,2A
1F32:  MOVFF  00,29
1F36:  MOVFF  1D,3A
1F3A:  MOVFF  1C,39
1F3E:  CALL   1594
1F42:  MOVFF  03,34
1F46:  MOVFF  02,33
1F4A:  MOVFF  01,32
1F4E:  MOVFF  00,31
1F52:  MOVF   1A,W
1F54:  ADDWF  18,W
1F56:  MOVWF  01
1F58:  MOVF   1B,W
1F5A:  ADDWFC 19,W
1F5C:  MOVWF  03
1F5E:  MOVFF  01,39
1F62:  MOVWF  3A
1F64:  CALL   1594
1F68:  MOVFF  34,3C
1F6C:  MOVFF  33,3B
1F70:  MOVFF  32,3A
1F74:  MOVFF  31,39
1F78:  MOVFF  03,40
1F7C:  MOVFF  02,3F
1F80:  MOVFF  01,3E
1F84:  MOVFF  00,3D
1F88:  CALL   15CA
1F8C:  MOVFF  03,30
1F90:  MOVFF  02,2F
1F94:  MOVFF  01,2E
1F98:  MOVFF  00,2D
*
279A:  SLEEP 
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad1 + ad2); 
....................     float ad3Ratio = (float)ad3 / (float)(ad1 + ad2); 
....................     if (ad2 + ad3 > 300 && ad2Ratio < alignRatio && ad3Ratio < alignRatio) 
*
1F9C:  MOVF   1C,W
1F9E:  ADDWF  1A,W
1FA0:  MOVWF  31
1FA2:  MOVF   1D,W
1FA4:  ADDWFC 1B,W
1FA6:  MOVWF  32
1FA8:  SUBLW  00
1FAA:  BC    200A
1FAC:  XORLW  FF
1FAE:  BNZ   1FB6
1FB0:  MOVF   31,W
1FB2:  SUBLW  2C
1FB4:  BC    200A
1FB6:  MOVFF  2C,38
1FBA:  MOVFF  2B,37
1FBE:  MOVFF  2A,36
1FC2:  MOVFF  29,35
1FC6:  MOVFF  28,3C
1FCA:  MOVFF  27,3B
1FCE:  MOVFF  26,3A
1FD2:  MOVFF  25,39
1FD6:  CALL   1724
1FDA:  BNC   200A
1FDC:  MOVFF  30,38
1FE0:  MOVFF  2F,37
1FE4:  MOVFF  2E,36
1FE8:  MOVFF  2D,35
1FEC:  MOVFF  28,3C
1FF0:  MOVFF  27,3B
1FF4:  MOVFF  26,3A
1FF8:  MOVFF  25,39
1FFC:  CALL   1724
2000:  BNC   200A
....................     { 
....................         return 1; 
2002:  MOVLW  01
2004:  MOVWF  01
2006:  BRA    200E
....................     } 
2008:  BRA    200E
....................     else 
....................     { 
....................         return 0; 
200A:  MOVLW  00
200C:  MOVWF  01
....................     } 
200E:  GOTO   250C (RETURN)
.................... } 
.................... int8 IsRight() 
.................... { 
....................     if (ad1 < 300 && ad2 >= 300 && ad3 >= 300 && ad4 >= 300) 
*
1E84:  MOVF   19,W
1E86:  SUBLW  01
1E88:  BNC   1ECA
1E8A:  BNZ   1E92
1E8C:  MOVF   18,W
1E8E:  SUBLW  2B
1E90:  BNC   1ECA
1E92:  MOVF   1B,W
1E94:  SUBLW  00
1E96:  BC    1ECA
1E98:  XORLW  FF
1E9A:  BNZ   1EA2
1E9C:  MOVF   1A,W
1E9E:  SUBLW  2B
1EA0:  BC    1ECA
1EA2:  MOVF   1D,W
1EA4:  SUBLW  00
1EA6:  BC    1ECA
1EA8:  XORLW  FF
1EAA:  BNZ   1EB2
1EAC:  MOVF   1C,W
1EAE:  SUBLW  2B
1EB0:  BC    1ECA
1EB2:  MOVF   1F,W
1EB4:  SUBLW  00
1EB6:  BC    1ECA
1EB8:  XORLW  FF
1EBA:  BNZ   1EC2
1EBC:  MOVF   1E,W
1EBE:  SUBLW  2B
1EC0:  BC    1ECA
....................     { 
....................         return 1; 
1EC2:  MOVLW  01
1EC4:  MOVWF  01
1EC6:  BRA    1ECE
....................     } 
1EC8:  BRA    1ECE
....................     else 
....................     { 
....................         return 0; 
1ECA:  MOVLW  00
1ECC:  MOVWF  01
....................     } 
1ECE:  RETURN 0
.................... } 
.................... int8 IsCenterAndNotMargins() 
.................... { 
....................     if (ad1 < 300 && ad2 >= 300 && ad3 >= 300 && ad4 < 300) 
....................     { 
....................         return 1; 
....................     } 
....................     else 
....................     { 
....................         return 0; 
....................     } 
.................... } 
.................... int8 IsCenterInside() 
.................... { 
....................     if(ad2 >= 300 && ad3 >= 300) 
*
23A4:  MOVF   1B,W
23A6:  SUBLW  00
23A8:  BC    23CC
23AA:  XORLW  FF
23AC:  BNZ   23B4
23AE:  MOVF   1A,W
23B0:  SUBLW  2B
23B2:  BC    23CC
23B4:  MOVF   1D,W
23B6:  SUBLW  00
23B8:  BC    23CC
23BA:  XORLW  FF
23BC:  BNZ   23C4
23BE:  MOVF   1C,W
23C0:  SUBLW  2B
23C2:  BC    23CC
....................     { 
....................         return 1; 
23C4:  MOVLW  01
23C6:  MOVWF  01
23C8:  BRA    23D0
....................     } 
23CA:  BRA    23D0
....................     else 
....................     { 
....................         return 0; 
23CC:  MOVLW  00
23CE:  MOVWF  01
....................     } 
23D0:  GOTO   26FC (RETURN)
.................... } 
.................... int8 IsMarginsInside() 
.................... { 
....................     if (ad1 >= 300 && ad4 >= 400) 
*
205E:  MOVF   19,W
2060:  SUBLW  00
2062:  BC    2086
2064:  XORLW  FF
2066:  BNZ   206E
2068:  MOVF   18,W
206A:  SUBLW  2B
206C:  BC    2086
206E:  MOVF   1F,W
2070:  SUBLW  00
2072:  BC    2086
2074:  XORLW  FF
2076:  BNZ   207E
2078:  MOVF   1E,W
207A:  SUBLW  8F
207C:  BC    2086
....................     { 
....................         return 1; 
207E:  MOVLW  01
2080:  MOVWF  01
2082:  BRA    208A
....................     } 
2084:  BRA    208A
....................     else 
....................     { 
....................         return 0; 
2086:  MOVLW  00
2088:  MOVWF  01
....................     } 
208A:  GOTO   2616 (RETURN)
.................... } 
.................... int8 IsMarginsOutside() 
.................... { 
....................     if (ad1 < 300 && ad4 < 400) 
*
2330:  MOVF   19,W
2332:  SUBLW  01
2334:  BNC   2354
2336:  BNZ   233E
2338:  MOVF   18,W
233A:  SUBLW  2B
233C:  BNC   2354
233E:  MOVF   1F,W
2340:  SUBLW  01
2342:  BNC   2354
2344:  BNZ   234C
2346:  MOVF   1E,W
2348:  SUBLW  8F
234A:  BNC   2354
....................     { 
....................         return 1; 
234C:  MOVLW  01
234E:  MOVWF  01
2350:  BRA    2358
....................     } 
2352:  BRA    2358
....................     else 
....................     { 
....................         return 0; 
2354:  MOVLW  00
2356:  MOVWF  01
....................     } 
2358:  GOTO   2630 (RETURN)
.................... } 
.................... int8 IsAllOutside() 
.................... { 
....................     if (ad1 < 300 && ad2 < 300 && ad3 < 300 && ad4 < 300) 
235C:  MOVF   19,W
235E:  SUBLW  01
2360:  BNC   239C
2362:  BNZ   236A
2364:  MOVF   18,W
2366:  SUBLW  2B
2368:  BNC   239C
236A:  MOVF   1B,W
236C:  SUBLW  01
236E:  BNC   239C
2370:  BNZ   2378
2372:  MOVF   1A,W
2374:  SUBLW  2B
2376:  BNC   239C
2378:  MOVF   1D,W
237A:  SUBLW  01
237C:  BNC   239C
237E:  BNZ   2386
2380:  MOVF   1C,W
2382:  SUBLW  2B
2384:  BNC   239C
2386:  MOVF   1F,W
2388:  SUBLW  01
238A:  BNC   239C
238C:  BNZ   2394
238E:  MOVF   1E,W
2390:  SUBLW  2B
2392:  BNC   239C
....................     { 
....................         return 1; 
2394:  MOVLW  01
2396:  MOVWF  01
2398:  BRA    23A0
....................     } 
239A:  BRA    23A0
....................     else 
....................     { 
....................         return 0; 
239C:  MOVLW  00
239E:  MOVWF  01
....................     } 
23A0:  GOTO   26D8 (RETURN)
.................... } 
.................... int8 IsLeft() 
.................... { 
....................     if (ad1 >= 300 && ad2 >= 300 && ad3 >= 300 && ad4 < 300) 
*
2012:  MOVF   19,W
2014:  SUBLW  00
2016:  BC    2058
2018:  XORLW  FF
201A:  BNZ   2022
201C:  MOVF   18,W
201E:  SUBLW  2B
2020:  BC    2058
2022:  MOVF   1B,W
2024:  SUBLW  00
2026:  BC    2058
2028:  XORLW  FF
202A:  BNZ   2032
202C:  MOVF   1A,W
202E:  SUBLW  2B
2030:  BC    2058
2032:  MOVF   1D,W
2034:  SUBLW  00
2036:  BC    2058
2038:  XORLW  FF
203A:  BNZ   2042
203C:  MOVF   1C,W
203E:  SUBLW  2B
2040:  BC    2058
2042:  MOVF   1F,W
2044:  SUBLW  01
2046:  BNC   2058
2048:  BNZ   2050
204A:  MOVF   1E,W
204C:  SUBLW  2B
204E:  BNC   2058
....................     { 
....................         return 1; 
2050:  MOVLW  01
2052:  MOVWF  01
2054:  BRA    205C
....................     } 
2056:  BRA    205C
....................     else 
....................     { 
....................         return 0; 
2058:  MOVLW  00
205A:  MOVWF  01
....................     } 
205C:  RETURN 0
.................... } 
.................... int8 IsAllAlign() 
.................... { 
....................     if (ad1 >= 300 && ad2 >= 300 && ad3 >= 300 && ad4 >= 300) 
*
1546:  MOVF   19,W
1548:  SUBLW  00
154A:  BC    158E
154C:  XORLW  FF
154E:  BNZ   1556
1550:  MOVF   18,W
1552:  SUBLW  2B
1554:  BC    158E
1556:  MOVF   1B,W
1558:  SUBLW  00
155A:  BC    158E
155C:  XORLW  FF
155E:  BNZ   1566
1560:  MOVF   1A,W
1562:  SUBLW  2B
1564:  BC    158E
1566:  MOVF   1D,W
1568:  SUBLW  00
156A:  BC    158E
156C:  XORLW  FF
156E:  BNZ   1576
1570:  MOVF   1C,W
1572:  SUBLW  2B
1574:  BC    158E
1576:  MOVF   1F,W
1578:  SUBLW  00
157A:  BC    158E
157C:  XORLW  FF
157E:  BNZ   1586
1580:  MOVF   1E,W
1582:  SUBLW  2B
1584:  BC    158E
....................     { 
....................         return 1; 
1586:  MOVLW  01
1588:  MOVWF  01
158A:  BRA    1592
....................     } 
158C:  BRA    1592
....................     else 
....................     { 
....................         return 0; 
158E:  MOVLW  00
1590:  MOVWF  01
....................     } 
1592:  RETURN 0
.................... } 
....................  
.................... void Align() 
*
1C02:  MOVFF  1B,3A
1C06:  MOVFF  1A,39
1C0A:  RCALL  1594
1C0C:  MOVFF  03,38
1C10:  MOVFF  02,37
1C14:  MOVFF  01,36
1C18:  MOVFF  00,35
1C1C:  MOVF   1C,W
1C1E:  ADDWF  1A,W
1C20:  MOVWF  01
1C22:  MOVF   1D,W
1C24:  ADDWFC 1B,W
1C26:  MOVWF  03
1C28:  MOVFF  01,39
1C2C:  MOVWF  3A
1C2E:  RCALL  1594
1C30:  MOVFF  38,3C
1C34:  MOVFF  37,3B
1C38:  MOVFF  36,3A
1C3C:  MOVFF  35,39
1C40:  MOVFF  03,40
1C44:  MOVFF  02,3F
1C48:  MOVFF  01,3E
1C4C:  MOVFF  00,3D
1C50:  RCALL  15CA
1C52:  MOVFF  03,2C
1C56:  MOVFF  02,2B
1C5A:  MOVFF  01,2A
1C5E:  MOVFF  00,29
1C62:  MOVFF  1D,3A
1C66:  MOVFF  1C,39
1C6A:  RCALL  1594
1C6C:  MOVFF  03,38
1C70:  MOVFF  02,37
1C74:  MOVFF  01,36
1C78:  MOVFF  00,35
1C7C:  MOVF   1C,W
1C7E:  ADDWF  1A,W
1C80:  MOVWF  01
1C82:  MOVF   1D,W
1C84:  ADDWFC 1B,W
1C86:  MOVWF  03
1C88:  MOVFF  01,39
1C8C:  MOVWF  3A
1C8E:  RCALL  1594
1C90:  MOVFF  38,3C
1C94:  MOVFF  37,3B
1C98:  MOVFF  36,3A
1C9C:  MOVFF  35,39
1CA0:  MOVFF  03,40
1CA4:  MOVFF  02,3F
1CA8:  MOVFF  01,3E
1CAC:  MOVFF  00,3D
1CB0:  RCALL  15CA
1CB2:  MOVFF  03,30
1CB6:  MOVFF  02,2F
1CBA:  MOVFF  01,2E
1CBE:  MOVFF  00,2D
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad2 + ad3); 
....................     float ad3Ratio = (float)ad3 / (float)(ad2 + ad3); 
....................  
....................     ///alto significa escuro 
....................     if (ad2 + ad3 > 400) 
1CC2:  MOVF   1C,W
1CC4:  ADDWF  1A,W
1CC6:  MOVWF  35
1CC8:  MOVF   1D,W
1CCA:  ADDWFC 1B,W
1CCC:  MOVWF  36
1CCE:  SUBLW  00
1CD0:  BTFSC  FD8.0
1CD2:  BRA    1E5E
1CD4:  XORLW  FF
1CD6:  BNZ   1CE0
1CD8:  MOVF   35,W
1CDA:  SUBLW  90
1CDC:  BTFSC  FD8.0
1CDE:  BRA    1E5E
1CE0:  CLRF   16
1CE2:  BTFSC  FF2.7
1CE4:  BSF    16.7
1CE6:  BCF    FF2.7
....................     { 
....................         //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................         //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................  
....................         lcd_pos_xy(1, 1); 
1CE8:  MOVLW  01
1CEA:  MOVWF  50
1CEC:  MOVWF  51
1CEE:  CALL   116A
1CF2:  BTFSC  16.7
1CF4:  BSF    FF2.7
....................  
....................         //O ad2 é o da direita, se este esta maior, significa que o robo esta a direita 
....................         if (ad2Ratio > alignRatio) 
1CF6:  MOVFF  28,38
1CFA:  MOVFF  27,37
1CFE:  MOVFF  26,36
1D02:  MOVFF  25,35
1D06:  MOVFF  2C,3C
1D0A:  MOVFF  2B,3B
1D0E:  MOVFF  2A,3A
1D12:  MOVFF  29,39
1D16:  RCALL  1724
1D18:  BNC   1D34
....................         { 
....................             printf(lcd_escreve, "Esta a direita"); 
1D1A:  MOVLW  D6
1D1C:  MOVWF  FF6
1D1E:  MOVLW  13
1D20:  MOVWF  FF7
1D22:  CALL   151A
....................             SetBothPwm(950); 
1D26:  MOVLW  03
1D28:  MOVWF  36
1D2A:  MOVLW  B6
1D2C:  MOVWF  35
1D2E:  RCALL  179A
....................             LeftBackwardRightForward(); 
1D30:  RCALL  17E8
....................         } 
1D32:  BRA    1E5C
....................         else if (ad3Ratio > alignRatio) 
1D34:  MOVFF  28,38
1D38:  MOVFF  27,37
1D3C:  MOVFF  26,36
1D40:  MOVFF  25,35
1D44:  MOVFF  30,3C
1D48:  MOVFF  2F,3B
1D4C:  MOVFF  2E,3A
1D50:  MOVFF  2D,39
1D54:  RCALL  1724
1D56:  BNC   1D72
....................         { 
....................             printf(lcd_escreve, "Esta a esquerda"); 
1D58:  MOVLW  E6
1D5A:  MOVWF  FF6
1D5C:  MOVLW  13
1D5E:  MOVWF  FF7
1D60:  CALL   151A
....................             SetBothPwm(950); 
1D64:  MOVLW  03
1D66:  MOVWF  36
1D68:  MOVLW  B6
1D6A:  MOVWF  35
1D6C:  RCALL  179A
....................             RightBackwardLeftForward(); 
1D6E:  RCALL  17FA
....................         } 
1D70:  BRA    1E5C
....................         else 
....................         { 
....................  
....................             ///850 é o minimo que o motor vai ter (ele precisa de uns 800 pra não ficar travado) e vai somar no maximo 173 
....................             ///Por isso que o maximo dele é 1023 (850 + 173), é possivel fazer com que o valor de maior que 1023 e limitar 
....................             ///Com um if, da para testar isso 
....................             long pwm1 = ad2Ratio * 173 + 850; 
....................             long pwm2 = ad3Ratio * 173 + 850; 
1D72:  MOVFF  2C,38
1D76:  MOVFF  2B,37
1D7A:  MOVFF  2A,36
1D7E:  MOVFF  29,35
1D82:  CLRF   3C
1D84:  CLRF   3B
1D86:  MOVLW  2D
1D88:  MOVWF  3A
1D8A:  MOVLW  86
1D8C:  MOVWF  39
1D8E:  RCALL  180C
1D90:  MOVFF  03,38
1D94:  MOVFF  02,37
1D98:  MOVFF  01,36
1D9C:  MOVFF  00,35
1DA0:  BCF    FD8.1
1DA2:  MOVFF  03,3C
1DA6:  MOVFF  02,3B
1DAA:  MOVFF  01,3A
1DAE:  MOVFF  00,39
1DB2:  CLRF   40
1DB4:  MOVLW  80
1DB6:  MOVWF  3F
1DB8:  MOVLW  54
1DBA:  MOVWF  3E
1DBC:  MOVLW  88
1DBE:  MOVWF  3D
1DC0:  RCALL  18FE
1DC2:  MOVFF  03,38
1DC6:  MOVFF  02,37
1DCA:  MOVFF  01,36
1DCE:  MOVFF  00,35
1DD2:  RCALL  1B68
1DD4:  MOVFF  02,32
1DD8:  MOVFF  01,31
1DDC:  MOVFF  30,38
1DE0:  MOVFF  2F,37
1DE4:  MOVFF  2E,36
1DE8:  MOVFF  2D,35
1DEC:  CLRF   3C
1DEE:  CLRF   3B
1DF0:  MOVLW  2D
1DF2:  MOVWF  3A
1DF4:  MOVLW  86
1DF6:  MOVWF  39
1DF8:  RCALL  180C
1DFA:  MOVFF  03,38
1DFE:  MOVFF  02,37
1E02:  MOVFF  01,36
1E06:  MOVFF  00,35
1E0A:  BCF    FD8.1
1E0C:  MOVFF  03,3C
1E10:  MOVFF  02,3B
1E14:  MOVFF  01,3A
1E18:  MOVFF  00,39
1E1C:  CLRF   40
1E1E:  MOVLW  80
1E20:  MOVWF  3F
1E22:  MOVLW  54
1E24:  MOVWF  3E
1E26:  MOVLW  88
1E28:  MOVWF  3D
1E2A:  RCALL  18FE
1E2C:  MOVFF  03,38
1E30:  MOVFF  02,37
1E34:  MOVFF  01,36
1E38:  MOVFF  00,35
1E3C:  RCALL  1B68
1E3E:  MOVFF  02,34
1E42:  MOVFF  01,33
....................             SetLeft(pwm1); 
1E46:  MOVFF  32,36
1E4A:  MOVFF  31,35
1E4E:  RCALL  1BA0
....................             SetRight(pwm2); 
1E50:  MOVFF  34,36
1E54:  MOVFF  33,35
1E58:  RCALL  1BC8
....................             frente(); 
1E5A:  RCALL  1BF0
....................             // SetLeft((long)(ad2Ratio * 100) + 850); 
....................             // SetRight((long)(ad3Ratio * 100) + 850); 
....................         } 
....................     } 
1E5C:  BRA    1E82
1E5E:  CLRF   16
1E60:  BTFSC  FF2.7
1E62:  BSF    16.7
1E64:  BCF    FF2.7
....................     else 
....................     { 
....................         ///Esta fora da pista, deve fazer algo 
....................         //SetBothPwm(0); 
....................         lcd_pos_xy(1, 2); 
1E66:  MOVLW  01
1E68:  MOVWF  50
1E6A:  MOVLW  02
1E6C:  MOVWF  51
1E6E:  CALL   116A
1E72:  BTFSC  16.7
1E74:  BSF    FF2.7
....................  
....................         printf(lcd_escreve, "Se perdeu"); 
1E76:  MOVLW  F6
1E78:  MOVWF  FF6
1E7A:  MOVLW  13
1E7C:  MOVWF  FF7
1E7E:  CALL   151A
....................     } 
1E82:  RETURN 0
.................... } 
....................  
.................... ///BASICAMENTE faz a mesma coisa que o algin, mas troca os sensores (coloca o da esquerda na direitea) 
.................... void InvertedAlign() 
*
208E:  MOVFF  1B,3A
2092:  MOVFF  1A,39
2096:  CALL   1594
209A:  MOVFF  03,38
209E:  MOVFF  02,37
20A2:  MOVFF  01,36
20A6:  MOVFF  00,35
20AA:  MOVF   1C,W
20AC:  ADDWF  1A,W
20AE:  MOVWF  01
20B0:  MOVF   1D,W
20B2:  ADDWFC 1B,W
20B4:  MOVWF  03
20B6:  MOVFF  01,39
20BA:  MOVWF  3A
20BC:  CALL   1594
20C0:  MOVFF  38,3C
20C4:  MOVFF  37,3B
20C8:  MOVFF  36,3A
20CC:  MOVFF  35,39
20D0:  MOVFF  03,40
20D4:  MOVFF  02,3F
20D8:  MOVFF  01,3E
20DC:  MOVFF  00,3D
20E0:  CALL   15CA
20E4:  MOVFF  03,2C
20E8:  MOVFF  02,2B
20EC:  MOVFF  01,2A
20F0:  MOVFF  00,29
20F4:  MOVFF  1D,3A
20F8:  MOVFF  1C,39
20FC:  CALL   1594
2100:  MOVFF  03,38
2104:  MOVFF  02,37
2108:  MOVFF  01,36
210C:  MOVFF  00,35
2110:  MOVF   1C,W
2112:  ADDWF  1A,W
2114:  MOVWF  01
2116:  MOVF   1D,W
2118:  ADDWFC 1B,W
211A:  MOVWF  03
211C:  MOVFF  01,39
2120:  MOVWF  3A
2122:  CALL   1594
2126:  MOVFF  38,3C
212A:  MOVFF  37,3B
212E:  MOVFF  36,3A
2132:  MOVFF  35,39
2136:  MOVFF  03,40
213A:  MOVFF  02,3F
213E:  MOVFF  01,3E
2142:  MOVFF  00,3D
2146:  CALL   15CA
214A:  MOVFF  03,30
214E:  MOVFF  02,2F
2152:  MOVFF  01,2E
2156:  MOVFF  00,2D
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad2 + ad3); 
....................     float ad3Ratio = (float)ad3 / (float)(ad2 + ad3); 
....................  
....................     ///alto significa escuro 
....................     if (ad2 + ad3 <= 400) 
215A:  MOVF   1C,W
215C:  ADDWF  1A,W
215E:  MOVWF  35
2160:  MOVF   1D,W
2162:  ADDWFC 1B,W
2164:  MOVWF  36
2166:  SUBLW  01
2168:  BTFSS  FD8.0
216A:  BRA    2308
216C:  BNZ   2176
216E:  MOVF   35,W
2170:  SUBLW  90
2172:  BTFSS  FD8.0
2174:  BRA    2308
2176:  CLRF   16
2178:  BTFSC  FF2.7
217A:  BSF    16.7
217C:  BCF    FF2.7
....................     { 
....................         //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................         //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................  
....................         lcd_pos_xy(1, 1); 
217E:  MOVLW  01
2180:  MOVWF  50
2182:  MOVWF  51
2184:  CALL   116A
2188:  BTFSC  16.7
218A:  BSF    FF2.7
....................  
....................         //O ad2 é o da direita, se este esta maior, significa que o robo esta a direita 
....................         if (ad3Ratio > alignRatio) 
218C:  MOVFF  28,38
2190:  MOVFF  27,37
2194:  MOVFF  26,36
2198:  MOVFF  25,35
219C:  MOVFF  30,3C
21A0:  MOVFF  2F,3B
21A4:  MOVFF  2E,3A
21A8:  MOVFF  2D,39
21AC:  CALL   1724
21B0:  BNC   21D0
....................         { 
....................             printf(lcd_escreve, "Esta a direita"); 
21B2:  MOVLW  00
21B4:  MOVWF  FF6
21B6:  MOVLW  14
21B8:  MOVWF  FF7
21BA:  CALL   151A
....................             SetBothPwm(950); 
21BE:  MOVLW  03
21C0:  MOVWF  36
21C2:  MOVLW  B6
21C4:  MOVWF  35
21C6:  CALL   179A
....................             LeftBackwardRightForward(); 
21CA:  CALL   17E8
....................         } 
21CE:  BRA    2306
....................         else if (ad2Ratio > alignRatio) 
21D0:  MOVFF  28,38
21D4:  MOVFF  27,37
21D8:  MOVFF  26,36
21DC:  MOVFF  25,35
21E0:  MOVFF  2C,3C
21E4:  MOVFF  2B,3B
21E8:  MOVFF  2A,3A
21EC:  MOVFF  29,39
21F0:  CALL   1724
21F4:  BNC   2214
....................         { 
....................             printf(lcd_escreve, "Esta a esquerda"); 
21F6:  MOVLW  10
21F8:  MOVWF  FF6
21FA:  MOVLW  14
21FC:  MOVWF  FF7
21FE:  CALL   151A
....................             SetBothPwm(950); 
2202:  MOVLW  03
2204:  MOVWF  36
2206:  MOVLW  B6
2208:  MOVWF  35
220A:  CALL   179A
....................             RightBackwardLeftForward(); 
220E:  CALL   17FA
....................         } 
2212:  BRA    2306
....................         else 
....................         { 
....................  
....................             ///850 é o minimo que o motor vai ter (ele precisa de uns 800 pra não ficar travado) e vai somar no maximo 173 
....................             ///Por isso que o maximo dele é 1023 (850 + 173), é possivel fazer com que o valor de maior que 1023 e limitar 
....................             ///Com um if, da para testar isso 
....................             long pwm1 = ad2Ratio * 173 + 850; 
....................             long pwm2 = ad3Ratio * 173 + 850; 
2214:  MOVFF  2C,38
2218:  MOVFF  2B,37
221C:  MOVFF  2A,36
2220:  MOVFF  29,35
2224:  CLRF   3C
2226:  CLRF   3B
2228:  MOVLW  2D
222A:  MOVWF  3A
222C:  MOVLW  86
222E:  MOVWF  39
2230:  CALL   180C
2234:  MOVFF  03,38
2238:  MOVFF  02,37
223C:  MOVFF  01,36
2240:  MOVFF  00,35
2244:  BCF    FD8.1
2246:  MOVFF  03,3C
224A:  MOVFF  02,3B
224E:  MOVFF  01,3A
2252:  MOVFF  00,39
2256:  CLRF   40
2258:  MOVLW  80
225A:  MOVWF  3F
225C:  MOVLW  54
225E:  MOVWF  3E
2260:  MOVLW  88
2262:  MOVWF  3D
2264:  CALL   18FE
2268:  MOVFF  03,38
226C:  MOVFF  02,37
2270:  MOVFF  01,36
2274:  MOVFF  00,35
2278:  RCALL  1B68
227A:  MOVFF  02,32
227E:  MOVFF  01,31
2282:  MOVFF  30,38
2286:  MOVFF  2F,37
228A:  MOVFF  2E,36
228E:  MOVFF  2D,35
2292:  CLRF   3C
2294:  CLRF   3B
2296:  MOVLW  2D
2298:  MOVWF  3A
229A:  MOVLW  86
229C:  MOVWF  39
229E:  CALL   180C
22A2:  MOVFF  03,38
22A6:  MOVFF  02,37
22AA:  MOVFF  01,36
22AE:  MOVFF  00,35
22B2:  BCF    FD8.1
22B4:  MOVFF  03,3C
22B8:  MOVFF  02,3B
22BC:  MOVFF  01,3A
22C0:  MOVFF  00,39
22C4:  CLRF   40
22C6:  MOVLW  80
22C8:  MOVWF  3F
22CA:  MOVLW  54
22CC:  MOVWF  3E
22CE:  MOVLW  88
22D0:  MOVWF  3D
22D2:  CALL   18FE
22D6:  MOVFF  03,38
22DA:  MOVFF  02,37
22DE:  MOVFF  01,36
22E2:  MOVFF  00,35
22E6:  RCALL  1B68
22E8:  MOVFF  02,34
22EC:  MOVFF  01,33
....................             SetLeft(pwm2); 
22F0:  MOVFF  34,36
22F4:  MOVFF  33,35
22F8:  RCALL  1BA0
....................             SetRight(pwm1); 
22FA:  MOVFF  32,36
22FE:  MOVFF  31,35
2302:  RCALL  1BC8
....................             frente(); 
2304:  RCALL  1BF0
....................             // SetLeft((long)(ad2Ratio * 100) + 850); 
....................             // SetRight((long)(ad3Ratio * 100) + 850); 
....................         } 
....................     } 
2306:  BRA    232C
2308:  CLRF   16
230A:  BTFSC  FF2.7
230C:  BSF    16.7
230E:  BCF    FF2.7
....................     else 
....................     { 
....................         ///Esta fora da pista, deve fazer algo 
....................         //SetBothPwm(0); 
....................         lcd_pos_xy(1, 2); 
2310:  MOVLW  01
2312:  MOVWF  50
2314:  MOVLW  02
2316:  MOVWF  51
2318:  CALL   116A
231C:  BTFSC  16.7
231E:  BSF    FF2.7
....................  
....................         printf(lcd_escreve, "Se perdeu"); 
2320:  MOVLW  20
2322:  MOVWF  FF6
2324:  MOVLW  14
2326:  MOVWF  FF7
2328:  CALL   151A
....................     } 
232C:  GOTO   262E (RETURN)
.................... } 
....................  
.................... void Setup() 
.................... { 
....................     adCounter = 1; 
*
14EC:  MOVLW  01
14EE:  MOVWF  22
....................     running = 0; 
14F0:  CLRF   17
....................  
....................     setup_adc_ports(AN0_TO_AN3); 
14F2:  MOVF   FC1,W
14F4:  ANDLW  C0
14F6:  IORLW  0B
14F8:  MOVWF  FC1
....................     setup_adc(ADC_CLOCK_DIV_4); 
14FA:  MOVF   FC0,W
14FC:  ANDLW  C0
14FE:  IORLW  04
1500:  MOVWF  FC0
1502:  BSF    FC0.7
1504:  BSF    FC2.0
....................  
....................     setup_timer_0(RTCC_INTERNAL | RTCC_DIV_2 | RTCC_8_BIT); 
1506:  MOVLW  C0
1508:  MOVWF  FD5
....................     set_timer0(0); 
150A:  CLRF   FD7
150C:  CLRF   FD6
....................     enable_interrupts(INT_TIMER0); 
150E:  BSF    FF2.5
....................     enable_interrupts(GLOBAL); 
1510:  IORWF  FF2,F
....................  
....................     lcd_ini(); 
1512:  BRA    142A
....................     MotorInitialize(); 
1514:  BRA    14CC
1516:  GOTO   2400 (RETURN)
....................     // SetBothPwm(0); 
....................     // frente(); 
.................... } 
....................  
.................... void ClearScreen() 
.................... { 
....................     lcd_escreve('\f'); 
*
11D2:  MOVLW  0C
11D4:  MOVWF  4F
11D6:  RCALL  118C
11D8:  GOTO   1330 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
