CCS PCH C Compiler, Version 5.015, 5967               30-ago-18 13:09

               Filename:   C:\Users\frepa\source\repos\Imposto\Source Code\main.lst

               ROM used:   6094 bytes (19%)
                           Largest free fragment is 22574
               RAM used:   42 (2%) at main() level
                           88 (4%) worst case
               Stack used: 12 locations (6 in main + 6 for interrupts)
               Stack size: 31

*
1000:  GOTO   20C0
*
1008:  MOVWF  04
100A:  MOVFF  FD8,05
100E:  MOVFF  FE0,06
1012:  MOVLB  0
1014:  MOVFF  FE9,0C
1018:  MOVFF  FEA,07
101C:  MOVFF  FE1,08
1020:  MOVFF  FE2,09
1024:  MOVFF  FD9,0A
1028:  MOVFF  FDA,0B
102C:  MOVFF  FF3,12
1030:  MOVFF  FF4,13
1034:  MOVFF  FFA,14
1038:  MOVFF  00,0E
103C:  MOVFF  01,0F
1040:  MOVFF  02,10
1044:  MOVFF  03,11
1048:  BTFSS  FF2.5
104A:  GOTO   1054
104E:  BTFSC  FF2.2
1050:  GOTO   12CC
1054:  MOVFF  0E,00
1058:  MOVFF  0F,01
105C:  MOVFF  10,02
1060:  MOVFF  11,03
1064:  MOVFF  0C,FE9
1068:  MOVFF  07,FEA
106C:  BSF    07.7
106E:  MOVFF  08,FE1
1072:  MOVFF  09,FE2
1076:  MOVFF  0A,FD9
107A:  MOVFF  0B,FDA
107E:  MOVFF  12,FF3
1082:  MOVFF  13,FF4
1086:  MOVFF  14,FFA
108A:  MOVF   04,W
108C:  MOVFF  06,FE0
1090:  MOVFF  05,FD8
1094:  RETFIE 0
.................... #include <main.h> 
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
1096:  MOVFF  FF2,0D
109A:  BCF    FF2.7
109C:  CLRF   FF7
109E:  ADDLW  B0
10A0:  MOVWF  FF6
10A2:  MOVLW  10
10A4:  ADDWFC FF7,F
10A6:  TBLRD*+
10A8:  MOVF   FF5,W
10AA:  BTFSC  0D.7
10AC:  BSF    FF2.7
10AE:  RETURN 0
10B0:  DATA 28,0C
10B2:  DATA 01,06
*
11DC:  TBLRD*+
11DE:  MOVFF  FF6,4A
11E2:  MOVFF  FF7,4B
11E6:  MOVFF  FF5,4F
11EA:  RCALL  118C
11EC:  MOVFF  4A,FF6
11F0:  MOVFF  4B,FF7
11F4:  DECFSZ 49,F
11F6:  BRA    11DC
11F8:  RETURN 0
11FA:  MOVF   50,W
11FC:  CLRF   01
11FE:  SUBWF  4F,W
1200:  BC    1208
1202:  MOVFF  4F,00
1206:  BRA    1220
1208:  CLRF   00
120A:  MOVLW  08
120C:  MOVWF  51
120E:  RLCF   4F,F
1210:  RLCF   00,F
1212:  MOVF   50,W
1214:  SUBWF  00,W
1216:  BTFSC  FD8.0
1218:  MOVWF  00
121A:  RLCF   01,F
121C:  DECFSZ 51,F
121E:  BRA    120E
1220:  RETURN 0
1222:  MOVLW  20
1224:  BTFSS  4A.4
1226:  MOVLW  30
1228:  MOVWF  4B
122A:  MOVFF  49,00
122E:  BTFSS  49.7
1230:  BRA    1242
1232:  COMF   00,F
1234:  INCF   00,F
1236:  MOVFF  00,49
123A:  MOVLW  2D
123C:  MOVWF  4B
123E:  BSF    4A.7
1240:  BSF    4A.0
1242:  MOVF   01,W
1244:  MOVFF  49,4F
1248:  MOVLW  64
124A:  MOVWF  50
124C:  RCALL  11FA
124E:  MOVFF  00,49
1252:  MOVLW  30
1254:  ADDWF  01,W
1256:  MOVWF  4C
1258:  MOVFF  49,4F
125C:  MOVLW  0A
125E:  MOVWF  50
1260:  RCALL  11FA
1262:  MOVLW  30
1264:  ADDWF  00,W
1266:  MOVWF  4E
1268:  MOVLW  30
126A:  ADDWF  01,W
126C:  MOVWF  4D
126E:  MOVFF  4B,00
1272:  MOVLW  30
1274:  SUBWF  4C,W
1276:  BZ    1280
1278:  BSF    4A.1
127A:  BTFSC  4A.7
127C:  BSF    4A.2
127E:  BRA    12A4
1280:  MOVFF  4B,4C
1284:  MOVLW  20
1286:  MOVWF  4B
1288:  MOVLW  30
128A:  SUBWF  4D,W
128C:  BZ    1296
128E:  BSF    4A.0
1290:  BTFSC  4A.7
1292:  BSF    4A.1
1294:  BRA    12A4
1296:  BTFSS  FD8.2
1298:  BSF    4A.0
129A:  BNZ   12A4
129C:  MOVFF  4C,4D
12A0:  MOVLW  20
12A2:  MOVWF  4C
12A4:  BTFSC  4A.2
12A6:  BRA    12B2
12A8:  BTFSC  4A.1
12AA:  BRA    12B8
12AC:  BTFSC  4A.0
12AE:  BRA    12BE
12B0:  BRA    12C4
12B2:  MOVFF  4B,4F
12B6:  RCALL  118C
12B8:  MOVFF  4C,4F
12BC:  RCALL  118C
12BE:  MOVFF  4D,4F
12C2:  RCALL  118C
12C4:  MOVFF  4E,4F
12C8:  RCALL  118C
12CA:  RETURN 0
*
1396:  DATA 20,64
1398:  DATA 3A,20
139A:  DATA 25,64
139C:  DATA 00,00
139E:  DATA 20,63
13A0:  DATA 3A,20
13A2:  DATA 25,64
13A4:  DATA 00,00
13A6:  DATA 20,49
13A8:  DATA 6E,69
13AA:  DATA 63,69
13AC:  DATA 61,6C
13AE:  DATA 69,7A
13B0:  DATA 61,6E
13B2:  DATA 64,6F
13B4:  DATA 00,00
13B6:  DATA 46,69
13B8:  DATA 6D,20
13BA:  DATA 64,6F
13BC:  DATA 20,70
13BE:  DATA 72,6F
13C0:  DATA 67,72
13C2:  DATA 61,6D
13C4:  DATA 61,64
13C6:  DATA 6F,00
13C8:  DATA 45,73
13CA:  DATA 74,61
13CC:  DATA 20,61
13CE:  DATA 20,64
13D0:  DATA 69,72
13D2:  DATA 65,69
13D4:  DATA 74,61
13D6:  DATA 00,00
13D8:  DATA 45,73
13DA:  DATA 74,61
13DC:  DATA 20,61
13DE:  DATA 20,65
13E0:  DATA 73,71
13E2:  DATA 75,65
13E4:  DATA 72,64
13E6:  DATA 61,00
13E8:  DATA 53,65
13EA:  DATA 20,70
13EC:  DATA 65,72
13EE:  DATA 64,65
13F0:  DATA 75,00
13F2:  DATA 45,73
13F4:  DATA 74,61
13F6:  DATA 20,61
13F8:  DATA 20,64
13FA:  DATA 69,72
13FC:  DATA 65,69
13FE:  DATA 74,61
1400:  DATA 00,00
1402:  DATA 45,73
1404:  DATA 74,61
1406:  DATA 20,61
1408:  DATA 20,65
140A:  DATA 73,71
140C:  DATA 75,65
140E:  DATA 72,64
1410:  DATA 61,00
1412:  DATA 53,65
1414:  DATA 20,70
1416:  DATA 65,72
1418:  DATA 64,65
141A:  DATA 75,00
*
150C:  TBLRD*+
150E:  MOVF   FF5,F
1510:  BZ    1536
1512:  MOVFF  FF6,35
1516:  MOVFF  FF7,36
151A:  CLRF   16
151C:  BTFSC  FF2.7
151E:  BSF    16.7
1520:  BCF    FF2.7
1522:  MOVFF  FF5,4F
1526:  RCALL  118C
1528:  BTFSC  16.7
152A:  BSF    FF2.7
152C:  MOVFF  35,FF6
1530:  MOVFF  36,FF7
1534:  BRA    150C
1536:  RETURN 0
1538:  MOVLW  8E
153A:  MOVWF  00
153C:  MOVFF  3A,01
1540:  MOVFF  39,02
1544:  CLRF   03
1546:  MOVF   01,F
1548:  BNZ   155C
154A:  MOVFF  02,01
154E:  CLRF   02
1550:  MOVLW  08
1552:  SUBWF  00,F
1554:  MOVF   01,F
1556:  BNZ   155C
1558:  CLRF   00
155A:  BRA    156C
155C:  BCF    FD8.0
155E:  BTFSC  01.7
1560:  BRA    156A
1562:  RLCF   02,F
1564:  RLCF   01,F
1566:  DECF   00,F
1568:  BRA    155C
156A:  BCF    01.7
156C:  RETURN 0
156E:  MOVF   39,W
1570:  BTFSC  FD8.2
1572:  BRA    16BE
1574:  MOVWF  45
1576:  MOVF   3D,W
1578:  BTFSC  FD8.2
157A:  BRA    16BE
157C:  SUBWF  45,F
157E:  BNC   158A
1580:  MOVLW  7F
1582:  ADDWF  45,F
1584:  BTFSC  FD8.0
1586:  BRA    16BE
1588:  BRA    1596
158A:  MOVLW  81
158C:  SUBWF  45,F
158E:  BTFSS  FD8.0
1590:  BRA    16BE
1592:  BTFSC  FD8.2
1594:  BRA    16BE
1596:  MOVFF  45,00
159A:  CLRF   01
159C:  CLRF   02
159E:  CLRF   03
15A0:  CLRF   44
15A2:  MOVFF  3A,43
15A6:  BSF    43.7
15A8:  MOVFF  3B,42
15AC:  MOVFF  3C,41
15B0:  MOVLW  19
15B2:  MOVWF  45
15B4:  MOVF   40,W
15B6:  SUBWF  41,F
15B8:  BC    15D4
15BA:  MOVLW  01
15BC:  SUBWF  42,F
15BE:  BC    15D4
15C0:  SUBWF  43,F
15C2:  BC    15D4
15C4:  SUBWF  44,F
15C6:  BC    15D4
15C8:  INCF   44,F
15CA:  INCF   43,F
15CC:  INCF   42,F
15CE:  MOVF   40,W
15D0:  ADDWF  41,F
15D2:  BRA    1624
15D4:  MOVF   3F,W
15D6:  SUBWF  42,F
15D8:  BC    15FE
15DA:  MOVLW  01
15DC:  SUBWF  43,F
15DE:  BC    15FE
15E0:  SUBWF  44,F
15E2:  BC    15FE
15E4:  INCF   44,F
15E6:  INCF   43,F
15E8:  MOVF   3F,W
15EA:  ADDWF  42,F
15EC:  MOVF   40,W
15EE:  ADDWF  41,F
15F0:  BNC   1624
15F2:  INCF   42,F
15F4:  BNZ   1624
15F6:  INCF   43,F
15F8:  BNZ   1624
15FA:  INCF   44,F
15FC:  BRA    1624
15FE:  MOVF   3E,W
1600:  IORLW  80
1602:  SUBWF  43,F
1604:  BC    1622
1606:  MOVLW  01
1608:  SUBWF  44,F
160A:  BC    1622
160C:  INCF   44,F
160E:  MOVF   3E,W
1610:  IORLW  80
1612:  ADDWF  43,F
1614:  MOVF   3F,W
1616:  ADDWF  42,F
1618:  BNC   15EC
161A:  INCF   43,F
161C:  BNZ   15EC
161E:  INCF   44,F
1620:  BRA    15EC
1622:  BSF    03.0
1624:  DECFSZ 45,F
1626:  BRA    162A
1628:  BRA    1640
162A:  BCF    FD8.0
162C:  RLCF   41,F
162E:  RLCF   42,F
1630:  RLCF   43,F
1632:  RLCF   44,F
1634:  BCF    FD8.0
1636:  RLCF   03,F
1638:  RLCF   02,F
163A:  RLCF   01,F
163C:  RLCF   46,F
163E:  BRA    15B4
1640:  BTFSS  46.0
1642:  BRA    1650
1644:  BCF    FD8.0
1646:  RRCF   01,F
1648:  RRCF   02,F
164A:  RRCF   03,F
164C:  RRCF   46,F
164E:  BRA    1654
1650:  DECF   00,F
1652:  BZ    16BE
1654:  BTFSC  46.7
1656:  BRA    1694
1658:  BCF    FD8.0
165A:  RLCF   41,F
165C:  RLCF   42,F
165E:  RLCF   43,F
1660:  RLCF   44,F
1662:  MOVF   40,W
1664:  SUBWF  41,F
1666:  BC    1676
1668:  MOVLW  01
166A:  SUBWF  42,F
166C:  BC    1676
166E:  SUBWF  43,F
1670:  BC    1676
1672:  SUBWF  44,F
1674:  BNC   16AA
1676:  MOVF   3F,W
1678:  SUBWF  42,F
167A:  BC    1686
167C:  MOVLW  01
167E:  SUBWF  43,F
1680:  BC    1686
1682:  SUBWF  44,F
1684:  BNC   16AA
1686:  MOVF   3E,W
1688:  IORLW  80
168A:  SUBWF  43,F
168C:  BC    1694
168E:  MOVLW  01
1690:  SUBWF  44,F
1692:  BNC   16AA
1694:  INCF   03,F
1696:  BNZ   16AA
1698:  INCF   02,F
169A:  BNZ   16AA
169C:  INCF   01,F
169E:  BNZ   16AA
16A0:  INCF   00,F
16A2:  BZ    16BE
16A4:  RRCF   01,F
16A6:  RRCF   02,F
16A8:  RRCF   03,F
16AA:  MOVFF  3A,45
16AE:  MOVF   3E,W
16B0:  XORWF  45,F
16B2:  BTFSS  45.7
16B4:  BRA    16BA
16B6:  BSF    01.7
16B8:  BRA    16C6
16BA:  BCF    01.7
16BC:  BRA    16C6
16BE:  CLRF   00
16C0:  CLRF   01
16C2:  CLRF   02
16C4:  CLRF   03
16C6:  RETURN 0
16C8:  MOVFF  36,3D
16CC:  MOVF   3A,W
16CE:  XORWF  3D,F
16D0:  BTFSS  3D.7
16D2:  BRA    16DE
16D4:  BCF    FD8.2
16D6:  BCF    FD8.0
16D8:  BTFSC  36.7
16DA:  BSF    FD8.0
16DC:  BRA    173C
16DE:  MOVFF  36,3D
16E2:  MOVFF  39,3E
16E6:  MOVF   35,W
16E8:  SUBWF  3E,F
16EA:  BZ    16F8
16EC:  BTFSS  3D.7
16EE:  BRA    173C
16F0:  MOVF   FD8,W
16F2:  XORLW  01
16F4:  MOVWF  FD8
16F6:  BRA    173C
16F8:  MOVFF  3A,3E
16FC:  MOVF   36,W
16FE:  SUBWF  3E,F
1700:  BZ    170E
1702:  BTFSS  3D.7
1704:  BRA    173C
1706:  MOVF   FD8,W
1708:  XORLW  01
170A:  MOVWF  FD8
170C:  BRA    173C
170E:  MOVFF  3B,3E
1712:  MOVF   37,W
1714:  SUBWF  3E,F
1716:  BZ    1724
1718:  BTFSS  3D.7
171A:  BRA    173C
171C:  MOVF   FD8,W
171E:  XORLW  01
1720:  MOVWF  FD8
1722:  BRA    173C
1724:  MOVFF  3C,3E
1728:  MOVF   38,W
172A:  SUBWF  3E,F
172C:  BZ    173A
172E:  BTFSS  3D.7
1730:  BRA    173C
1732:  MOVF   FD8,W
1734:  XORLW  01
1736:  MOVWF  FD8
1738:  BRA    173C
173A:  BCF    FD8.0
173C:  RETURN 0
*
17B0:  MOVF   35,W
17B2:  BTFSC  FD8.2
17B4:  BRA    1898
17B6:  MOVWF  00
17B8:  MOVF   39,W
17BA:  BTFSC  FD8.2
17BC:  BRA    1898
17BE:  ADDWF  00,F
17C0:  BNC   17CA
17C2:  MOVLW  81
17C4:  ADDWF  00,F
17C6:  BC    1898
17C8:  BRA    17D2
17CA:  MOVLW  7F
17CC:  SUBWF  00,F
17CE:  BNC   1898
17D0:  BZ    1898
17D2:  MOVFF  36,3D
17D6:  MOVF   3A,W
17D8:  XORWF  3D,F
17DA:  BSF    36.7
17DC:  BSF    3A.7
17DE:  MOVF   38,W
17E0:  MULWF  3C
17E2:  MOVFF  FF4,3F
17E6:  MOVF   37,W
17E8:  MULWF  3B
17EA:  MOVFF  FF4,03
17EE:  MOVFF  FF3,3E
17F2:  MULWF  3C
17F4:  MOVF   FF3,W
17F6:  ADDWF  3F,F
17F8:  MOVF   FF4,W
17FA:  ADDWFC 3E,F
17FC:  MOVLW  00
17FE:  ADDWFC 03,F
1800:  MOVF   38,W
1802:  MULWF  3B
1804:  MOVF   FF3,W
1806:  ADDWF  3F,F
1808:  MOVF   FF4,W
180A:  ADDWFC 3E,F
180C:  MOVLW  00
180E:  CLRF   02
1810:  ADDWFC 03,F
1812:  ADDWFC 02,F
1814:  MOVF   36,W
1816:  MULWF  3C
1818:  MOVF   FF3,W
181A:  ADDWF  3E,F
181C:  MOVF   FF4,W
181E:  ADDWFC 03,F
1820:  MOVLW  00
1822:  ADDWFC 02,F
1824:  MOVF   36,W
1826:  MULWF  3B
1828:  MOVF   FF3,W
182A:  ADDWF  03,F
182C:  MOVF   FF4,W
182E:  ADDWFC 02,F
1830:  MOVLW  00
1832:  CLRF   01
1834:  ADDWFC 01,F
1836:  MOVF   38,W
1838:  MULWF  3A
183A:  MOVF   FF3,W
183C:  ADDWF  3E,F
183E:  MOVF   FF4,W
1840:  ADDWFC 03,F
1842:  MOVLW  00
1844:  ADDWFC 02,F
1846:  ADDWFC 01,F
1848:  MOVF   37,W
184A:  MULWF  3A
184C:  MOVF   FF3,W
184E:  ADDWF  03,F
1850:  MOVF   FF4,W
1852:  ADDWFC 02,F
1854:  MOVLW  00
1856:  ADDWFC 01,F
1858:  MOVF   36,W
185A:  MULWF  3A
185C:  MOVF   FF3,W
185E:  ADDWF  02,F
1860:  MOVF   FF4,W
1862:  ADDWFC 01,F
1864:  INCF   00,F
1866:  BTFSC  01.7
1868:  BRA    1874
186A:  RLCF   3E,F
186C:  RLCF   03,F
186E:  RLCF   02,F
1870:  RLCF   01,F
1872:  DECF   00,F
1874:  MOVLW  00
1876:  BTFSS  3E.7
1878:  BRA    188E
187A:  INCF   03,F
187C:  ADDWFC 02,F
187E:  ADDWFC 01,F
1880:  MOVF   01,W
1882:  BNZ   188E
1884:  MOVF   02,W
1886:  BNZ   188E
1888:  MOVF   03,W
188A:  BNZ   188E
188C:  INCF   00,F
188E:  BTFSC  3D.7
1890:  BSF    01.7
1892:  BTFSS  3D.7
1894:  BCF    01.7
1896:  BRA    18A0
1898:  CLRF   00
189A:  CLRF   01
189C:  CLRF   02
189E:  CLRF   03
18A0:  RETURN 0
18A2:  MOVLW  80
18A4:  BTFSC  FD8.1
18A6:  XORWF  3E,F
18A8:  CLRF   43
18AA:  CLRF   44
18AC:  MOVFF  3A,42
18B0:  MOVF   3E,W
18B2:  XORWF  42,F
18B4:  MOVF   39,W
18B6:  BTFSC  FD8.2
18B8:  BRA    1A72
18BA:  MOVWF  41
18BC:  MOVWF  00
18BE:  MOVF   3D,W
18C0:  BTFSC  FD8.2
18C2:  BRA    1A84
18C4:  SUBWF  41,F
18C6:  BTFSC  FD8.2
18C8:  BRA    19CC
18CA:  BNC   1946
18CC:  MOVFF  3E,47
18D0:  BSF    47.7
18D2:  MOVFF  3F,46
18D6:  MOVFF  40,45
18DA:  CLRF   44
18DC:  BCF    FD8.0
18DE:  RRCF   47,F
18E0:  RRCF   46,F
18E2:  RRCF   45,F
18E4:  RRCF   44,F
18E6:  DECFSZ 41,F
18E8:  BRA    18DA
18EA:  BTFSS  42.7
18EC:  BRA    18F4
18EE:  BSF    43.0
18F0:  BRA    1AAC
18F2:  BCF    43.0
18F4:  BCF    41.0
18F6:  BSF    43.4
18F8:  CLRF   FEA
18FA:  MOVLW  3C
18FC:  MOVWF  FE9
18FE:  BRA    1AD2
1900:  BCF    43.4
1902:  BTFSC  42.7
1904:  BRA    191A
1906:  BTFSS  41.0
1908:  BRA    1930
190A:  RRCF   47,F
190C:  RRCF   46,F
190E:  RRCF   45,F
1910:  RRCF   44,F
1912:  INCF   00,F
1914:  BTFSC  FD8.2
1916:  BRA    1AA2
1918:  BRA    1930
191A:  BTFSC  47.7
191C:  BRA    1936
191E:  BCF    FD8.0
1920:  RLCF   44,F
1922:  RLCF   45,F
1924:  RLCF   46,F
1926:  RLCF   47,F
1928:  DECF   00,F
192A:  BTFSC  FD8.2
192C:  BRA    1AA2
192E:  BRA    191A
1930:  BSF    43.6
1932:  BRA    1A0A
1934:  BCF    43.6
1936:  MOVFF  3A,42
193A:  BTFSS  3A.7
193C:  BRA    1942
193E:  BSF    47.7
1940:  BRA    1A94
1942:  BCF    47.7
1944:  BRA    1A94
1946:  MOVFF  3D,41
194A:  MOVFF  3D,00
194E:  MOVF   39,W
1950:  SUBWF  41,F
1952:  MOVFF  3A,47
1956:  BSF    47.7
1958:  MOVFF  3B,46
195C:  MOVFF  3C,45
1960:  CLRF   44
1962:  BCF    FD8.0
1964:  RRCF   47,F
1966:  RRCF   46,F
1968:  RRCF   45,F
196A:  RRCF   44,F
196C:  DECFSZ 41,F
196E:  BRA    1960
1970:  BTFSS  42.7
1972:  BRA    197A
1974:  BSF    43.1
1976:  BRA    1AAC
1978:  BCF    43.1
197A:  BCF    41.0
197C:  BSF    43.5
197E:  CLRF   FEA
1980:  MOVLW  40
1982:  MOVWF  FE9
1984:  BRA    1AD2
1986:  BCF    43.5
1988:  BTFSC  42.7
198A:  BRA    19A0
198C:  BTFSS  41.0
198E:  BRA    19B6
1990:  RRCF   47,F
1992:  RRCF   46,F
1994:  RRCF   45,F
1996:  RRCF   44,F
1998:  INCF   00,F
199A:  BTFSC  FD8.2
199C:  BRA    1AA2
199E:  BRA    19B6
19A0:  BTFSC  47.7
19A2:  BRA    19BC
19A4:  BCF    FD8.0
19A6:  RLCF   44,F
19A8:  RLCF   45,F
19AA:  RLCF   46,F
19AC:  RLCF   47,F
19AE:  DECF   00,F
19B0:  BTFSC  FD8.2
19B2:  BRA    1AA2
19B4:  BRA    19A0
19B6:  BSF    43.7
19B8:  BRA    1A0A
19BA:  BCF    43.7
19BC:  MOVFF  3E,42
19C0:  BTFSS  3E.7
19C2:  BRA    19C8
19C4:  BSF    47.7
19C6:  BRA    1A94
19C8:  BCF    47.7
19CA:  BRA    1A94
19CC:  MOVFF  3E,47
19D0:  BSF    47.7
19D2:  MOVFF  3F,46
19D6:  MOVFF  40,45
19DA:  BTFSS  42.7
19DC:  BRA    19E6
19DE:  BCF    47.7
19E0:  BSF    43.2
19E2:  BRA    1AAC
19E4:  BCF    43.2
19E6:  CLRF   44
19E8:  BCF    41.0
19EA:  CLRF   FEA
19EC:  MOVLW  3C
19EE:  MOVWF  FE9
19F0:  BRA    1AD2
19F2:  BTFSC  42.7
19F4:  BRA    1A2E
19F6:  MOVFF  3A,42
19FA:  BTFSS  41.0
19FC:  BRA    1A0A
19FE:  RRCF   47,F
1A00:  RRCF   46,F
1A02:  RRCF   45,F
1A04:  RRCF   44,F
1A06:  INCF   00,F
1A08:  BZ    1AA2
1A0A:  BTFSS  44.7
1A0C:  BRA    1A24
1A0E:  INCF   45,F
1A10:  BNZ   1A24
1A12:  INCF   46,F
1A14:  BNZ   1A24
1A16:  INCF   47,F
1A18:  BNZ   1A24
1A1A:  RRCF   47,F
1A1C:  RRCF   46,F
1A1E:  RRCF   45,F
1A20:  INCF   00,F
1A22:  BZ    1AA2
1A24:  BTFSC  43.6
1A26:  BRA    1934
1A28:  BTFSC  43.7
1A2A:  BRA    19BA
1A2C:  BRA    1A66
1A2E:  MOVLW  80
1A30:  XORWF  47,F
1A32:  BTFSS  47.7
1A34:  BRA    1A3E
1A36:  BRA    1AAC
1A38:  MOVFF  3E,42
1A3C:  BRA    1A52
1A3E:  MOVFF  3A,42
1A42:  MOVF   47,F
1A44:  BNZ   1A52
1A46:  MOVF   46,F
1A48:  BNZ   1A52
1A4A:  MOVF   45,F
1A4C:  BNZ   1A52
1A4E:  CLRF   00
1A50:  BRA    1A94
1A52:  BTFSC  47.7
1A54:  BRA    1A66
1A56:  BCF    FD8.0
1A58:  RLCF   44,F
1A5A:  RLCF   45,F
1A5C:  RLCF   46,F
1A5E:  RLCF   47,F
1A60:  DECFSZ 00,F
1A62:  BRA    1A52
1A64:  BRA    1AA2
1A66:  BTFSS  42.7
1A68:  BRA    1A6E
1A6A:  BSF    47.7
1A6C:  BRA    1A94
1A6E:  BCF    47.7
1A70:  BRA    1A94
1A72:  MOVFF  3D,00
1A76:  MOVFF  3E,47
1A7A:  MOVFF  3F,46
1A7E:  MOVFF  40,45
1A82:  BRA    1A94
1A84:  MOVFF  39,00
1A88:  MOVFF  3A,47
1A8C:  MOVFF  3B,46
1A90:  MOVFF  3C,45
1A94:  MOVFF  47,01
1A98:  MOVFF  46,02
1A9C:  MOVFF  45,03
1AA0:  BRA    1B0A
1AA2:  CLRF   00
1AA4:  CLRF   01
1AA6:  CLRF   02
1AA8:  CLRF   03
1AAA:  BRA    1B0A
1AAC:  CLRF   44
1AAE:  COMF   45,F
1AB0:  COMF   46,F
1AB2:  COMF   47,F
1AB4:  COMF   44,F
1AB6:  INCF   44,F
1AB8:  BNZ   1AC4
1ABA:  INCF   45,F
1ABC:  BNZ   1AC4
1ABE:  INCF   46,F
1AC0:  BNZ   1AC4
1AC2:  INCF   47,F
1AC4:  BTFSC  43.0
1AC6:  BRA    18F2
1AC8:  BTFSC  43.1
1ACA:  BRA    1978
1ACC:  BTFSC  43.2
1ACE:  BRA    19E4
1AD0:  BRA    1A38
1AD2:  MOVF   FEF,W
1AD4:  ADDWF  45,F
1AD6:  BNC   1AE2
1AD8:  INCF   46,F
1ADA:  BNZ   1AE2
1ADC:  INCF   47,F
1ADE:  BTFSC  FD8.2
1AE0:  BSF    41.0
1AE2:  MOVF   FED,F
1AE4:  MOVF   FEF,W
1AE6:  ADDWF  46,F
1AE8:  BNC   1AF0
1AEA:  INCF   47,F
1AEC:  BTFSC  FD8.2
1AEE:  BSF    41.0
1AF0:  MOVF   FED,F
1AF2:  MOVF   FEF,W
1AF4:  BTFSC  FEF.7
1AF6:  BRA    1AFA
1AF8:  XORLW  80
1AFA:  ADDWF  47,F
1AFC:  BTFSC  FD8.0
1AFE:  BSF    41.0
1B00:  BTFSC  43.4
1B02:  BRA    1900
1B04:  BTFSC  43.5
1B06:  BRA    1986
1B08:  BRA    19F2
1B0A:  RETURN 0
1B0C:  MOVLW  8E
1B0E:  MOVWF  00
1B10:  MOVF   35,W
1B12:  SUBWF  00,F
1B14:  MOVFF  36,02
1B18:  MOVFF  37,01
1B1C:  BSF    02.7
1B1E:  MOVF   00,F
1B20:  BZ    1B34
1B22:  BCF    FD8.0
1B24:  MOVF   02,F
1B26:  BNZ   1B2C
1B28:  MOVF   01,F
1B2A:  BZ    1B34
1B2C:  RRCF   02,F
1B2E:  RRCF   01,F
1B30:  DECFSZ 00,F
1B32:  BRA    1B22
1B34:  BTFSS  36.7
1B36:  BRA    1B42
1B38:  COMF   01,F
1B3A:  COMF   02,F
1B3C:  INCF   01,F
1B3E:  BTFSC  FD8.2
1B40:  INCF   02,F
1B42:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=48MHz,crystal=20MHz) 
*
10B4:  MOVLW  01
10B6:  SUBWF  56,F
10B8:  BNC   10D2
10BA:  CLRF   FEA
10BC:  MOVLW  56
10BE:  MOVWF  FE9
10C0:  MOVF   FEF,W
10C2:  BZ    10D2
10C4:  MOVLW  02
10C6:  MOVWF  00
10C8:  DECFSZ 00,F
10CA:  BRA    10C8
10CC:  BRA    10CE
10CE:  DECFSZ FEF,F
10D0:  BRA    10C4
10D2:  RETURN 0
*
1142:  CLRF   FEA
1144:  MOVLW  50
1146:  MOVWF  FE9
1148:  MOVF   FEF,W
114A:  BZ    1168
114C:  MOVLW  0F
114E:  MOVWF  01
1150:  CLRF   00
1152:  DECFSZ 00,F
1154:  BRA    1152
1156:  DECFSZ 01,F
1158:  BRA    1150
115A:  MOVLW  8F
115C:  MOVWF  00
115E:  DECFSZ 00,F
1160:  BRA    115E
1162:  NOP   
1164:  DECFSZ FEF,F
1166:  BRA    114C
1168:  RETURN 0
....................  
.................... // #build(reset=0x1000, interrupt=0x1008) 
.................... // #org 0x000, 0xfff { } 
....................  
.................... #include <Motor1.c> 
.................... #build(reset = 0x1000, interrupt = 0x1008) 
.................... #org 0x000, 0xfff {} 
....................  
.................... #define m1p1 pin_e2 
.................... #define m1p2 pin_c0 
.................... #define m2p1 pin_d0 
.................... #define m2p2 pin_d1 
....................  
.................... void tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void frente() 
.................... { 
....................       output_bit(m1p1, 1); 
*
1B94:  BSF    F8D.2
1B96:  BCF    F96.2
....................       output_bit(m1p2, 0); 
1B98:  BCF    F8B.0
1B9A:  BCF    F94.0
....................       output_bit(m2p1, 0); 
1B9C:  BCF    F8C.0
1B9E:  BCF    F95.0
....................       output_bit(m2p2, 1); 
1BA0:  BSF    F8C.1
1BA2:  BCF    F95.1
1BA4:  GOTO   1DFA (RETURN)
.................... } 
....................  
.................... void gira_esquerda() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void gira_direita() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_frente() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_frente() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void para() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void AllForward() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
.................... void AllBackwards() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void LeftBackwardRightForward() 
.................... { 
....................       output_bit(m1p1, 1); 
*
178C:  BSF    F8D.2
178E:  BCF    F96.2
....................       output_bit(m1p2, 0); 
1790:  BCF    F8B.0
1792:  BCF    F94.0
....................       output_bit(m2p1, 1); 
1794:  BSF    F8C.0
1796:  BCF    F95.0
....................       output_bit(m2p2, 0); 
1798:  BCF    F8C.1
179A:  BCF    F95.1
179C:  RETURN 0
.................... } 
.................... void RightBackwardLeftForward() 
.................... { 
....................       output_bit(m1p1, 0); 
179E:  BCF    F8D.2
17A0:  BCF    F96.2
....................       output_bit(m1p2, 1); 
17A2:  BSF    F8B.0
17A4:  BCF    F94.0
....................       output_bit(m2p1, 0); 
17A6:  BCF    F8C.0
17A8:  BCF    F95.0
....................       output_bit(m2p2, 1); 
17AA:  BSF    F8C.1
17AC:  BCF    F95.1
17AE:  RETURN 0
.................... } 
....................  
.................... void MotorInitialize() 
.................... { 
....................       setup_timer_2(T2_DIV_BY_16, 255, 1); //341 us overflow, 341 us interrupt 
*
14BE:  MOVLW  00
14C0:  IORLW  06
14C2:  MOVWF  FCA
14C4:  MOVLW  FF
14C6:  MOVWF  FCB
....................  
....................       setup_ccp1(CCP_PWM | CCP_SHUTDOWN_AC_L | CCP_SHUTDOWN_BD_L); 
14C8:  BCF    F94.2
14CA:  BCF    F8B.2
14CC:  MOVLW  0C
14CE:  MOVWF  FBD
14D0:  CLRF   FB7
14D2:  CLRF   FB6
....................       setup_ccp2(CCP_PWM); 
14D4:  BCF    F94.1
14D6:  BCF    F8B.1
14D8:  MOVWF  FBA
14DA:  GOTO   1508 (RETURN)
.................... } 
....................  
.................... void SetBothPwm(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
173E:  MOVFF  36,02
1742:  MOVFF  35,01
1746:  RRCF   02,F
1748:  RRCF   01,F
174A:  RRCF   02,F
174C:  RRCF   01,F
174E:  RRCF   02,F
1750:  MOVFF  01,FBE
1754:  RRCF   02,F
1756:  RRCF   02,W
1758:  ANDLW  30
175A:  MOVWF  00
175C:  MOVF   FBD,W
175E:  ANDLW  CF
1760:  IORWF  00,W
1762:  MOVWF  FBD
....................       set_pwm2_duty((int16)vel); //-50); 
1764:  MOVFF  36,02
1768:  MOVFF  35,01
176C:  RRCF   02,F
176E:  RRCF   01,F
1770:  RRCF   02,F
1772:  RRCF   01,F
1774:  RRCF   02,F
1776:  MOVFF  01,FBB
177A:  RRCF   02,F
177C:  RRCF   02,W
177E:  ANDLW  30
1780:  MOVWF  00
1782:  MOVF   FBA,W
1784:  ANDLW  CF
1786:  IORWF  00,W
1788:  MOVWF  FBA
178A:  RETURN 0
.................... } 
....................  
.................... void SetRight(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
1B6C:  MOVFF  36,02
1B70:  MOVFF  35,01
1B74:  RRCF   02,F
1B76:  RRCF   01,F
1B78:  RRCF   02,F
1B7A:  RRCF   01,F
1B7C:  RRCF   02,F
1B7E:  MOVFF  01,FBE
1B82:  RRCF   02,F
1B84:  RRCF   02,W
1B86:  ANDLW  30
1B88:  MOVWF  00
1B8A:  MOVF   FBD,W
1B8C:  ANDLW  CF
1B8E:  IORWF  00,W
1B90:  MOVWF  FBD
1B92:  RETURN 0
.................... } 
.................... void SetLeft(int16 vel) 
.................... { 
....................       set_pwm2_duty((int16)vel); 
*
1B44:  MOVFF  36,02
1B48:  MOVFF  35,01
1B4C:  RRCF   02,F
1B4E:  RRCF   01,F
1B50:  RRCF   02,F
1B52:  RRCF   01,F
1B54:  RRCF   02,F
1B56:  MOVFF  01,FBB
1B5A:  RRCF   02,F
1B5C:  RRCF   02,W
1B5E:  ANDLW  30
1B60:  MOVWF  00
1B62:  MOVF   FBA,W
1B64:  ANDLW  CF
1B66:  IORWF  00,W
1B68:  MOVWF  FBA
1B6A:  RETURN 0
.................... } 
....................  
.................... #include <LCD_KIT.c> 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipula��o de m�dulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: F�bio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
.................... /* 
.................... lcd_cursor_on()                        fun��es LCD 
.................... lcd_cursor_pisca() 
.................... lcd_cursor_off() 
.................... lcd_corre_esquerda() 
.................... lcd_corre_direita() 
.................... lcd_envia_nibble( byte dado ) 
.................... lcd_le_byte() 
.................... lcd_ini() 
.................... lcd_pos_xy( byte x, byte y) 
.................... lcd_escreve( char c)                  \f  Clear display                            //// 
....................                                             \n  Go to start of second line               //// 
....................                                   \b  Move back one position                   //// 
....................  
.................... lcd_le( byte x, byte y) 
.................... lcd_apaga() 
.................... { 
....................  
.................... */ 
.................... // As defini��es a seguir s�o utilizadas para acesso aos pinos do display 
.................... // caso o pino RW n�o seja utilizado, comente a defini��o lcd_rw 
.................... #ifndef lcd_enable 
....................    #define lcd_rs         pin_d2      // pino rs do LCD 
....................    #define lcd_enable     pin_d3      // pino enable do LCD 
....................    #define lcd_d4         pin_d4      // pino de dados d4 do LCD 
....................    #define lcd_d5         pin_d5      // pino de dados d5 do LCD 
....................    #define lcd_d6         pin_d6      // pino de dados d6 do LCD 
....................    #define lcd_d7         pin_d7   // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endere�o da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seq��ncia de inicializa��o do m�dulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................  
.................... /*   O 0x20 eh p configurar o tipo do display e talz. 
....................    O Segundo numero configura o modo do cursor, sendo: 
....................                -> 0xf Cursor piscante 
....................                -> 0xe Cursor comum 
....................                -> 0xc Sem cursor 
....................    O terceiro (1) limpa o display 
....................    O Quarto volta com o cursor. 
.................... */ 
....................  
.................... byte lcd_le_byte() 
.................... // l� um byte do LCD (somente com pino RW) 
.................... { 
....................    byte dado; 
....................    // configura os pinos de dados como entradas 
....................    input(lcd_d4); 
....................    input(lcd_d5); 
....................    input(lcd_d6); 
....................    input(lcd_d7); 
....................    // se o pino rw for utilizado, coloca em 1 
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_high(lcd_enable); // habilita display 
....................    dado = 0;   // zera a vari�vel de leitura 
....................    // l� os quatro bits mais significativos 
....................    if (input(lcd_d7)) bit_set(dado,7); 
....................    if (input(lcd_d6)) bit_set(dado,6); 
....................    if (input(lcd_d5)) bit_set(dado,5); 
....................    if (input(lcd_d4)) bit_set(dado,4); 
....................    // d� um pulso na linha enable 
....................    output_low(lcd_enable); 
....................    output_high(lcd_enable); 
....................    // l� os quatro bits menos significativos 
....................    if (input(lcd_d7)) bit_set(dado,3); 
....................    if (input(lcd_d6)) bit_set(dado,2); 
....................    if (input(lcd_d5)) bit_set(dado,1); 
....................    if (input(lcd_d4)) bit_set(dado,0); 
....................    output_low(lcd_enable);   // desabilita o display 
....................    return dado;   // retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
....................    // coloca os quatro bits nas saidas 
....................    output_bit(lcd_d4,bit_test(dado,0)); 
*
10D4:  BTFSC  57.0
10D6:  BRA    10DC
10D8:  BCF    F8C.4
10DA:  BRA    10DE
10DC:  BSF    F8C.4
10DE:  BCF    F95.4
....................    output_bit(lcd_d5,bit_test(dado,1)); 
10E0:  BTFSC  57.1
10E2:  BRA    10E8
10E4:  BCF    F8C.5
10E6:  BRA    10EA
10E8:  BSF    F8C.5
10EA:  BCF    F95.5
....................    output_bit(lcd_d6,bit_test(dado,2)); 
10EC:  BTFSC  57.2
10EE:  BRA    10F4
10F0:  BCF    F8C.6
10F2:  BRA    10F6
10F4:  BSF    F8C.6
10F6:  BCF    F95.6
....................    output_bit(lcd_d7,bit_test(dado,3)); 
10F8:  BTFSC  57.3
10FA:  BRA    1100
10FC:  BCF    F8C.7
10FE:  BRA    1102
1100:  BSF    F8C.7
1102:  BCF    F95.7
....................    // d� um pulso na linha enable 
....................    output_high(lcd_enable); 
1104:  BCF    F95.3
1106:  BSF    F8C.3
....................    output_low(lcd_enable); 
1108:  BCF    F95.3
110A:  BCF    F8C.3
110C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
....................    // coloca a linha rs em 0 
....................    output_low(lcd_rs); 
110E:  BCF    F95.2
1110:  BCF    F8C.2
....................    // aguarda o display ficar desocupado 
....................    //while ( bit_test(lcd_le_byte(),7) ) ; 
....................    // configura a linha rs dependendo do modo selecionado 
....................    output_bit(lcd_rs,endereco); 
1112:  MOVF   54,F
1114:  BNZ   111A
1116:  BCF    F8C.2
1118:  BRA    111C
111A:  BSF    F8C.2
111C:  BCF    F95.2
....................    delay_us(100);   // aguarda 100 us 
111E:  MOVLW  64
1120:  MOVWF  56
1122:  RCALL  10B4
....................    // caso a linha rw esteja definida, coloca em 0 
....................    #ifdef lcd_rw 
....................       output_low(lcd_rw); 
....................    #endif 
....................    // desativa linha enable 
....................    output_low(lcd_enable); 
1124:  BCF    F95.3
1126:  BCF    F8C.3
....................    // envia a primeira parte do byte 
....................    lcd_envia_nibble(dado >> 4); 
1128:  SWAPF  55,W
112A:  MOVWF  56
112C:  MOVLW  0F
112E:  ANDWF  56,F
1130:  MOVFF  56,57
1134:  RCALL  10D4
....................    // envia a segunda parte do byte 
....................    lcd_envia_nibble(dado & 0x0f); 
1136:  MOVF   55,W
1138:  ANDLW  0F
113A:  MOVWF  56
113C:  MOVWF  57
113E:  RCALL  10D4
1140:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicializa��o do display 
.................... { 
....................    byte conta; 
....................    output_low(lcd_d4); 
*
141C:  BCF    F95.4
141E:  BCF    F8C.4
....................    output_low(lcd_d5); 
1420:  BCF    F95.5
1422:  BCF    F8C.5
....................    output_low(lcd_d6); 
1424:  BCF    F95.6
1426:  BCF    F8C.6
....................    output_low(lcd_d7); 
1428:  BCF    F95.7
142A:  BCF    F8C.7
....................    output_low(lcd_rs); 
142C:  BCF    F95.2
142E:  BCF    F8C.2
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_low(lcd_enable); 
1430:  BCF    F95.3
1432:  BCF    F8C.3
1434:  CLRF   16
1436:  BTFSC  FF2.7
1438:  BSF    16.7
143A:  BCF    FF2.7
....................    delay_ms(15); 
143C:  MOVLW  0F
143E:  MOVWF  50
1440:  RCALL  1142
1442:  BTFSC  16.7
1444:  BSF    FF2.7
....................    // envia uma seq��ncia de 3 vezes 0x03 
....................    // e depois 0x02 para configurar o m�dulo 
....................    // para modo de 4 bits 
....................    for(conta=1;conta<=3;++conta) 
1446:  MOVLW  01
1448:  MOVWF  29
144A:  MOVF   29,W
144C:  SUBLW  03
144E:  BNC   1478
1450:  CLRF   16
1452:  BTFSC  FF2.7
1454:  BSF    16.7
1456:  BCF    FF2.7
....................    { 
....................       lcd_envia_nibble(3); 
1458:  MOVLW  03
145A:  MOVWF  57
145C:  RCALL  10D4
145E:  BTFSC  16.7
1460:  BSF    FF2.7
1462:  CLRF   16
1464:  BTFSC  FF2.7
1466:  BSF    16.7
1468:  BCF    FF2.7
....................       delay_ms(5); 
146A:  MOVLW  05
146C:  MOVWF  50
146E:  RCALL  1142
1470:  BTFSC  16.7
1472:  BSF    FF2.7
1474:  INCF   29,F
1476:  BRA    144A
1478:  CLRF   16
147A:  BTFSC  FF2.7
147C:  BSF    16.7
147E:  BCF    FF2.7
....................    } 
....................    lcd_envia_nibble(2); 
1480:  MOVLW  02
1482:  MOVWF  57
1484:  RCALL  10D4
1486:  BTFSC  16.7
1488:  BSF    FF2.7
....................    // envia string de inicializa��o do display 
....................    for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
148A:  CLRF   29
148C:  MOVF   29,W
148E:  SUBLW  03
1490:  BNC   14BA
1492:  CLRF   03
1494:  MOVF   29,W
1496:  MOVFF  FF2,2A
149A:  BCF    FF2.7
149C:  RCALL  1096
149E:  BTFSC  2A.7
14A0:  BSF    FF2.7
14A2:  MOVWF  2A
14A4:  CLRF   16
14A6:  BTFSC  FF2.7
14A8:  BSF    16.7
14AA:  BCF    FF2.7
14AC:  CLRF   54
14AE:  MOVWF  55
14B0:  RCALL  110E
14B2:  BTFSC  16.7
14B4:  BSF    FF2.7
14B6:  INCF   29,F
14B8:  BRA    148C
14BA:  GOTO   1506 (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
116A:  DECFSZ 51,W
116C:  BRA    1170
116E:  BRA    1176
....................       endereco = lcd_seg_lin; 
1170:  MOVLW  40
1172:  MOVWF  52
1174:  BRA    1178
....................    else 
....................       endereco = 0; 
1176:  CLRF   52
....................    endereco += x-1; 
1178:  MOVLW  01
117A:  SUBWF  50,W
117C:  ADDWF  52,F
....................    lcd_envia_byte(0,0x80|endereco); 
117E:  MOVF   52,W
1180:  IORLW  80
1182:  MOVWF  53
1184:  CLRF   54
1186:  MOVWF  55
1188:  RCALL  110E
118A:  RETURN 0
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
118C:  MOVF   4F,W
118E:  XORLW  0C
1190:  BZ    11A0
1192:  XORLW  06
1194:  BZ    11B0
1196:  XORLW  07
1198:  BZ    11B0
119A:  XORLW  05
119C:  BZ    11BC
119E:  BRA    11C6
....................    { 
....................      case '\f'    :   lcd_envia_byte(0,1); 
11A0:  CLRF   54
11A2:  MOVLW  01
11A4:  MOVWF  55
11A6:  RCALL  110E
....................               delay_ms(2); 
11A8:  MOVLW  02
11AA:  MOVWF  50
11AC:  RCALL  1142
....................             break; 
11AE:  BRA    11D0
....................      case '\n'   : 
....................      case '\r'    :   lcd_pos_xy(1,2); 
11B0:  MOVLW  01
11B2:  MOVWF  50
11B4:  MOVLW  02
11B6:  MOVWF  51
11B8:  RCALL  116A
....................               break; 
11BA:  BRA    11D0
....................      case '\b'    :   lcd_envia_byte(0,0x10); 
11BC:  CLRF   54
11BE:  MOVLW  10
11C0:  MOVWF  55
11C2:  RCALL  110E
....................               break; 
11C4:  BRA    11D0
....................      default   :   lcd_envia_byte(1,c); 
11C6:  MOVLW  01
11C8:  MOVWF  54
11CA:  MOVFF  4F,55
11CE:  RCALL  110E
....................               break; 
....................    } 
11D0:  RETURN 0
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
....................    char valor; 
....................    // seleciona a posi��o do caractere 
....................    lcd_pos_xy(x,y); 
....................    // ativa rs 
....................    output_high(lcd_rs); 
....................    // l� o caractere 
....................    valor = lcd_le_byte(); 
....................    // desativa rs 
....................    output_low(lcd_rs); 
....................    // retorna o valor do caractere 
....................    return valor; 
.................... } 
....................  
.................... void lcd_apaga() 
.................... { 
....................    lcd_envia_byte(0,1); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_cursor_on() 
....................     { 
.................... lcd_envia_byte(0,0x0E); 
....................     } 
....................  
.................... void lcd_cursor_pisca() 
....................     { 
.................... lcd_envia_byte(0,0x0F); 
....................     } 
....................  
.................... void lcd_cursor_off() 
....................     { 
....................  lcd_envia_byte(0,0x0C); 
....................     } 
....................  
.................... void lcd_corre_esquerda() 
....................     { 
....................  lcd_envia_byte(0,0x18); 
....................     } 
....................  
.................... void lcd_corre_direita() 
....................     { 
.................... lcd_envia_byte(0,0x1C); 
....................     } 
....................  
....................  
....................  
.................... #define button1 pin_a4 
.................... #define button2 pin_a5 
.................... #define button3 pin_e0 
.................... #define button4 pin_e1 
....................  
.................... int running; 
....................  
.................... //extremo esquerda, centro esquerda, centro direita, extrema direita 
.................... int16 ad1, ad2, ad3, ad4; 
.................... int16 timerBase = 1; 
.................... int8 adCounter; 
....................  
.................... ///Em qual decisão ele ta 
.................... int8 decisionCounter = 3;//0 
.................... ///Isso aqui serve para ele so contabilizar as tomadas de decisão a cadada 200ms (no timerBase) 
.................... int8 decisionInCoolDown = 0; 
....................  
.................... //Quantos porcento pra um lado ele pode estar antes de ser considerado desalinhado 
.................... float alignRatio = 0.7f; 
....................  
.................... void ClearScreen(); 
.................... void Setup(); 
.................... void AndarReto(); 
.................... ///Se tiver retorna 1 
.................... int8 IsCenterAlign(); 
.................... int8 IsCenterAndNotMargins(); 
.................... int8 IsCenterInside(); 
.................... int8 IsMarginsInside(); 
.................... int8 IsMarginsOutside(); 
.................... int8 IsAllOutside(); 
.................... ///Curva a direita 
.................... int8 IsRight(); 
.................... int8 IsLeft(); 
.................... int8 IsAllAlign(); 
.................... ///uma linha preta sobre todos 
.................... void Align(); 
.................... void InvertedAlign(); 
....................  
.................... #int_timer0 
.................... void timerTick() 
.................... { 
....................     if (adCounter == 0) 
*
12CC:  MOVF   22,F
12CE:  BNZ   12E0
....................     { 
....................         ad1 = read_adc(); 
12D0:  BSF    FC2.1
12D2:  BTFSC  FC2.1
12D4:  BRA    12D2
12D6:  MOVFF  FC3,18
12DA:  MOVFF  FC4,19
....................     } 
12DE:  BRA    131E
....................     else if (adCounter == 1) 
12E0:  DECFSZ 22,W
12E2:  BRA    12F4
....................     { 
....................         ad2 = read_adc(); 
12E4:  BSF    FC2.1
12E6:  BTFSC  FC2.1
12E8:  BRA    12E6
12EA:  MOVFF  FC3,1A
12EE:  MOVFF  FC4,1B
....................     } 
12F2:  BRA    131E
....................     else if (adCounter == 2) 
12F4:  MOVF   22,W
12F6:  SUBLW  02
12F8:  BNZ   130A
....................     { 
....................         ad3 = read_adc(); 
12FA:  BSF    FC2.1
12FC:  BTFSC  FC2.1
12FE:  BRA    12FC
1300:  MOVFF  FC3,1C
1304:  MOVFF  FC4,1D
....................     } 
1308:  BRA    131E
....................     else if (adCounter == 3) 
130A:  MOVF   22,W
130C:  SUBLW  03
130E:  BNZ   131E
....................     { 
....................         ad4 = read_adc(); 
1310:  BSF    FC2.1
1312:  BTFSC  FC2.1
1314:  BRA    1312
1316:  MOVFF  FC3,1E
131A:  MOVFF  FC4,1F
....................     } 
....................     if (timerBase == 2000) 
131E:  MOVF   20,W
1320:  SUBLW  D0
1322:  BNZ   136E
1324:  MOVF   21,W
1326:  SUBLW  07
1328:  BNZ   136E
....................     { 
....................         timerBase = 0; 
132A:  CLRF   21
132C:  CLRF   20
....................         ClearScreen(); 
132E:  BRA    11D2
....................         lcd_pos_xy(1, 1); 
1330:  MOVLW  01
1332:  MOVWF  50
1334:  MOVWF  51
1336:  RCALL  116A
....................         // printf(lcd_escreve, "1: "); 
....................         // printf(lcd_escreve, "%04ld", ad1); 
....................         // printf(lcd_escreve, " 2: "); 
....................         // printf(lcd_escreve, "%04ld", ad2); 
....................         // lcd_pos_xy(1, 2); 
....................         // printf(lcd_escreve, "3: "); 
....................         // printf(lcd_escreve, "%04ld", ad3); 
....................         // printf(lcd_escreve, " 4: "); 
....................         // printf(lcd_escreve, "%04ld", ad3); 
....................         printf(lcd_escreve, " d: %d", decisionCounter); 
1338:  MOVLW  96
133A:  MOVWF  FF6
133C:  MOVLW  13
133E:  MOVWF  FF7
1340:  MOVLW  04
1342:  MOVWF  49
1344:  RCALL  11DC
1346:  MOVFF  23,49
134A:  MOVLW  18
134C:  MOVWF  4A
134E:  RCALL  1222
....................         printf(lcd_escreve, " c: %d", decisionInCoolDown); 
1350:  MOVLW  9E
1352:  MOVWF  FF6
1354:  MOVLW  13
1356:  MOVWF  FF7
1358:  MOVLW  04
135A:  MOVWF  49
135C:  RCALL  11DC
135E:  MOVFF  24,49
1362:  MOVLW  18
1364:  MOVWF  4A
1366:  RCALL  1222
....................  
....................         if (decisionInCoolDown > 0) 
1368:  MOVF   24,F
136A:  BZ    136E
....................         { 
....................             decisionInCoolDown--; 
136C:  DECF   24,F
....................         } 
....................     } 
....................     timerBase++; 
136E:  INCF   20,F
1370:  BTFSC  FD8.2
1372:  INCF   21,F
....................     adCounter++; 
1374:  INCF   22,F
....................  
....................     if (adCounter > 4) 
1376:  MOVF   22,W
1378:  SUBLW  04
137A:  BC    137E
....................     { 
....................         adCounter = 0; 
137C:  CLRF   22
....................     } 
....................  
....................     set_adc_channel(adCounter); 
137E:  RLCF   22,W
1380:  MOVWF  00
1382:  RLCF   00,F
1384:  MOVLW  FC
1386:  ANDWF  00,F
1388:  MOVF   FC2,W
138A:  ANDLW  C3
138C:  IORWF  00,W
138E:  MOVWF  FC2
1390:  BCF    FF2.2
1392:  GOTO   1054
.................... } 
....................  
.................... void main() 
*
20C0:  CLRF   FF8
20C2:  BCF    FD0.7
20C4:  BSF    07.7
20C6:  CLRF   21
20C8:  MOVLW  01
20CA:  MOVWF  20
20CC:  MOVLW  03
20CE:  MOVWF  23
20D0:  CLRF   24
20D2:  MOVLW  33
20D4:  MOVWF  28
20D6:  MOVWF  27
20D8:  MOVWF  26
20DA:  MOVLW  7E
20DC:  MOVWF  25
20DE:  MOVF   FC1,W
20E0:  ANDLW  C0
20E2:  IORLW  0F
20E4:  MOVWF  FC1
20E6:  MOVLW  07
20E8:  MOVWF  FB4
.................... { 
....................     Setup(); 
20EA:  GOTO   14DE
20EE:  CLRF   16
20F0:  BTFSC  FF2.7
20F2:  BSF    16.7
20F4:  BCF    FF2.7
....................     lcd_pos_xy(1, 1); 
20F6:  MOVLW  01
20F8:  MOVWF  50
20FA:  MOVWF  51
20FC:  CALL   116A
2100:  BTFSC  16.7
2102:  BSF    FF2.7
2104:  CLRF   16
2106:  BTFSC  FF2.7
2108:  BSF    16.7
210A:  BCF    FF2.7
....................     delay_ms(5); 
210C:  MOVLW  05
210E:  MOVWF  50
2110:  CALL   1142
2114:  BTFSC  16.7
2116:  BSF    FF2.7
....................     printf(lcd_escreve, " Inicializando"); 
2118:  MOVLW  A6
211A:  MOVWF  FF6
211C:  MOVLW  13
211E:  MOVWF  FF7
2120:  CALL   150C
....................     delay_ms(1000); 
2124:  MOVLW  04
2126:  MOVWF  29
2128:  CLRF   16
212A:  BTFSC  FF2.7
212C:  BSF    16.7
212E:  BCF    FF2.7
2130:  MOVLW  FA
2132:  MOVWF  50
2134:  CALL   1142
2138:  BTFSC  16.7
213A:  BSF    FF2.7
213C:  DECFSZ 29,F
213E:  BRA    2128
....................     do 
....................     { 
....................         if (input(button1) == 0) 
2140:  BSF    F92.4
2142:  BTFSC  F80.4
2144:  BRA    214A
....................         { 
....................             running = 1; 
2146:  MOVLW  01
2148:  MOVWF  17
....................         } 
....................         if (input(button2) == 0) 
214A:  BSF    F92.5
214C:  BTFSC  F80.5
214E:  BRA    2156
....................         { 
....................             running = 0; 
2150:  CLRF   17
....................         } 
2152:  GOTO   27BA
....................          /*if (decisioncounter == 0) 
....................          { 
....................              ///esperar até ser colocado na linha de partida 
....................              if (isallalign()) 
....................              { 
....................                  lcd_pos_xy(1, 2); 
....................                  printf(lcd_escreve, "ta na posicao"); 
....................                  if (running) 
....................                  { 
....................                      decisioncounter++; 
....................                      decisionincooldown = 5; 
....................                  } 
....................              } 
....................              else 
....................              { 
....................                  if (running) 
....................                  { 
....................                      align(); 
....................                  } 
....................              } 
....................          } 
.................... 		 ///Começa desafio da caixa 
....................          else if (decisioncounter == 1 && running) 
....................          { 
....................              ///se alinha ate achar a curva a direita 
....................              align(); 
....................              if (isright() && !decisionincooldown) 
....................              { 
....................                  decisioncounter++; 
....................                  decisionincooldown = 5; 
....................              } 
....................          } 
.................... 		 ///Termina desafio caixa 
.................... 		 else if (decisioncounter == 2 && running) 
.................... 		 { 
.................... 			 align(); 
.................... 			 if (isright() && !decisionincooldown) 
.................... 			 { 
.................... 				 decisioncounter++; 
.................... 				 decisionincooldown = 5; 
.................... 			 } 
.................... 		 }*/ 
.................... 		 ///Primeira curva 
.................... 		 else if (decisioncounter == 3) 
2156:  MOVF   23,W
2158:  SUBLW  03
215A:  BNZ   21A8
.................... 		 { 
.................... 			 align(); 
215C:  RCALL  1BA8
.................... 			 if (isRight() && !decisionincooldown) 
215E:  RCALL  1E22
2160:  MOVF   01,F
2162:  BZ    21A4
2164:  MOVF   24,F
2166:  BNZ   21A4
.................... 			 { 
.................... 				 setleft(920); 
2168:  MOVLW  03
216A:  MOVWF  36
216C:  MOVLW  98
216E:  MOVWF  35
2170:  RCALL  1B44
.................... 				 setright(1000); 
2172:  MOVLW  03
2174:  MOVWF  36
2176:  MOVLW  E8
2178:  MOVWF  35
217A:  RCALL  1B6C
.................... 				 rightbackwardleftforward(); 
217C:  CALL   179E
.................... 				 delay_ms(350); 
2180:  MOVLW  02
2182:  MOVWF  29
2184:  CLRF   16
2186:  BTFSC  FF2.7
2188:  BSF    16.7
218A:  BCF    FF2.7
218C:  MOVLW  AF
218E:  MOVWF  50
2190:  CALL   1142
2194:  BTFSC  16.7
2196:  BSF    FF2.7
2198:  DECFSZ 29,F
219A:  BRA    2184
.................... 				 decisioncounter = decisioncounter + 7; 
219C:  MOVLW  07
219E:  ADDWF  23,F
.................... 				 decisionincooldown = 5; 
21A0:  MOVLW  05
21A2:  MOVWF  24
.................... 			 } 
.................... 		 } 
21A4:  GOTO   27BA
.................... 		 else if (decisioncounter == 10) 
21A8:  MOVF   23,W
21AA:  SUBLW  0A
21AC:  BNZ   21C2
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
21AE:  RCALL  1E6E
21B0:  MOVF   01,F
21B2:  BZ    21BE
21B4:  MOVF   24,F
21B6:  BNZ   21BE
.................... 			 { 
.................... 				 decisioncounter++; 
21B8:  INCF   23,F
.................... 				 decisionincooldown = 5; 
21BA:  MOVLW  05
21BC:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
21BE:  GOTO   27BA
.................... 		 ///Começa desvio do Fixo 
.................... 		 else if (decisioncounter == 11) 
21C2:  MOVF   23,W
21C4:  SUBLW  0B
21C6:  BNZ   2210
.................... 		 { 
.................... 			 align(); 
21C8:  RCALL  1BA8
.................... 			 if (isRight() && !decisionincooldown) 
21CA:  RCALL  1E22
21CC:  MOVF   01,F
21CE:  BZ    220E
21D0:  MOVF   24,F
21D2:  BNZ   220E
.................... 			 { 
.................... 				 setleft(920); 
21D4:  MOVLW  03
21D6:  MOVWF  36
21D8:  MOVLW  98
21DA:  MOVWF  35
21DC:  RCALL  1B44
.................... 				 setright(1000); 
21DE:  MOVLW  03
21E0:  MOVWF  36
21E2:  MOVLW  E8
21E4:  MOVWF  35
21E6:  RCALL  1B6C
.................... 				 rightbackwardleftforward(); 
21E8:  CALL   179E
.................... 				 delay_ms(350); 
21EC:  MOVLW  02
21EE:  MOVWF  29
21F0:  CLRF   16
21F2:  BTFSC  FF2.7
21F4:  BSF    16.7
21F6:  BCF    FF2.7
21F8:  MOVLW  AF
21FA:  MOVWF  50
21FC:  CALL   1142
2200:  BTFSC  16.7
2202:  BSF    FF2.7
2204:  DECFSZ 29,F
2206:  BRA    21F0
.................... 				 decisioncounter++; 
2208:  INCF   23,F
.................... 				 decisionincooldown = 5; 
220A:  MOVLW  05
220C:  MOVWF  24
.................... 			 } 
.................... 		 } 
220E:  BRA    27BA
.................... 		 else if (decisioncounter == 12) 
2210:  MOVF   23,W
2212:  SUBLW  0C
2214:  BNZ   2228
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
2216:  RCALL  1E6E
2218:  MOVF   01,F
221A:  BZ    2226
221C:  MOVF   24,F
221E:  BNZ   2226
.................... 			 { 
.................... 				 decisioncounter++; 
2220:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2222:  MOVLW  05
2224:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
2226:  BRA    27BA
.................... 		 else if (decisioncounter == 13) 
2228:  MOVF   23,W
222A:  SUBLW  0D
222C:  BNZ   2276
.................... 		 { 
.................... 			 align(); 
222E:  RCALL  1BA8
.................... 			 if (isLeft() && !decisionincooldown) 
2230:  RCALL  1FAE
2232:  MOVF   01,F
2234:  BZ    2274
2236:  MOVF   24,F
2238:  BNZ   2274
.................... 			 { 
.................... 				 setleft(1000); 
223A:  MOVLW  03
223C:  MOVWF  36
223E:  MOVLW  E8
2240:  MOVWF  35
2242:  RCALL  1B44
.................... 				 setright(920); 
2244:  MOVLW  03
2246:  MOVWF  36
2248:  MOVLW  98
224A:  MOVWF  35
224C:  RCALL  1B6C
.................... 				 leftbackwardrightforward(); 
224E:  CALL   178C
.................... 				 delay_ms(350); 
2252:  MOVLW  02
2254:  MOVWF  29
2256:  CLRF   16
2258:  BTFSC  FF2.7
225A:  BSF    16.7
225C:  BCF    FF2.7
225E:  MOVLW  AF
2260:  MOVWF  50
2262:  CALL   1142
2266:  BTFSC  16.7
2268:  BSF    FF2.7
226A:  DECFSZ 29,F
226C:  BRA    2256
.................... 				 decisioncounter++; 
226E:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2270:  MOVLW  05
2272:  MOVWF  24
.................... 			 } 
.................... 		 } 
2274:  BRA    27BA
.................... 		 else if (decisioncounter == 14) 
2276:  MOVF   23,W
2278:  SUBLW  0E
227A:  BNZ   228E
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
227C:  RCALL  1E6E
227E:  MOVF   01,F
2280:  BZ    228C
2282:  MOVF   24,F
2284:  BNZ   228C
.................... 			 { 
.................... 				 decisioncounter++; 
2286:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2288:  MOVLW  05
228A:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
228C:  BRA    27BA
.................... 		 else if (decisioncounter == 15) 
228E:  MOVF   23,W
2290:  SUBLW  0F
2292:  BNZ   22DC
.................... 		 { 
.................... 			 align(); 
2294:  RCALL  1BA8
.................... 			 if (isLeft() && !decisionincooldown) 
2296:  RCALL  1FAE
2298:  MOVF   01,F
229A:  BZ    22DA
229C:  MOVF   24,F
229E:  BNZ   22DA
.................... 			 { 
.................... 				 setleft(1000); 
22A0:  MOVLW  03
22A2:  MOVWF  36
22A4:  MOVLW  E8
22A6:  MOVWF  35
22A8:  RCALL  1B44
.................... 				 setright(920); 
22AA:  MOVLW  03
22AC:  MOVWF  36
22AE:  MOVLW  98
22B0:  MOVWF  35
22B2:  RCALL  1B6C
.................... 				 leftbackwardrightforward(); 
22B4:  CALL   178C
.................... 				 delay_ms(350); 
22B8:  MOVLW  02
22BA:  MOVWF  29
22BC:  CLRF   16
22BE:  BTFSC  FF2.7
22C0:  BSF    16.7
22C2:  BCF    FF2.7
22C4:  MOVLW  AF
22C6:  MOVWF  50
22C8:  CALL   1142
22CC:  BTFSC  16.7
22CE:  BSF    FF2.7
22D0:  DECFSZ 29,F
22D2:  BRA    22BC
.................... 				 decisioncounter++; 
22D4:  INCF   23,F
.................... 				 decisionincooldown = 5; 
22D6:  MOVLW  05
22D8:  MOVWF  24
.................... 			 } 
.................... 		 } 
22DA:  BRA    27BA
.................... 		 else if (decisioncounter == 16) 
22DC:  MOVF   23,W
22DE:  SUBLW  10
22E0:  BNZ   22F4
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
22E2:  RCALL  1E6E
22E4:  MOVF   01,F
22E6:  BZ    22F2
22E8:  MOVF   24,F
22EA:  BNZ   22F2
.................... 			 { 
.................... 				 decisioncounter++; 
22EC:  INCF   23,F
.................... 				 decisionincooldown = 5; 
22EE:  MOVLW  05
22F0:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
22F2:  BRA    27BA
.................... 		 ///Volta pra pista 
.................... 		 else if (decisioncounter == 17) 
22F4:  MOVF   23,W
22F6:  SUBLW  11
22F8:  BNZ   2342
.................... 		 { 
.................... 			 align(); 
22FA:  RCALL  1BA8
.................... 			 if (isRight() && !decisionincooldown) 
22FC:  RCALL  1E22
22FE:  MOVF   01,F
2300:  BZ    2340
2302:  MOVF   24,F
2304:  BNZ   2340
.................... 			 { 
.................... 				 setleft(950); 
2306:  MOVLW  03
2308:  MOVWF  36
230A:  MOVLW  B6
230C:  MOVWF  35
230E:  RCALL  1B44
.................... 				 setright(1000); 
2310:  MOVLW  03
2312:  MOVWF  36
2314:  MOVLW  E8
2316:  MOVWF  35
2318:  RCALL  1B6C
.................... 				 rightbackwardleftforward(); 
231A:  CALL   179E
.................... 				 delay_ms(350); 
231E:  MOVLW  02
2320:  MOVWF  29
2322:  CLRF   16
2324:  BTFSC  FF2.7
2326:  BSF    16.7
2328:  BCF    FF2.7
232A:  MOVLW  AF
232C:  MOVWF  50
232E:  CALL   1142
2332:  BTFSC  16.7
2334:  BSF    FF2.7
2336:  DECFSZ 29,F
2338:  BRA    2322
.................... 				 decisioncounter++; 
233A:  INCF   23,F
.................... 				 decisionincooldown = 5; 
233C:  MOVLW  05
233E:  MOVWF  24
.................... 			 } 
.................... 		 } 
2340:  BRA    27BA
.................... 		 else if (decisioncounter == 18) 
2342:  MOVF   23,W
2344:  SUBLW  12
2346:  BNZ   235A
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
2348:  RCALL  1E6E
234A:  MOVF   01,F
234C:  BZ    2358
234E:  MOVF   24,F
2350:  BNZ   2358
.................... 			 { 
.................... 				 decisioncounter++; 
2352:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2354:  MOVLW  05
2356:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
2358:  BRA    27BA
.................... 		 ///Alinha no zigzag 
.................... 		 ///Dobra pra fazer desafio sem linha 
.................... 		 else if (decisioncounter == 19) 
235A:  MOVF   23,W
235C:  SUBLW  13
235E:  BNZ   23AC
.................... 		 { 
.................... 			 align(); 
2360:  RCALL  1BA8
.................... 			 if (isLeft() && !decisionincooldown) 
2362:  RCALL  1FAE
2364:  MOVF   01,F
2366:  BZ    23AA
2368:  MOVF   24,F
236A:  BNZ   23AA
.................... 			 { 
.................... 				 setleft(1000); 
236C:  MOVLW  03
236E:  MOVWF  36
2370:  MOVLW  E8
2372:  MOVWF  35
2374:  CALL   1B44
.................... 				 setright(920); 
2378:  MOVLW  03
237A:  MOVWF  36
237C:  MOVLW  98
237E:  MOVWF  35
2380:  CALL   1B6C
.................... 				 leftbackwardrightforward(); 
2384:  CALL   178C
.................... 				 delay_ms(350); 
2388:  MOVLW  02
238A:  MOVWF  29
238C:  CLRF   16
238E:  BTFSC  FF2.7
2390:  BSF    16.7
2392:  BCF    FF2.7
2394:  MOVLW  AF
2396:  MOVWF  50
2398:  CALL   1142
239C:  BTFSC  16.7
239E:  BSF    FF2.7
23A0:  DECFSZ 29,F
23A2:  BRA    238C
.................... 				 decisioncounter++; 
23A4:  INCF   23,F
.................... 				 decisionincooldown = 5; 
23A6:  MOVLW  05
23A8:  MOVWF  24
.................... 			 } 
.................... 		 } 
23AA:  BRA    27BA
.................... 		 else if (decisioncounter == 20) 
23AC:  MOVF   23,W
23AE:  SUBLW  14
23B0:  BNZ   23C4
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
23B2:  RCALL  1E6E
23B4:  MOVF   01,F
23B6:  BZ    23C2
23B8:  MOVF   24,F
23BA:  BNZ   23C2
.................... 			 { 
.................... 				 decisioncounter++; 
23BC:  INCF   23,F
.................... 				 decisionincooldown = 5; 
23BE:  MOVLW  05
23C0:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
23C2:  BRA    27BA
.................... 		 ///Começa desafio sem linha 
.................... 		 else if (decisionCounter == 21) 
23C4:  MOVF   23,W
23C6:  SUBLW  15
23C8:  BNZ   23E0
.................... 		 { 
.................... 			 ///Desafio de andar cego 
.................... 			 ///!!!!!!!!!!   AQUI ELE TERIA QUE ESTAR MUITO BEM ALINHADO, SERIA BOM TER A FUNÇÃO DE ALINHAR E COLOCAR PARA ALINHAR BEM AQUI 
.................... 			 Align(); 
23CA:  CALL   1BA8
.................... 			 if (IsAllOutside() && !decisionInCoolDown) 
23CE:  BRA    1FFA
23D0:  MOVF   01,F
23D2:  BZ    23DE
23D4:  MOVF   24,F
23D6:  BNZ   23DE
.................... 			 { 
.................... 				 decisionCounter++; 
23D8:  INCF   23,F
.................... 				 decisionInCoolDown = 3; 
23DA:  MOVLW  03
23DC:  MOVWF  24
.................... 			 } 
.................... 		 } 
23DE:  BRA    27BA
.................... 		 ///Termina desafio sem linha 
.................... 		 else if (decisionCounter == 22) 
23E0:  MOVF   23,W
23E2:  SUBLW  16
23E4:  BNZ   2408
.................... 		 { 
.................... 			 ///ESTA NO DESAFIO DE ANDAR SEM LINHA 
.................... 			 SetBothPwm(890); 
23E6:  MOVLW  03
23E8:  MOVWF  36
23EA:  MOVLW  7A
23EC:  MOVWF  35
23EE:  CALL   173E
.................... 			 if (IsCenterInside() && !decisionInCoolDown) 
23F2:  BRA    2042
23F4:  MOVF   01,F
23F6:  BZ    2406
23F8:  MOVF   24,F
23FA:  BNZ   2406
.................... 			 { 
.................... 				 Align(); 
23FC:  CALL   1BA8
.................... 				 decisionCounter++; 
2400:  INCF   23,F
.................... 				 decisionInCoolDown = 1; 
2402:  MOVLW  01
2404:  MOVWF  24
.................... 			 } 
.................... 		 } 
2406:  BRA    27BA
.................... 		 ///Curva Direita 
.................... 		 else if (decisioncounter == 23) 
2408:  MOVF   23,W
240A:  SUBLW  17
240C:  BNZ   245C
.................... 		 { 
.................... 			 align(); 
240E:  CALL   1BA8
.................... 			 if (isRight() && !decisionincooldown) 
2412:  RCALL  1E22
2414:  MOVF   01,F
2416:  BZ    245A
2418:  MOVF   24,F
241A:  BNZ   245A
.................... 			 { 
.................... 				 setleft(920); 
241C:  MOVLW  03
241E:  MOVWF  36
2420:  MOVLW  98
2422:  MOVWF  35
2424:  CALL   1B44
.................... 				 setright(1000); 
2428:  MOVLW  03
242A:  MOVWF  36
242C:  MOVLW  E8
242E:  MOVWF  35
2430:  CALL   1B6C
.................... 				 rightbackwardleftforward(); 
2434:  CALL   179E
.................... 				 delay_ms(350); 
2438:  MOVLW  02
243A:  MOVWF  29
243C:  CLRF   16
243E:  BTFSC  FF2.7
2440:  BSF    16.7
2442:  BCF    FF2.7
2444:  MOVLW  AF
2446:  MOVWF  50
2448:  CALL   1142
244C:  BTFSC  16.7
244E:  BSF    FF2.7
2450:  DECFSZ 29,F
2452:  BRA    243C
.................... 				 decisioncounter++; 
2454:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2456:  MOVLW  05
2458:  MOVWF  24
.................... 			 } 
.................... 		 } 
245A:  BRA    27BA
.................... 		 else if (decisioncounter == 24) 
245C:  MOVF   23,W
245E:  SUBLW  18
2460:  BNZ   2474
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
2462:  RCALL  1E6E
2464:  MOVF   01,F
2466:  BZ    2472
2468:  MOVF   24,F
246A:  BNZ   2472
.................... 			 { 
.................... 				 decisioncounter++; 
246C:  INCF   23,F
.................... 				 decisionincooldown = 5; 
246E:  MOVLW  05
2470:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
2472:  BRA    27BA
.................... 		 else if (decisioncounter == 25) 
2474:  MOVF   23,W
2476:  SUBLW  19
2478:  BNZ   2490
.................... 		 { 
.................... 			 align(); 
247A:  CALL   1BA8
.................... 			 if (isRight() && !decisionincooldown) 
247E:  RCALL  1E22
2480:  MOVF   01,F
2482:  BZ    248E
2484:  MOVF   24,F
2486:  BNZ   248E
.................... 			 { 
.................... 				 decisioncounter++; 
2488:  INCF   23,F
.................... 				 decisionincooldown = 2; 
248A:  MOVLW  02
248C:  MOVWF  24
.................... 			 } 
.................... 		 } 
248E:  BRA    27BA
.................... 		 ///Começa desvio da lombada 
.................... 		 else if (decisioncounter == 26) 
2490:  MOVF   23,W
2492:  SUBLW  1A
2494:  BNZ   24E4
.................... 		 { 
.................... 			 ///se alinha ate achar a curva a direita 
.................... 			 align(); 
2496:  CALL   1BA8
.................... 			 if (isright() && !decisionincooldown) 
249A:  RCALL  1E22
249C:  MOVF   01,F
249E:  BZ    24E2
24A0:  MOVF   24,F
24A2:  BNZ   24E2
.................... 			 { 
.................... 				 ///começa a fazer a curva a direita girando um pouco para a direita e dando uma ré 
.................... 				 setleft(920); 
24A4:  MOVLW  03
24A6:  MOVWF  36
24A8:  MOVLW  98
24AA:  MOVWF  35
24AC:  CALL   1B44
.................... 				 setright(1000); 
24B0:  MOVLW  03
24B2:  MOVWF  36
24B4:  MOVLW  E8
24B6:  MOVWF  35
24B8:  CALL   1B6C
.................... 				 rightbackwardleftforward(); 
24BC:  CALL   179E
.................... 				 delay_ms(350); 
24C0:  MOVLW  02
24C2:  MOVWF  29
24C4:  CLRF   16
24C6:  BTFSC  FF2.7
24C8:  BSF    16.7
24CA:  BCF    FF2.7
24CC:  MOVLW  AF
24CE:  MOVWF  50
24D0:  CALL   1142
24D4:  BTFSC  16.7
24D6:  BSF    FF2.7
24D8:  DECFSZ 29,F
24DA:  BRA    24C4
.................... 				 decisioncounter++; 
24DC:  INCF   23,F
.................... 				 decisionincooldown = 5; 
24DE:  MOVLW  05
24E0:  MOVWF  24
.................... 			 } 
.................... 		 } 
24E2:  BRA    27BA
.................... 		 else if (decisioncounter == 27) 
24E4:  MOVF   23,W
24E6:  SUBLW  1B
24E8:  BNZ   24FC
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
24EA:  RCALL  1E6E
24EC:  MOVF   01,F
24EE:  BZ    24FA
24F0:  MOVF   24,F
24F2:  BNZ   24FA
.................... 			 { 
.................... 				 decisioncounter++; 
24F4:  INCF   23,F
.................... 				 decisionincooldown = 5; 
24F6:  MOVLW  05
24F8:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
24FA:  BRA    27BA
.................... 		 else if (decisioncounter == 28) 
24FC:  MOVF   23,W
24FE:  SUBLW  1C
2500:  BNZ   2550
.................... 		 { 
.................... 			 align(); 
2502:  CALL   1BA8
.................... 			 if (isLeft() && !decisionincooldown) 
2506:  RCALL  1FAE
2508:  MOVF   01,F
250A:  BZ    254E
250C:  MOVF   24,F
250E:  BNZ   254E
.................... 			 { 
.................... 				 setleft(1000); 
2510:  MOVLW  03
2512:  MOVWF  36
2514:  MOVLW  E8
2516:  MOVWF  35
2518:  CALL   1B44
.................... 				 setright(920); 
251C:  MOVLW  03
251E:  MOVWF  36
2520:  MOVLW  98
2522:  MOVWF  35
2524:  CALL   1B6C
.................... 				 leftbackwardrightforward(); 
2528:  CALL   178C
.................... 				 delay_ms(350); 
252C:  MOVLW  02
252E:  MOVWF  29
2530:  CLRF   16
2532:  BTFSC  FF2.7
2534:  BSF    16.7
2536:  BCF    FF2.7
2538:  MOVLW  AF
253A:  MOVWF  50
253C:  CALL   1142
2540:  BTFSC  16.7
2542:  BSF    FF2.7
2544:  DECFSZ 29,F
2546:  BRA    2530
.................... 				 decisioncounter++; 
2548:  INCF   23,F
.................... 				 decisionincooldown = 5; 
254A:  MOVLW  05
254C:  MOVWF  24
.................... 			 } 
.................... 		 } 
254E:  BRA    27BA
.................... 		 else if (decisioncounter == 29) 
2550:  MOVF   23,W
2552:  SUBLW  1D
2554:  BNZ   2568
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
2556:  RCALL  1E6E
2558:  MOVF   01,F
255A:  BZ    2566
255C:  MOVF   24,F
255E:  BNZ   2566
.................... 			 { 
.................... 				 decisioncounter++; 
2560:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2562:  MOVLW  05
2564:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
2566:  BRA    27BA
.................... 		 else if (decisioncounter == 30) 
2568:  MOVF   23,W
256A:  SUBLW  1E
256C:  BNZ   25BC
.................... 		 { 
.................... 			 align(); 
256E:  CALL   1BA8
.................... 			 if (isLeft() && !decisionincooldown) 
2572:  RCALL  1FAE
2574:  MOVF   01,F
2576:  BZ    25BA
2578:  MOVF   24,F
257A:  BNZ   25BA
.................... 			 { 
.................... 				 setleft(950); 
257C:  MOVLW  03
257E:  MOVWF  36
2580:  MOVLW  B6
2582:  MOVWF  35
2584:  CALL   1B44
.................... 				 setright(900); 
2588:  MOVLW  03
258A:  MOVWF  36
258C:  MOVLW  84
258E:  MOVWF  35
2590:  CALL   1B6C
.................... 				 leftbackwardrightforward(); 
2594:  CALL   178C
.................... 				 delay_ms(400); 
2598:  MOVLW  02
259A:  MOVWF  29
259C:  CLRF   16
259E:  BTFSC  FF2.7
25A0:  BSF    16.7
25A2:  BCF    FF2.7
25A4:  MOVLW  C8
25A6:  MOVWF  50
25A8:  CALL   1142
25AC:  BTFSC  16.7
25AE:  BSF    FF2.7
25B0:  DECFSZ 29,F
25B2:  BRA    259C
.................... 				 decisioncounter++; 
25B4:  INCF   23,F
.................... 				 decisionincooldown = 5; 
25B6:  MOVLW  05
25B8:  MOVWF  24
.................... 			 } 
.................... 		 } 
25BA:  BRA    27BA
.................... 		 else if (decisioncounter == 31) 
25BC:  MOVF   23,W
25BE:  SUBLW  1F
25C0:  BNZ   25D4
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
25C2:  RCALL  1E6E
25C4:  MOVF   01,F
25C6:  BZ    25D2
25C8:  MOVF   24,F
25CA:  BNZ   25D2
.................... 			 { 
.................... 				 decisioncounter++; 
25CC:  INCF   23,F
.................... 				 decisionincooldown = 5; 
25CE:  MOVLW  05
25D0:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
25D2:  BRA    27BA
.................... 		 ///Volta pra pista 
.................... 		 else if (decisioncounter == 32) 
25D4:  MOVF   23,W
25D6:  SUBLW  20
25D8:  BNZ   2628
.................... 		 { 
.................... 			 align(); 
25DA:  CALL   1BA8
.................... 			 if (isRight() && !decisionincooldown) 
25DE:  RCALL  1E22
25E0:  MOVF   01,F
25E2:  BZ    2626
25E4:  MOVF   24,F
25E6:  BNZ   2626
.................... 			 { 
.................... 				 setleft(900); 
25E8:  MOVLW  03
25EA:  MOVWF  36
25EC:  MOVLW  84
25EE:  MOVWF  35
25F0:  CALL   1B44
.................... 				 setright(950); 
25F4:  MOVLW  03
25F6:  MOVWF  36
25F8:  MOVLW  B6
25FA:  MOVWF  35
25FC:  CALL   1B6C
.................... 				 rightbackwardleftforward(); 
2600:  CALL   179E
.................... 				 delay_ms(400); 
2604:  MOVLW  02
2606:  MOVWF  29
2608:  CLRF   16
260A:  BTFSC  FF2.7
260C:  BSF    16.7
260E:  BCF    FF2.7
2610:  MOVLW  C8
2612:  MOVWF  50
2614:  CALL   1142
2618:  BTFSC  16.7
261A:  BSF    FF2.7
261C:  DECFSZ 29,F
261E:  BRA    2608
.................... 				 decisioncounter++; 
2620:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2622:  MOVLW  05
2624:  MOVWF  24
.................... 			 } 
.................... 		 } 
2626:  BRA    27BA
.................... 		 else if (decisioncounter == 33) 
2628:  MOVF   23,W
262A:  SUBLW  21
262C:  BNZ   2640
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
262E:  RCALL  1E6E
2630:  MOVF   01,F
2632:  BZ    263E
2634:  MOVF   24,F
2636:  BNZ   263E
.................... 			 { 
.................... 				 decisioncounter++; 
2638:  INCF   23,F
.................... 				 decisionincooldown = 5; 
263A:  MOVLW  05
263C:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
263E:  BRA    27BA
.................... 		 ///Curva direita final 
.................... 		 else if (decisioncounter == 34) 
2640:  MOVF   23,W
2642:  SUBLW  22
2644:  BNZ   2696
.................... 		 { 
.................... 			 align(); 
2646:  CALL   1BA8
.................... 			 if (isRight() && !decisionincooldown) 
264A:  CALL   1E22
264E:  MOVF   01,F
2650:  BZ    2694
2652:  MOVF   24,F
2654:  BNZ   2694
.................... 			 { 
.................... 				 setleft(900); 
2656:  MOVLW  03
2658:  MOVWF  36
265A:  MOVLW  84
265C:  MOVWF  35
265E:  CALL   1B44
.................... 				 setright(950); 
2662:  MOVLW  03
2664:  MOVWF  36
2666:  MOVLW  B6
2668:  MOVWF  35
266A:  CALL   1B6C
.................... 				 rightbackwardleftforward(); 
266E:  CALL   179E
.................... 				 delay_ms(400); 
2672:  MOVLW  02
2674:  MOVWF  29
2676:  CLRF   16
2678:  BTFSC  FF2.7
267A:  BSF    16.7
267C:  BCF    FF2.7
267E:  MOVLW  C8
2680:  MOVWF  50
2682:  CALL   1142
2686:  BTFSC  16.7
2688:  BSF    FF2.7
268A:  DECFSZ 29,F
268C:  BRA    2676
.................... 				 decisioncounter++; 
268E:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2690:  MOVLW  05
2692:  MOVWF  24
.................... 			 } 
.................... 		 } 
2694:  BRA    27BA
.................... 		 else if (decisioncounter == 35) 
2696:  MOVF   23,W
2698:  SUBLW  23
269A:  BNZ   26B0
.................... 		 { 
.................... 			 if (iscenteralign() && !decisionincooldown) 
269C:  CALL   1E6E
26A0:  MOVF   01,F
26A2:  BZ    26AE
26A4:  MOVF   24,F
26A6:  BNZ   26AE
.................... 			 { 
.................... 				 decisioncounter++; 
26A8:  INCF   23,F
.................... 				 decisionincooldown = 5; 
26AA:  MOVLW  05
26AC:  MOVWF  24
.................... 			 } 
.................... 			 else 
.................... 			 { 
.................... 				 ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
.................... 			 } 
.................... 		 } 
26AE:  BRA    27BA
.................... 		 else if (decisioncounter == 36) 
26B0:  MOVF   23,W
26B2:  SUBLW  24
26B4:  BNZ   26CE
.................... 		 { 
.................... 			 align(); 
26B6:  CALL   1BA8
.................... 			 if (isRight() && !decisioninCoolDown) 
26BA:  CALL   1E22
26BE:  MOVF   01,F
26C0:  BZ    26CC
26C2:  MOVF   24,F
26C4:  BNZ   26CC
.................... 			 { 
.................... 				 decisioncounter++; 
26C6:  INCF   23,F
.................... 				 decisionincooldown = 5; 
26C8:  MOVLW  05
26CA:  MOVWF  24
.................... 			 } 
.................... 		 } 
26CC:  BRA    27BA
.................... 		 ///Primeira linha do desafio de parada 
.................... 		 else if (decisioncounter == 37) 
26CE:  MOVF   23,W
26D0:  SUBLW  25
26D2:  BNZ   26EA
.................... 		 { 
.................... 			 ///primeira linha de parada 
.................... 			 align(); 
26D4:  CALL   1BA8
.................... 			 if (isallalign() && !decisionincooldown) 
26D8:  RCALL  2072
26DA:  MOVF   01,F
26DC:  BZ    26E8
26DE:  MOVF   24,F
26E0:  BNZ   26E8
.................... 			 { 
.................... 				 decisioncounter++; 
26E2:  INCF   23,F
.................... 				 decisionincooldown = 10; 
26E4:  MOVLW  0A
26E6:  MOVWF  24
.................... 			 } 
.................... 		 } 
26E8:  BRA    27BA
.................... 		 else if (decisioncounter == 38) 
26EA:  MOVF   23,W
26EC:  SUBLW  26
26EE:  BNZ   272C
.................... 		 { 
.................... 			 ///logo após passar a primeira linha de parada, anda alinhado até o decisionincooldown e para 
.................... 			 align(); 
26F0:  CALL   1BA8
.................... 			 if (!decisionincooldown) 
26F4:  MOVF   24,F
26F6:  BNZ   272A
.................... 			 { 
.................... 				 setbothpwm(0); 
26F8:  CLRF   36
26FA:  CLRF   35
26FC:  CALL   173E
.................... 				 delay_ms(2000); 
2700:  MOVLW  08
2702:  MOVWF  29
2704:  CLRF   16
2706:  BTFSC  FF2.7
2708:  BSF    16.7
270A:  BCF    FF2.7
270C:  MOVLW  FA
270E:  MOVWF  50
2710:  CALL   1142
2714:  BTFSC  16.7
2716:  BSF    FF2.7
2718:  DECFSZ 29,F
271A:  BRA    2704
.................... 				 setbothpwm(920); 
271C:  MOVLW  03
271E:  MOVWF  36
2720:  MOVLW  98
2722:  MOVWF  35
2724:  CALL   173E
.................... 				 decisioncounter++; 
2728:  INCF   23,F
.................... 			 } 
.................... 		 } 
272A:  BRA    27BA
.................... 		 ///Segunda linha do desafio de parada 
.................... 		 else if (decisioncounter == 39) 
272C:  MOVF   23,W
272E:  SUBLW  27
2730:  BNZ   2748
.................... 		 { 
.................... 			 ///logo após sair da parada, anda alinhado até achar a proxima linha completa 
.................... 			 align(); 
2732:  CALL   1BA8
.................... 			 if (isallalign() && !decisionincooldown) 
2736:  RCALL  2072
2738:  MOVF   01,F
273A:  BZ    2746
273C:  MOVF   24,F
273E:  BNZ   2746
.................... 			 { 
.................... 				 decisioncounter++; 
2740:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2742:  MOVLW  05
2744:  MOVWF  24
.................... 			 } 
.................... 		 } 
2746:  BRA    27BA
.................... 		 else if (decisioncounter == 40) { 
2748:  MOVF   23,W
274A:  SUBLW  28
274C:  BNZ   2766
.................... 			 align(); 
274E:  CALL   1BA8
.................... 			 if (isRight() && !decisioninCoolDown) 
2752:  CALL   1E22
2756:  MOVF   01,F
2758:  BZ    2764
275A:  MOVF   24,F
275C:  BNZ   2764
.................... 			 { 
.................... 				 decisioncounter++; 
275E:  INCF   23,F
.................... 				 decisionincooldown = 5; 
2760:  MOVLW  05
2762:  MOVWF  24
.................... 			 } 
.................... 		 } 
2764:  BRA    27BA
.................... 		 ///Teste da linha final 
.................... 		 else if (decisionCounter == 41) 
2766:  MOVF   23,W
2768:  SUBLW  29
276A:  BNZ   2780
.................... 		 { 
.................... 			 Align(); 
276C:  CALL   1BA8
.................... 			 if (IsAllAlign() && !decisionInCoolDown) 
2770:  RCALL  2072
2772:  MOVF   01,F
2774:  BZ    277E
2776:  MOVF   24,F
2778:  BNZ   277E
.................... 			 { 
.................... 				 decisionCounter++; 
277A:  INCF   23,F
.................... 				 decisionInCoolDown = 0; 
277C:  CLRF   24
.................... 			 } 
.................... 		 } 
277E:  BRA    27BA
.................... 		 ///Encerra 
.................... 		 else if (decisionCounter == 42) 
2780:  MOVF   23,W
2782:  SUBLW  2A
2784:  BNZ   27B2
.................... 		 { 
.................... 			 ///TODO: desvia do desafio de remover o bloco 
.................... 			 SetBothPwm(0); 
2786:  CLRF   36
2788:  CLRF   35
278A:  CALL   173E
278E:  CLRF   16
2790:  BTFSC  FF2.7
2792:  BSF    16.7
2794:  BCF    FF2.7
.................... 			 lcd_pos_xy(1, 1); 
2796:  MOVLW  01
2798:  MOVWF  50
279A:  MOVWF  51
279C:  CALL   116A
27A0:  BTFSC  16.7
27A2:  BSF    FF2.7
.................... 			 printf(lcd_escreve, "Fim do programado"); 
27A4:  MOVLW  B6
27A6:  MOVWF  FF6
27A8:  MOVLW  13
27AA:  MOVWF  FF7
27AC:  CALL   150C
.................... 		 } 
27B0:  BRA    27BA
....................          /*else if (decisioncounter == 2 && running) 
....................          { 
....................              if (iscenteralign() && !decisionincooldown) 
....................              { 
....................                  decisioncounter++; 
....................                  decisionincooldown = 5; 
....................              } 
....................              else 
....................              { 
....................                  ///continua girando do jeito que estava ate ficar com os 2 sensores no centro 
....................              } 
....................          } 
....................          else if (decisioncounter == 3) 
....................          { 
....................              ///anda alinhado até achar a linha preta 
....................              align(); 
....................              if (isallalign() && !decisionincooldown) 
....................              { 
....................                  setleft(900); 
....................                  setright(950); 
....................                  rightbackwardleftforward(); 
....................                  delay_ms(500); 
....................                  decisioncounter++; 
....................                  decisionincooldown = 25; 
....................              } 
....................          } 
....................          else if (decisioncounter == 4) 
....................          { 
....................              ///primeira linha de parada 
....................              align(); 
....................              if (isallalign() && !decisionincooldown) 
....................              { 
....................                  decisioncounter++; 
....................                  decisionincooldown = 11; 
....................              } 
....................          } 
....................          else if (decisioncounter == 5) 
....................          { 
....................              ///logo após passar a primeira linha de parada, anda alinhado até o decisionincooldown e para 
....................              align(); 
....................              if (!decisionincooldown) 
....................              { 
....................                  setbothpwm(0); 
....................                  delay_ms(2000); 
....................                  setbothpwm(920); 
....................                  decisioncounter++; 
....................              } 
....................          } 
....................          else if (decisioncounter == 6) 
....................          { 
....................              ///logo após sair da parada, anda alinhado até achar a proxima linha completa 
....................              align(); 
....................              if (isallalign() && !decisionincooldown) 
....................              { 
....................                  decisioncounter++; 
....................                  decisionincooldown = 5; 
....................              } 
....................          } 
....................  
....................         //Era 7 
....................         else if (decisionCounter == 7) 
....................         { 
....................             ///Passou pela linha completa do desafio de parar anda alinhado até a linha da esquerda do desafio de andar invertido 
....................             Align(); 
....................             if (IsLeft() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 0; 
....................             } 
....................         } 
....................         else if (decisionCounter == 8) 
....................         { 
....................             ///Anda alinhado até chegar no desafio da linha invertida, a linha invertida começa quando o centro esta fora e as extremidades dentro 
....................  
....................             Align(); 
....................             if (IsMarginsInside() && !decisionInCoolDown) 
....................             { 
....................                 ///Iniciou o desafio de linha invertido 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 1; 
....................             } 
....................         } 
....................         else if (decisionCounter == 9) 
....................         { 
....................             ///Desafio da linha invertida 
....................             InvertedAlign(); 
....................             ///Anda ate não ter linha nas extremidades 
....................             if (IsMarginsOutside() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 2; 
....................             } 
....................         } 
....................         else if (decisionCounter == 10) 
....................         { 
....................             Align(); 
....................             if (IsLeft() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 5; 
....................             } 
....................         } 
....................         else if (decisionCounter == 11) 
....................         { 
....................             Align(); 
....................             if (IsLeft() && !decisionInCoolDown) 
....................             { 
....................                 SetLeft(950); 
....................                 SetRight(900); 
....................                 LeftBackwardRightForward(); 
....................                 delay_ms(500); 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 8; 
....................             } 
....................         } 
....................         else if (decisionCounter == 12) 
....................         { 
....................  
....................             Align(); 
....................             if (IsLeft() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 5; 
....................             } 
....................         } 
....................         else if (decisionCounter == 13) 
....................         { 
....................             ///Desafio de andar cego 
....................             ///!!!!!!!!!!   AQUI ELE TERIA QUE ESTAR MUITO BEM ALINHADO, SERIA BOM TER A FUNÇÃO DE ALINHAR E COLOCAR PARA ALINHAR BEM AQUI 
....................             Align(); 
....................             if (IsAllOutside() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 3; 
....................             } 
....................         } 
....................         else if (decisionCounter == 14) 
....................         { 
....................             ///ESTA NO DESAFIO DE ANDAR SEM LINHA 
....................             SetBothPwm(890); 
....................             if (IsCenterInside() && !decisionInCoolDown) 
....................             { 
....................                 Align(); 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 1; 
....................             } 
....................         } 
....................         else if (decisionCounter == 15) 
....................         { 
....................             ///Passou pelo desafio de andar sem linha 
....................             Align(); 
....................             if (IsLeft() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 1; 
....................             } 
....................         } 
....................         else if (decisionCounter == 16) 
....................         { 
....................             Align(); 
....................             if (IsRight() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 2; 
....................             } 
....................         } 
....................         else if (decisionCounter == 17) 
....................         { 
....................             Align(); 
....................             if (IsRight() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 2; 
....................             } 
....................         } 
....................         else if (decisionCounter == 18) 
....................         { 
....................             Align(); 
....................             if (IsLeft() && !decisionInCoolDown) 
....................             { 
....................                 SetLeft(950); 
....................                 SetRight(900); 
....................                 LeftBackwardRightForward(); 
....................                 delay_ms(500); 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 7; 
....................             } 
....................         } 
....................         else if (decisionCounter == 19) 
....................         { 
....................             Align(); 
....................             if (IsAllAlign() && !decisionInCoolDown) 
....................             { 
....................                 decisionCounter++; 
....................                 decisionInCoolDown = 0; 
....................             } 
....................         } 
....................  
....................         else if (decisionCounter == 20) 
....................         { 
....................             ///TODO: desvia do desafio de remover o bloco 
....................             SetBothPwm(0); 
....................             lcd_pos_xy(1, 1); 
....................             printf(lcd_escreve, "Fim do programado"); 
....................         }*/ 
....................  
....................         else 
....................         { 
....................             ///Se ja passou por todas as decisões 
....................             SetBothPwm(0); 
27B2:  CLRF   36
27B4:  CLRF   35
27B6:  CALL   173E
....................         } 
....................  
....................         if (running == 0) 
27BA:  MOVF   17,F
27BC:  BNZ   27CE
....................         { 
....................             SetBothPwm(0); 
27BE:  CLRF   36
27C0:  CLRF   35
27C2:  CALL   173E
....................             SetBothPwm(0); 
27C6:  CLRF   36
27C8:  CLRF   35
27CA:  CALL   173E
....................         } 
....................     } while (1); 
27CE:  BRA    2140
.................... } 
.................... int8 IsCenterAlign() 
*
1E6E:  MOVFF  1B,3A
1E72:  MOVFF  1A,39
1E76:  CALL   1538
1E7A:  MOVFF  03,34
1E7E:  MOVFF  02,33
1E82:  MOVFF  01,32
1E86:  MOVFF  00,31
1E8A:  MOVF   1A,W
1E8C:  ADDWF  18,W
1E8E:  MOVWF  01
1E90:  MOVF   1B,W
1E92:  ADDWFC 19,W
1E94:  MOVWF  03
1E96:  MOVFF  01,39
1E9A:  MOVWF  3A
1E9C:  CALL   1538
1EA0:  MOVFF  34,3C
1EA4:  MOVFF  33,3B
1EA8:  MOVFF  32,3A
1EAC:  MOVFF  31,39
1EB0:  MOVFF  03,40
1EB4:  MOVFF  02,3F
1EB8:  MOVFF  01,3E
1EBC:  MOVFF  00,3D
1EC0:  CALL   156E
1EC4:  MOVFF  03,2C
1EC8:  MOVFF  02,2B
1ECC:  MOVFF  01,2A
1ED0:  MOVFF  00,29
1ED4:  MOVFF  1D,3A
1ED8:  MOVFF  1C,39
1EDC:  CALL   1538
1EE0:  MOVFF  03,34
1EE4:  MOVFF  02,33
1EE8:  MOVFF  01,32
1EEC:  MOVFF  00,31
1EF0:  MOVF   1A,W
1EF2:  ADDWF  18,W
1EF4:  MOVWF  01
1EF6:  MOVF   1B,W
1EF8:  ADDWFC 19,W
1EFA:  MOVWF  03
1EFC:  MOVFF  01,39
1F00:  MOVWF  3A
1F02:  CALL   1538
1F06:  MOVFF  34,3C
1F0A:  MOVFF  33,3B
1F0E:  MOVFF  32,3A
1F12:  MOVFF  31,39
1F16:  MOVFF  03,40
1F1A:  MOVFF  02,3F
1F1E:  MOVFF  01,3E
1F22:  MOVFF  00,3D
1F26:  CALL   156E
1F2A:  MOVFF  03,30
1F2E:  MOVFF  02,2F
1F32:  MOVFF  01,2E
1F36:  MOVFF  00,2D
*
27D0:  SLEEP 
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad1 + ad2); 
....................     float ad3Ratio = (float)ad3 / (float)(ad1 + ad2); 
....................     if (ad2 + ad3 > 300 && ad2Ratio < alignRatio && ad3Ratio < alignRatio) 
*
1F3A:  MOVF   1C,W
1F3C:  ADDWF  1A,W
1F3E:  MOVWF  31
1F40:  MOVF   1D,W
1F42:  ADDWFC 1B,W
1F44:  MOVWF  32
1F46:  SUBLW  00
1F48:  BC    1FA8
1F4A:  XORLW  FF
1F4C:  BNZ   1F54
1F4E:  MOVF   31,W
1F50:  SUBLW  2C
1F52:  BC    1FA8
1F54:  MOVFF  2C,38
1F58:  MOVFF  2B,37
1F5C:  MOVFF  2A,36
1F60:  MOVFF  29,35
1F64:  MOVFF  28,3C
1F68:  MOVFF  27,3B
1F6C:  MOVFF  26,3A
1F70:  MOVFF  25,39
1F74:  CALL   16C8
1F78:  BNC   1FA8
1F7A:  MOVFF  30,38
1F7E:  MOVFF  2F,37
1F82:  MOVFF  2E,36
1F86:  MOVFF  2D,35
1F8A:  MOVFF  28,3C
1F8E:  MOVFF  27,3B
1F92:  MOVFF  26,3A
1F96:  MOVFF  25,39
1F9A:  CALL   16C8
1F9E:  BNC   1FA8
....................     { 
....................         return 1; 
1FA0:  MOVLW  01
1FA2:  MOVWF  01
1FA4:  BRA    1FAC
....................     } 
1FA6:  BRA    1FAC
....................     else 
....................     { 
....................         return 0; 
1FA8:  MOVLW  00
1FAA:  MOVWF  01
....................     } 
1FAC:  RETURN 0
.................... } 
.................... int8 IsRight() 
.................... { 
....................     if (ad1 < 300 && ad2 >= 300 && ad3 >= 300 && ad4 >= 300) 
*
1E22:  MOVF   19,W
1E24:  SUBLW  01
1E26:  BNC   1E68
1E28:  BNZ   1E30
1E2A:  MOVF   18,W
1E2C:  SUBLW  2B
1E2E:  BNC   1E68
1E30:  MOVF   1B,W
1E32:  SUBLW  00
1E34:  BC    1E68
1E36:  XORLW  FF
1E38:  BNZ   1E40
1E3A:  MOVF   1A,W
1E3C:  SUBLW  2B
1E3E:  BC    1E68
1E40:  MOVF   1D,W
1E42:  SUBLW  00
1E44:  BC    1E68
1E46:  XORLW  FF
1E48:  BNZ   1E50
1E4A:  MOVF   1C,W
1E4C:  SUBLW  2B
1E4E:  BC    1E68
1E50:  MOVF   1F,W
1E52:  SUBLW  00
1E54:  BC    1E68
1E56:  XORLW  FF
1E58:  BNZ   1E60
1E5A:  MOVF   1E,W
1E5C:  SUBLW  2B
1E5E:  BC    1E68
....................     { 
....................         return 1; 
1E60:  MOVLW  01
1E62:  MOVWF  01
1E64:  BRA    1E6C
....................     } 
1E66:  BRA    1E6C
....................     else 
....................     { 
....................         return 0; 
1E68:  MOVLW  00
1E6A:  MOVWF  01
....................     } 
1E6C:  RETURN 0
.................... } 
.................... int8 IsCenterAndNotMargins() 
.................... { 
....................     if (ad1 < 300 && ad2 >= 300 && ad3 >= 300 && ad4 < 300) 
....................     { 
....................         return 1; 
....................     } 
....................     else 
....................     { 
....................         return 0; 
....................     } 
.................... } 
.................... int8 IsCenterInside() 
.................... { 
....................     if (ad2 >= 300 && ad3 >= 300) 
*
2042:  MOVF   1B,W
2044:  SUBLW  00
2046:  BC    206A
2048:  XORLW  FF
204A:  BNZ   2052
204C:  MOVF   1A,W
204E:  SUBLW  2B
2050:  BC    206A
2052:  MOVF   1D,W
2054:  SUBLW  00
2056:  BC    206A
2058:  XORLW  FF
205A:  BNZ   2062
205C:  MOVF   1C,W
205E:  SUBLW  2B
2060:  BC    206A
....................     { 
....................         return 1; 
2062:  MOVLW  01
2064:  MOVWF  01
2066:  BRA    206E
....................     } 
2068:  BRA    206E
....................     else 
....................     { 
....................         return 0; 
206A:  MOVLW  00
206C:  MOVWF  01
....................     } 
206E:  GOTO   23F4 (RETURN)
.................... } 
.................... int8 IsMarginsInside() 
.................... { 
....................     if (ad1 >= 300 && ad4 >= 400) 
....................     { 
....................         return 1; 
....................     } 
....................     else 
....................     { 
....................         return 0; 
....................     } 
.................... } 
.................... int8 IsMarginsOutside() 
.................... { 
....................     if (ad1 < 300 && ad4 < 400) 
....................     { 
....................         return 1; 
....................     } 
....................     else 
....................     { 
....................         return 0; 
....................     } 
.................... } 
.................... int8 IsAllOutside() 
.................... { 
....................     if (ad1 < 300 && ad2 < 300 && ad3 < 300 && ad4 < 300) 
*
1FFA:  MOVF   19,W
1FFC:  SUBLW  01
1FFE:  BNC   203A
2000:  BNZ   2008
2002:  MOVF   18,W
2004:  SUBLW  2B
2006:  BNC   203A
2008:  MOVF   1B,W
200A:  SUBLW  01
200C:  BNC   203A
200E:  BNZ   2016
2010:  MOVF   1A,W
2012:  SUBLW  2B
2014:  BNC   203A
2016:  MOVF   1D,W
2018:  SUBLW  01
201A:  BNC   203A
201C:  BNZ   2024
201E:  MOVF   1C,W
2020:  SUBLW  2B
2022:  BNC   203A
2024:  MOVF   1F,W
2026:  SUBLW  01
2028:  BNC   203A
202A:  BNZ   2032
202C:  MOVF   1E,W
202E:  SUBLW  2B
2030:  BNC   203A
....................     { 
....................         return 1; 
2032:  MOVLW  01
2034:  MOVWF  01
2036:  BRA    203E
....................     } 
2038:  BRA    203E
....................     else 
....................     { 
....................         return 0; 
203A:  MOVLW  00
203C:  MOVWF  01
....................     } 
203E:  GOTO   23D0 (RETURN)
.................... } 
.................... int8 IsLeft() 
.................... { 
....................     if (ad1 >= 300 && ad2 >= 300 && ad3 >= 300 && ad4 < 300) 
*
1FAE:  MOVF   19,W
1FB0:  SUBLW  00
1FB2:  BC    1FF4
1FB4:  XORLW  FF
1FB6:  BNZ   1FBE
1FB8:  MOVF   18,W
1FBA:  SUBLW  2B
1FBC:  BC    1FF4
1FBE:  MOVF   1B,W
1FC0:  SUBLW  00
1FC2:  BC    1FF4
1FC4:  XORLW  FF
1FC6:  BNZ   1FCE
1FC8:  MOVF   1A,W
1FCA:  SUBLW  2B
1FCC:  BC    1FF4
1FCE:  MOVF   1D,W
1FD0:  SUBLW  00
1FD2:  BC    1FF4
1FD4:  XORLW  FF
1FD6:  BNZ   1FDE
1FD8:  MOVF   1C,W
1FDA:  SUBLW  2B
1FDC:  BC    1FF4
1FDE:  MOVF   1F,W
1FE0:  SUBLW  01
1FE2:  BNC   1FF4
1FE4:  BNZ   1FEC
1FE6:  MOVF   1E,W
1FE8:  SUBLW  2B
1FEA:  BNC   1FF4
....................     { 
....................         return 1; 
1FEC:  MOVLW  01
1FEE:  MOVWF  01
1FF0:  BRA    1FF8
....................     } 
1FF2:  BRA    1FF8
....................     else 
....................     { 
....................         return 0; 
1FF4:  MOVLW  00
1FF6:  MOVWF  01
....................     } 
1FF8:  RETURN 0
.................... } 
.................... int8 IsAllAlign() 
.................... { 
....................     if (ad1 >= 300 && ad2 >= 300 && ad3 >= 300 && ad4 >= 300) 
*
2072:  MOVF   19,W
2074:  SUBLW  00
2076:  BC    20BA
2078:  XORLW  FF
207A:  BNZ   2082
207C:  MOVF   18,W
207E:  SUBLW  2B
2080:  BC    20BA
2082:  MOVF   1B,W
2084:  SUBLW  00
2086:  BC    20BA
2088:  XORLW  FF
208A:  BNZ   2092
208C:  MOVF   1A,W
208E:  SUBLW  2B
2090:  BC    20BA
2092:  MOVF   1D,W
2094:  SUBLW  00
2096:  BC    20BA
2098:  XORLW  FF
209A:  BNZ   20A2
209C:  MOVF   1C,W
209E:  SUBLW  2B
20A0:  BC    20BA
20A2:  MOVF   1F,W
20A4:  SUBLW  00
20A6:  BC    20BA
20A8:  XORLW  FF
20AA:  BNZ   20B2
20AC:  MOVF   1E,W
20AE:  SUBLW  2B
20B0:  BC    20BA
....................     { 
....................         return 1; 
20B2:  MOVLW  01
20B4:  MOVWF  01
20B6:  BRA    20BE
....................     } 
20B8:  BRA    20BE
....................     else 
....................     { 
....................         return 0; 
20BA:  MOVLW  00
20BC:  MOVWF  01
....................     } 
20BE:  RETURN 0
.................... } 
....................  
.................... void Align() 
*
1BA8:  MOVFF  1B,3A
1BAC:  MOVFF  1A,39
1BB0:  RCALL  1538
1BB2:  MOVFF  03,38
1BB6:  MOVFF  02,37
1BBA:  MOVFF  01,36
1BBE:  MOVFF  00,35
1BC2:  MOVF   1C,W
1BC4:  ADDWF  1A,W
1BC6:  MOVWF  01
1BC8:  MOVF   1D,W
1BCA:  ADDWFC 1B,W
1BCC:  MOVWF  03
1BCE:  MOVFF  01,39
1BD2:  MOVWF  3A
1BD4:  RCALL  1538
1BD6:  MOVFF  38,3C
1BDA:  MOVFF  37,3B
1BDE:  MOVFF  36,3A
1BE2:  MOVFF  35,39
1BE6:  MOVFF  03,40
1BEA:  MOVFF  02,3F
1BEE:  MOVFF  01,3E
1BF2:  MOVFF  00,3D
1BF6:  RCALL  156E
1BF8:  MOVFF  03,2C
1BFC:  MOVFF  02,2B
1C00:  MOVFF  01,2A
1C04:  MOVFF  00,29
1C08:  MOVFF  1D,3A
1C0C:  MOVFF  1C,39
1C10:  RCALL  1538
1C12:  MOVFF  03,38
1C16:  MOVFF  02,37
1C1A:  MOVFF  01,36
1C1E:  MOVFF  00,35
1C22:  MOVF   1C,W
1C24:  ADDWF  1A,W
1C26:  MOVWF  01
1C28:  MOVF   1D,W
1C2A:  ADDWFC 1B,W
1C2C:  MOVWF  03
1C2E:  MOVFF  01,39
1C32:  MOVWF  3A
1C34:  RCALL  1538
1C36:  MOVFF  38,3C
1C3A:  MOVFF  37,3B
1C3E:  MOVFF  36,3A
1C42:  MOVFF  35,39
1C46:  MOVFF  03,40
1C4A:  MOVFF  02,3F
1C4E:  MOVFF  01,3E
1C52:  MOVFF  00,3D
1C56:  RCALL  156E
1C58:  MOVFF  03,30
1C5C:  MOVFF  02,2F
1C60:  MOVFF  01,2E
1C64:  MOVFF  00,2D
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad2 + ad3); 
....................     float ad3Ratio = (float)ad3 / (float)(ad2 + ad3); 
....................  
....................     ///alto significa escuro 
....................     if (ad2 + ad3 > 400) 
1C68:  MOVF   1C,W
1C6A:  ADDWF  1A,W
1C6C:  MOVWF  35
1C6E:  MOVF   1D,W
1C70:  ADDWFC 1B,W
1C72:  MOVWF  36
1C74:  SUBLW  00
1C76:  BTFSC  FD8.0
1C78:  BRA    1DFC
1C7A:  XORLW  FF
1C7C:  BNZ   1C86
1C7E:  MOVF   35,W
1C80:  SUBLW  90
1C82:  BTFSC  FD8.0
1C84:  BRA    1DFC
1C86:  CLRF   16
1C88:  BTFSC  FF2.7
1C8A:  BSF    16.7
1C8C:  BCF    FF2.7
....................     { 
....................         //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................         //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................  
....................         lcd_pos_xy(1, 1); 
1C8E:  MOVLW  01
1C90:  MOVWF  50
1C92:  MOVWF  51
1C94:  CALL   116A
1C98:  BTFSC  16.7
1C9A:  BSF    FF2.7
....................  
....................         //O ad2 é o da direita, se este esta maior, significa que o robo esta a direita 
....................         if (ad2Ratio > alignRatio) 
1C9C:  MOVFF  28,38
1CA0:  MOVFF  27,37
1CA4:  MOVFF  26,36
1CA8:  MOVFF  25,35
1CAC:  MOVFF  2C,3C
1CB0:  MOVFF  2B,3B
1CB4:  MOVFF  2A,3A
1CB8:  MOVFF  29,39
1CBC:  RCALL  16C8
1CBE:  BNC   1CD8
....................         { 
....................             printf(lcd_escreve, "Esta a direita"); 
1CC0:  MOVLW  C8
1CC2:  MOVWF  FF6
1CC4:  MOVLW  13
1CC6:  MOVWF  FF7
1CC8:  RCALL  150C
....................             SetBothPwm(950); 
1CCA:  MOVLW  03
1CCC:  MOVWF  36
1CCE:  MOVLW  B6
1CD0:  MOVWF  35
1CD2:  RCALL  173E
....................             LeftBackwardRightForward(); 
1CD4:  RCALL  178C
....................         } 
1CD6:  BRA    1DFA
....................         else if (ad3Ratio > alignRatio) 
1CD8:  MOVFF  28,38
1CDC:  MOVFF  27,37
1CE0:  MOVFF  26,36
1CE4:  MOVFF  25,35
1CE8:  MOVFF  30,3C
1CEC:  MOVFF  2F,3B
1CF0:  MOVFF  2E,3A
1CF4:  MOVFF  2D,39
1CF8:  RCALL  16C8
1CFA:  BNC   1D14
....................         { 
....................             printf(lcd_escreve, "Esta a esquerda"); 
1CFC:  MOVLW  D8
1CFE:  MOVWF  FF6
1D00:  MOVLW  13
1D02:  MOVWF  FF7
1D04:  RCALL  150C
....................             SetBothPwm(950); 
1D06:  MOVLW  03
1D08:  MOVWF  36
1D0A:  MOVLW  B6
1D0C:  MOVWF  35
1D0E:  RCALL  173E
....................             RightBackwardLeftForward(); 
1D10:  RCALL  179E
....................         } 
1D12:  BRA    1DFA
....................         else 
....................         { 
....................  
....................             ///850 é o minimo que o motor vai ter (ele precisa de uns 800 pra não ficar travado) e vai somar no maximo 173 
....................             ///Por isso que o maximo dele é 1023 (850 + 173), é possivel fazer com que o valor de maior que 1023 e limitar 
....................             ///Com um if, da para testar isso 
....................             long pwm1 = ad2Ratio * 123 + 900; 
....................             long pwm2 = ad3Ratio * 123 + 900; 
1D14:  MOVFF  2C,38
1D18:  MOVFF  2B,37
1D1C:  MOVFF  2A,36
1D20:  MOVFF  29,35
1D24:  CLRF   3C
1D26:  CLRF   3B
1D28:  MOVLW  76
1D2A:  MOVWF  3A
1D2C:  MOVLW  85
1D2E:  MOVWF  39
1D30:  RCALL  17B0
1D32:  MOVFF  03,38
1D36:  MOVFF  02,37
1D3A:  MOVFF  01,36
1D3E:  MOVFF  00,35
1D42:  BCF    FD8.1
1D44:  MOVFF  03,3C
1D48:  MOVFF  02,3B
1D4C:  MOVFF  01,3A
1D50:  MOVFF  00,39
1D54:  CLRF   40
1D56:  CLRF   3F
1D58:  MOVLW  61
1D5A:  MOVWF  3E
1D5C:  MOVLW  88
1D5E:  MOVWF  3D
1D60:  RCALL  18A2
1D62:  MOVFF  03,38
1D66:  MOVFF  02,37
1D6A:  MOVFF  01,36
1D6E:  MOVFF  00,35
1D72:  RCALL  1B0C
1D74:  MOVFF  02,32
1D78:  MOVFF  01,31
1D7C:  MOVFF  30,38
1D80:  MOVFF  2F,37
1D84:  MOVFF  2E,36
1D88:  MOVFF  2D,35
1D8C:  CLRF   3C
1D8E:  CLRF   3B
1D90:  MOVLW  76
1D92:  MOVWF  3A
1D94:  MOVLW  85
1D96:  MOVWF  39
1D98:  RCALL  17B0
1D9A:  MOVFF  03,38
1D9E:  MOVFF  02,37
1DA2:  MOVFF  01,36
1DA6:  MOVFF  00,35
1DAA:  BCF    FD8.1
1DAC:  MOVFF  03,3C
1DB0:  MOVFF  02,3B
1DB4:  MOVFF  01,3A
1DB8:  MOVFF  00,39
1DBC:  CLRF   40
1DBE:  CLRF   3F
1DC0:  MOVLW  61
1DC2:  MOVWF  3E
1DC4:  MOVLW  88
1DC6:  MOVWF  3D
1DC8:  RCALL  18A2
1DCA:  MOVFF  03,38
1DCE:  MOVFF  02,37
1DD2:  MOVFF  01,36
1DD6:  MOVFF  00,35
1DDA:  RCALL  1B0C
1DDC:  MOVFF  02,34
1DE0:  MOVFF  01,33
....................             SetLeft(pwm1); 
1DE4:  MOVFF  32,36
1DE8:  MOVFF  31,35
1DEC:  RCALL  1B44
....................             SetRight(pwm2); 
1DEE:  MOVFF  34,36
1DF2:  MOVFF  33,35
1DF6:  RCALL  1B6C
....................             frente(); 
1DF8:  BRA    1B94
....................             // SetLeft((long)(ad2Ratio * 100) + 850); 
....................             // SetRight((long)(ad3Ratio * 100) + 850); 
....................         } 
....................     } 
1DFA:  BRA    1E20
1DFC:  CLRF   16
1DFE:  BTFSC  FF2.7
1E00:  BSF    16.7
1E02:  BCF    FF2.7
....................     else 
....................     { 
....................         ///Esta fora da pista, deve fazer algo 
....................         //SetBothPwm(0); 
....................         lcd_pos_xy(1, 2); 
1E04:  MOVLW  01
1E06:  MOVWF  50
1E08:  MOVLW  02
1E0A:  MOVWF  51
1E0C:  CALL   116A
1E10:  BTFSC  16.7
1E12:  BSF    FF2.7
....................  
....................         printf(lcd_escreve, "Se perdeu"); 
1E14:  MOVLW  E8
1E16:  MOVWF  FF6
1E18:  MOVLW  13
1E1A:  MOVWF  FF7
1E1C:  CALL   150C
....................     } 
1E20:  RETURN 0
.................... } 
....................  
.................... ///BASICAMENTE faz a mesma coisa que o algin, mas troca os sensores (coloca o da esquerda na direitea) 
.................... void InvertedAlign() 
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad2 + ad3); 
....................     float ad3Ratio = (float)ad3 / (float)(ad2 + ad3); 
....................  
....................     ///alto significa escuro 
....................     if (ad2 + ad3 <= 400) 
....................     { 
....................         //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................         //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................  
....................         lcd_pos_xy(1, 1); 
....................  
....................         //O ad2 é o da direita, se este esta maior, significa que o robo esta a direita 
....................         if (ad3Ratio > alignRatio) 
....................         { 
....................             printf(lcd_escreve, "Esta a direita"); 
....................             SetBothPwm(950); 
....................             LeftBackwardRightForward(); 
....................         } 
....................         else if (ad2Ratio > alignRatio) 
....................         { 
....................             printf(lcd_escreve, "Esta a esquerda"); 
....................             SetBothPwm(950); 
....................             RightBackwardLeftForward(); 
....................         } 
....................         else 
....................         { 
....................  
....................             ///850 é o minimo que o motor vai ter (ele precisa de uns 800 pra não ficar travado) e vai somar no maximo 173 
....................             ///Por isso que o maximo dele é 1023 (850 + 173), é possivel fazer com que o valor de maior que 1023 e limitar 
....................             ///Com um if, da para testar isso 
....................             long pwm1 = ad2Ratio * 173 + 850; 
....................             long pwm2 = ad3Ratio * 173 + 850; 
....................             SetLeft(pwm2); 
....................             SetRight(pwm1); 
....................             frente(); 
....................             // SetLeft((long)(ad2Ratio * 100) + 850); 
....................             // SetRight((long)(ad3Ratio * 100) + 850); 
....................         } 
....................     } 
....................     else 
....................     { 
....................         ///Esta fora da pista, deve fazer algo 
....................         //SetBothPwm(0); 
....................         lcd_pos_xy(1, 2); 
....................  
....................         printf(lcd_escreve, "Se perdeu"); 
....................     } 
.................... } 
....................  
.................... void Setup() 
.................... { 
....................     adCounter = 1; 
*
14DE:  MOVLW  01
14E0:  MOVWF  22
....................     running = 0; 
14E2:  CLRF   17
....................  
....................     setup_adc_ports(AN0_TO_AN3); 
14E4:  MOVF   FC1,W
14E6:  ANDLW  C0
14E8:  IORLW  0B
14EA:  MOVWF  FC1
....................     setup_adc(ADC_CLOCK_DIV_4); 
14EC:  MOVF   FC0,W
14EE:  ANDLW  C0
14F0:  IORLW  04
14F2:  MOVWF  FC0
14F4:  BSF    FC0.7
14F6:  BSF    FC2.0
....................  
....................     setup_timer_0(RTCC_INTERNAL | RTCC_DIV_2 | RTCC_8_BIT); 
14F8:  MOVLW  C0
14FA:  MOVWF  FD5
....................     set_timer0(0); 
14FC:  CLRF   FD7
14FE:  CLRF   FD6
....................     enable_interrupts(INT_TIMER0); 
1500:  BSF    FF2.5
....................     enable_interrupts(GLOBAL); 
1502:  IORWF  FF2,F
....................  
....................     lcd_ini(); 
1504:  BRA    141C
....................     MotorInitialize(); 
1506:  BRA    14BE
1508:  GOTO   20EE (RETURN)
....................     // SetBothPwm(0); 
....................     // frente(); 
.................... } 
....................  
.................... void ClearScreen() 
.................... { 
....................     lcd_escreve('\f'); 
*
11D2:  MOVLW  0C
11D4:  MOVWF  4F
11D6:  RCALL  118C
11D8:  GOTO   1330 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
