CCS PCH C Compiler, Version 5.015, 5967               25-ago-18 00:52

               Filename:   D:\Projetos\Imposto\Source Code\main.lst

               ROM used:   4168 bytes (13%)
                           Largest free fragment is 24500
               RAM used:   36 (2%) at main() level
                           66 (3%) worst case
               Stack used: 12 locations (5 in main + 7 for interrupts)
               Stack size: 31

*
1000:  GOTO   1F96
*
1008:  MOVWF  04
100A:  MOVFF  FD8,05
100E:  MOVFF  FE0,06
1012:  MOVLB  0
1014:  MOVFF  FE9,0C
1018:  MOVFF  FEA,07
101C:  MOVFF  FE1,08
1020:  MOVFF  FE2,09
1024:  MOVFF  FD9,0A
1028:  MOVFF  FDA,0B
102C:  MOVFF  FF3,12
1030:  MOVFF  FF4,13
1034:  MOVFF  FFA,14
1038:  MOVFF  00,0E
103C:  MOVFF  01,0F
1040:  MOVFF  02,10
1044:  MOVFF  03,11
1048:  BTFSS  FF2.5
104A:  GOTO   1054
104E:  BTFSC  FF2.2
1050:  GOTO   1958
1054:  MOVFF  0E,00
1058:  MOVFF  0F,01
105C:  MOVFF  10,02
1060:  MOVFF  11,03
1064:  MOVFF  0C,FE9
1068:  MOVFF  07,FEA
106C:  BSF    07.7
106E:  MOVFF  08,FE1
1072:  MOVFF  09,FE2
1076:  MOVFF  0A,FD9
107A:  MOVFF  0B,FDA
107E:  MOVFF  12,FF3
1082:  MOVFF  13,FF4
1086:  MOVFF  14,FFA
108A:  MOVF   04,W
108C:  MOVFF  06,FE0
1090:  MOVFF  05,FD8
1094:  RETFIE 0
.................... #include <main.h> 
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
1096:  MOVFF  FF2,0D
109A:  BCF    FF2.7
109C:  CLRF   FF7
109E:  ADDLW  B0
10A0:  MOVWF  FF6
10A2:  MOVLW  10
10A4:  ADDWFC FF7,F
10A6:  TBLRD*+
10A8:  MOVF   FF5,W
10AA:  BTFSC  0D.7
10AC:  BSF    FF2.7
10AE:  RETURN 0
10B0:  DATA 28,0C
10B2:  DATA 01,06
10B4:  DATA 20,20
10B6:  DATA 20,20
10B8:  DATA 20,20
10BA:  DATA 20,20
10BC:  DATA 20,20
10BE:  DATA 20,20
10C0:  DATA 20,20
10C2:  DATA 20,20
10C4:  DATA 00,00
*
11E4:  TBLRD*+
11E6:  MOVF   FF5,F
11E8:  BZ    1202
11EA:  MOVFF  FF6,2E
11EE:  MOVFF  FF7,2F
11F2:  MOVFF  FF5,37
11F6:  RCALL  119E
11F8:  MOVFF  2E,FF6
11FC:  MOVFF  2F,FF7
1200:  BRA    11E4
1202:  RETURN 0
*
122E:  MOVFF  FEA,36
1232:  MOVFF  FE9,35
1236:  BTFSS  2F.7
1238:  BRA    124A
123A:  BSF    35.7
123C:  BTFSS  35.4
123E:  INCF   35,F
1240:  COMF   2E,F
1242:  COMF   2F,F
1244:  INCF   2E,F
1246:  BTFSC  FD8.2
1248:  INCF   2F,F
124A:  SWAPF  2F,W
124C:  IORLW  F0
124E:  MOVWF  31
1250:  ADDWF  31,F
1252:  ADDLW  E2
1254:  MOVWF  32
1256:  ADDLW  32
1258:  MOVWF  34
125A:  MOVF   2F,W
125C:  ANDLW  0F
125E:  ADDWF  32,F
1260:  ADDWF  32,F
1262:  ADDWF  34,F
1264:  ADDLW  E9
1266:  MOVWF  33
1268:  ADDWF  33,F
126A:  ADDWF  33,F
126C:  SWAPF  2E,W
126E:  ANDLW  0F
1270:  ADDWF  33,F
1272:  ADDWF  34,F
1274:  RLCF   33,F
1276:  RLCF   34,F
1278:  COMF   34,F
127A:  RLCF   34,F
127C:  MOVF   2E,W
127E:  ANDLW  0F
1280:  ADDWF  34,F
1282:  RLCF   31,F
1284:  MOVLW  07
1286:  MOVWF  30
1288:  MOVLW  0A
128A:  DECF   33,F
128C:  ADDWF  34,F
128E:  BNC   128A
1290:  DECF   32,F
1292:  ADDWF  33,F
1294:  BNC   1290
1296:  DECF   31,F
1298:  ADDWF  32,F
129A:  BNC   1296
129C:  DECF   30,F
129E:  ADDWF  31,F
12A0:  BNC   129C
12A2:  CLRF   FEA
12A4:  MOVLW  30
12A6:  MOVWF  FE9
12A8:  MOVLW  07
12AA:  ANDWF  35,W
12AC:  BCF    35.6
12AE:  MOVF   FED,F
12B0:  ANDWF  35,W
12B2:  BNZ   12C2
12B4:  BTFSC  35.4
12B6:  MOVF   FEE,F
12B8:  BTFSC  35.4
12BA:  BRA    12C2
12BC:  MOVLW  20
12BE:  MOVWF  00
12C0:  BRA    1302
12C2:  ADDWF  FE9,F
12C4:  MOVLW  00
12C6:  ADDWFC FEA,F
12C8:  MOVF   FE9,W
12CA:  SUBLW  34
12CC:  BNZ   12D4
12CE:  MOVF   FEA,F
12D0:  BNZ   12D4
12D2:  BSF    35.6
12D4:  MOVF   FEF,W
12D6:  MOVWF  00
12D8:  BNZ   12EA
12DA:  BTFSC  35.6
12DC:  BRA    12EA
12DE:  BTFSC  35.4
12E0:  BRA    1318
12E2:  BTFSC  35.3
12E4:  BRA    12EA
12E6:  MOVLW  20
12E8:  BRA    1300
12EA:  BTFSS  35.7
12EC:  BRA    12FA
12EE:  MOVLW  2D
12F0:  MOVWF  00
12F2:  MOVF   FED,W
12F4:  BCF    35.6
12F6:  BCF    35.7
12F8:  BRA    1302
12FA:  BSF    35.3
12FC:  BCF    35.4
12FE:  MOVLW  30
1300:  ADDWF  00,F
1302:  MOVFF  FEA,2F
1306:  MOVFF  FE9,2E
130A:  MOVFF  00,37
130E:  RCALL  119E
1310:  MOVFF  2F,FEA
1314:  MOVFF  2E,FE9
1318:  MOVF   FEE,W
131A:  BTFSS  35.6
131C:  BRA    12C8
131E:  RETURN 0
1320:  MOVLW  8E
1322:  MOVWF  00
1324:  MOVFF  33,01
1328:  MOVFF  32,02
132C:  CLRF   03
132E:  MOVF   01,F
1330:  BNZ   1344
1332:  MOVFF  02,01
1336:  CLRF   02
1338:  MOVLW  08
133A:  SUBWF  00,F
133C:  MOVF   01,F
133E:  BNZ   1344
1340:  CLRF   00
1342:  BRA    1354
1344:  BCF    FD8.0
1346:  BTFSC  01.7
1348:  BRA    1352
134A:  RLCF   02,F
134C:  RLCF   01,F
134E:  DECF   00,F
1350:  BRA    1344
1352:  BCF    01.7
1354:  RETURN 0
1356:  MOVF   32,W
1358:  BTFSC  FD8.2
135A:  BRA    14A6
135C:  MOVWF  3E
135E:  MOVF   36,W
1360:  BTFSC  FD8.2
1362:  BRA    14A6
1364:  SUBWF  3E,F
1366:  BNC   1372
1368:  MOVLW  7F
136A:  ADDWF  3E,F
136C:  BTFSC  FD8.0
136E:  BRA    14A6
1370:  BRA    137E
1372:  MOVLW  81
1374:  SUBWF  3E,F
1376:  BTFSS  FD8.0
1378:  BRA    14A6
137A:  BTFSC  FD8.2
137C:  BRA    14A6
137E:  MOVFF  3E,00
1382:  CLRF   01
1384:  CLRF   02
1386:  CLRF   03
1388:  CLRF   3D
138A:  MOVFF  33,3C
138E:  BSF    3C.7
1390:  MOVFF  34,3B
1394:  MOVFF  35,3A
1398:  MOVLW  19
139A:  MOVWF  3E
139C:  MOVF   39,W
139E:  SUBWF  3A,F
13A0:  BC    13BC
13A2:  MOVLW  01
13A4:  SUBWF  3B,F
13A6:  BC    13BC
13A8:  SUBWF  3C,F
13AA:  BC    13BC
13AC:  SUBWF  3D,F
13AE:  BC    13BC
13B0:  INCF   3D,F
13B2:  INCF   3C,F
13B4:  INCF   3B,F
13B6:  MOVF   39,W
13B8:  ADDWF  3A,F
13BA:  BRA    140C
13BC:  MOVF   38,W
13BE:  SUBWF  3B,F
13C0:  BC    13E6
13C2:  MOVLW  01
13C4:  SUBWF  3C,F
13C6:  BC    13E6
13C8:  SUBWF  3D,F
13CA:  BC    13E6
13CC:  INCF   3D,F
13CE:  INCF   3C,F
13D0:  MOVF   38,W
13D2:  ADDWF  3B,F
13D4:  MOVF   39,W
13D6:  ADDWF  3A,F
13D8:  BNC   140C
13DA:  INCF   3B,F
13DC:  BNZ   140C
13DE:  INCF   3C,F
13E0:  BNZ   140C
13E2:  INCF   3D,F
13E4:  BRA    140C
13E6:  MOVF   37,W
13E8:  IORLW  80
13EA:  SUBWF  3C,F
13EC:  BC    140A
13EE:  MOVLW  01
13F0:  SUBWF  3D,F
13F2:  BC    140A
13F4:  INCF   3D,F
13F6:  MOVF   37,W
13F8:  IORLW  80
13FA:  ADDWF  3C,F
13FC:  MOVF   38,W
13FE:  ADDWF  3B,F
1400:  BNC   13D4
1402:  INCF   3C,F
1404:  BNZ   13D4
1406:  INCF   3D,F
1408:  BRA    13D4
140A:  BSF    03.0
140C:  DECFSZ 3E,F
140E:  BRA    1412
1410:  BRA    1428
1412:  BCF    FD8.0
1414:  RLCF   3A,F
1416:  RLCF   3B,F
1418:  RLCF   3C,F
141A:  RLCF   3D,F
141C:  BCF    FD8.0
141E:  RLCF   03,F
1420:  RLCF   02,F
1422:  RLCF   01,F
1424:  RLCF   3F,F
1426:  BRA    139C
1428:  BTFSS  3F.0
142A:  BRA    1438
142C:  BCF    FD8.0
142E:  RRCF   01,F
1430:  RRCF   02,F
1432:  RRCF   03,F
1434:  RRCF   3F,F
1436:  BRA    143C
1438:  DECF   00,F
143A:  BZ    14A6
143C:  BTFSC  3F.7
143E:  BRA    147C
1440:  BCF    FD8.0
1442:  RLCF   3A,F
1444:  RLCF   3B,F
1446:  RLCF   3C,F
1448:  RLCF   3D,F
144A:  MOVF   39,W
144C:  SUBWF  3A,F
144E:  BC    145E
1450:  MOVLW  01
1452:  SUBWF  3B,F
1454:  BC    145E
1456:  SUBWF  3C,F
1458:  BC    145E
145A:  SUBWF  3D,F
145C:  BNC   1492
145E:  MOVF   38,W
1460:  SUBWF  3B,F
1462:  BC    146E
1464:  MOVLW  01
1466:  SUBWF  3C,F
1468:  BC    146E
146A:  SUBWF  3D,F
146C:  BNC   1492
146E:  MOVF   37,W
1470:  IORLW  80
1472:  SUBWF  3C,F
1474:  BC    147C
1476:  MOVLW  01
1478:  SUBWF  3D,F
147A:  BNC   1492
147C:  INCF   03,F
147E:  BNZ   1492
1480:  INCF   02,F
1482:  BNZ   1492
1484:  INCF   01,F
1486:  BNZ   1492
1488:  INCF   00,F
148A:  BZ    14A6
148C:  RRCF   01,F
148E:  RRCF   02,F
1490:  RRCF   03,F
1492:  MOVFF  33,3E
1496:  MOVF   37,W
1498:  XORWF  3E,F
149A:  BTFSS  3E.7
149C:  BRA    14A2
149E:  BSF    01.7
14A0:  BRA    14AE
14A2:  BCF    01.7
14A4:  BRA    14AE
14A6:  CLRF   00
14A8:  CLRF   01
14AA:  CLRF   02
14AC:  CLRF   03
14AE:  RETURN 0
14B0:  MOVLW  80
14B2:  BTFSC  FD8.1
14B4:  XORWF  37,F
14B6:  CLRF   3C
14B8:  CLRF   3D
14BA:  MOVFF  33,3B
14BE:  MOVF   37,W
14C0:  XORWF  3B,F
14C2:  MOVF   32,W
14C4:  BTFSC  FD8.2
14C6:  BRA    1680
14C8:  MOVWF  3A
14CA:  MOVWF  00
14CC:  MOVF   36,W
14CE:  BTFSC  FD8.2
14D0:  BRA    1692
14D2:  SUBWF  3A,F
14D4:  BTFSC  FD8.2
14D6:  BRA    15DA
14D8:  BNC   1554
14DA:  MOVFF  37,40
14DE:  BSF    40.7
14E0:  MOVFF  38,3F
14E4:  MOVFF  39,3E
14E8:  CLRF   3D
14EA:  BCF    FD8.0
14EC:  RRCF   40,F
14EE:  RRCF   3F,F
14F0:  RRCF   3E,F
14F2:  RRCF   3D,F
14F4:  DECFSZ 3A,F
14F6:  BRA    14E8
14F8:  BTFSS  3B.7
14FA:  BRA    1502
14FC:  BSF    3C.0
14FE:  BRA    16BA
1500:  BCF    3C.0
1502:  BCF    3A.0
1504:  BSF    3C.4
1506:  CLRF   FEA
1508:  MOVLW  35
150A:  MOVWF  FE9
150C:  BRA    16E0
150E:  BCF    3C.4
1510:  BTFSC  3B.7
1512:  BRA    1528
1514:  BTFSS  3A.0
1516:  BRA    153E
1518:  RRCF   40,F
151A:  RRCF   3F,F
151C:  RRCF   3E,F
151E:  RRCF   3D,F
1520:  INCF   00,F
1522:  BTFSC  FD8.2
1524:  BRA    16B0
1526:  BRA    153E
1528:  BTFSC  40.7
152A:  BRA    1544
152C:  BCF    FD8.0
152E:  RLCF   3D,F
1530:  RLCF   3E,F
1532:  RLCF   3F,F
1534:  RLCF   40,F
1536:  DECF   00,F
1538:  BTFSC  FD8.2
153A:  BRA    16B0
153C:  BRA    1528
153E:  BSF    3C.6
1540:  BRA    1618
1542:  BCF    3C.6
1544:  MOVFF  33,3B
1548:  BTFSS  33.7
154A:  BRA    1550
154C:  BSF    40.7
154E:  BRA    16A2
1550:  BCF    40.7
1552:  BRA    16A2
1554:  MOVFF  36,3A
1558:  MOVFF  36,00
155C:  MOVF   32,W
155E:  SUBWF  3A,F
1560:  MOVFF  33,40
1564:  BSF    40.7
1566:  MOVFF  34,3F
156A:  MOVFF  35,3E
156E:  CLRF   3D
1570:  BCF    FD8.0
1572:  RRCF   40,F
1574:  RRCF   3F,F
1576:  RRCF   3E,F
1578:  RRCF   3D,F
157A:  DECFSZ 3A,F
157C:  BRA    156E
157E:  BTFSS  3B.7
1580:  BRA    1588
1582:  BSF    3C.1
1584:  BRA    16BA
1586:  BCF    3C.1
1588:  BCF    3A.0
158A:  BSF    3C.5
158C:  CLRF   FEA
158E:  MOVLW  39
1590:  MOVWF  FE9
1592:  BRA    16E0
1594:  BCF    3C.5
1596:  BTFSC  3B.7
1598:  BRA    15AE
159A:  BTFSS  3A.0
159C:  BRA    15C4
159E:  RRCF   40,F
15A0:  RRCF   3F,F
15A2:  RRCF   3E,F
15A4:  RRCF   3D,F
15A6:  INCF   00,F
15A8:  BTFSC  FD8.2
15AA:  BRA    16B0
15AC:  BRA    15C4
15AE:  BTFSC  40.7
15B0:  BRA    15CA
15B2:  BCF    FD8.0
15B4:  RLCF   3D,F
15B6:  RLCF   3E,F
15B8:  RLCF   3F,F
15BA:  RLCF   40,F
15BC:  DECF   00,F
15BE:  BTFSC  FD8.2
15C0:  BRA    16B0
15C2:  BRA    15AE
15C4:  BSF    3C.7
15C6:  BRA    1618
15C8:  BCF    3C.7
15CA:  MOVFF  37,3B
15CE:  BTFSS  37.7
15D0:  BRA    15D6
15D2:  BSF    40.7
15D4:  BRA    16A2
15D6:  BCF    40.7
15D8:  BRA    16A2
15DA:  MOVFF  37,40
15DE:  BSF    40.7
15E0:  MOVFF  38,3F
15E4:  MOVFF  39,3E
15E8:  BTFSS  3B.7
15EA:  BRA    15F4
15EC:  BCF    40.7
15EE:  BSF    3C.2
15F0:  BRA    16BA
15F2:  BCF    3C.2
15F4:  CLRF   3D
15F6:  BCF    3A.0
15F8:  CLRF   FEA
15FA:  MOVLW  35
15FC:  MOVWF  FE9
15FE:  BRA    16E0
1600:  BTFSC  3B.7
1602:  BRA    163C
1604:  MOVFF  33,3B
1608:  BTFSS  3A.0
160A:  BRA    1618
160C:  RRCF   40,F
160E:  RRCF   3F,F
1610:  RRCF   3E,F
1612:  RRCF   3D,F
1614:  INCF   00,F
1616:  BZ    16B0
1618:  BTFSS  3D.7
161A:  BRA    1632
161C:  INCF   3E,F
161E:  BNZ   1632
1620:  INCF   3F,F
1622:  BNZ   1632
1624:  INCF   40,F
1626:  BNZ   1632
1628:  RRCF   40,F
162A:  RRCF   3F,F
162C:  RRCF   3E,F
162E:  INCF   00,F
1630:  BZ    16B0
1632:  BTFSC  3C.6
1634:  BRA    1542
1636:  BTFSC  3C.7
1638:  BRA    15C8
163A:  BRA    1674
163C:  MOVLW  80
163E:  XORWF  40,F
1640:  BTFSS  40.7
1642:  BRA    164C
1644:  BRA    16BA
1646:  MOVFF  37,3B
164A:  BRA    1660
164C:  MOVFF  33,3B
1650:  MOVF   40,F
1652:  BNZ   1660
1654:  MOVF   3F,F
1656:  BNZ   1660
1658:  MOVF   3E,F
165A:  BNZ   1660
165C:  CLRF   00
165E:  BRA    16A2
1660:  BTFSC  40.7
1662:  BRA    1674
1664:  BCF    FD8.0
1666:  RLCF   3D,F
1668:  RLCF   3E,F
166A:  RLCF   3F,F
166C:  RLCF   40,F
166E:  DECFSZ 00,F
1670:  BRA    1660
1672:  BRA    16B0
1674:  BTFSS  3B.7
1676:  BRA    167C
1678:  BSF    40.7
167A:  BRA    16A2
167C:  BCF    40.7
167E:  BRA    16A2
1680:  MOVFF  36,00
1684:  MOVFF  37,40
1688:  MOVFF  38,3F
168C:  MOVFF  39,3E
1690:  BRA    16A2
1692:  MOVFF  32,00
1696:  MOVFF  33,40
169A:  MOVFF  34,3F
169E:  MOVFF  35,3E
16A2:  MOVFF  40,01
16A6:  MOVFF  3F,02
16AA:  MOVFF  3E,03
16AE:  BRA    1718
16B0:  CLRF   00
16B2:  CLRF   01
16B4:  CLRF   02
16B6:  CLRF   03
16B8:  BRA    1718
16BA:  CLRF   3D
16BC:  COMF   3E,F
16BE:  COMF   3F,F
16C0:  COMF   40,F
16C2:  COMF   3D,F
16C4:  INCF   3D,F
16C6:  BNZ   16D2
16C8:  INCF   3E,F
16CA:  BNZ   16D2
16CC:  INCF   3F,F
16CE:  BNZ   16D2
16D0:  INCF   40,F
16D2:  BTFSC  3C.0
16D4:  BRA    1500
16D6:  BTFSC  3C.1
16D8:  BRA    1586
16DA:  BTFSC  3C.2
16DC:  BRA    15F2
16DE:  BRA    1646
16E0:  MOVF   FEF,W
16E2:  ADDWF  3E,F
16E4:  BNC   16F0
16E6:  INCF   3F,F
16E8:  BNZ   16F0
16EA:  INCF   40,F
16EC:  BTFSC  FD8.2
16EE:  BSF    3A.0
16F0:  MOVF   FED,F
16F2:  MOVF   FEF,W
16F4:  ADDWF  3F,F
16F6:  BNC   16FE
16F8:  INCF   40,F
16FA:  BTFSC  FD8.2
16FC:  BSF    3A.0
16FE:  MOVF   FED,F
1700:  MOVF   FEF,W
1702:  BTFSC  FEF.7
1704:  BRA    1708
1706:  XORLW  80
1708:  ADDWF  40,F
170A:  BTFSC  FD8.0
170C:  BSF    3A.0
170E:  BTFSC  3C.4
1710:  BRA    150E
1712:  BTFSC  3C.5
1714:  BRA    1594
1716:  BRA    1600
1718:  RETURN 0
171A:  MOVFF  33,3A
171E:  MOVF   37,W
1720:  XORWF  3A,F
1722:  BTFSS  3A.7
1724:  BRA    1730
1726:  BCF    FD8.2
1728:  BCF    FD8.0
172A:  BTFSC  33.7
172C:  BSF    FD8.0
172E:  BRA    178E
1730:  MOVFF  33,3A
1734:  MOVFF  36,3B
1738:  MOVF   32,W
173A:  SUBWF  3B,F
173C:  BZ    174A
173E:  BTFSS  3A.7
1740:  BRA    178E
1742:  MOVF   FD8,W
1744:  XORLW  01
1746:  MOVWF  FD8
1748:  BRA    178E
174A:  MOVFF  37,3B
174E:  MOVF   33,W
1750:  SUBWF  3B,F
1752:  BZ    1760
1754:  BTFSS  3A.7
1756:  BRA    178E
1758:  MOVF   FD8,W
175A:  XORLW  01
175C:  MOVWF  FD8
175E:  BRA    178E
1760:  MOVFF  38,3B
1764:  MOVF   34,W
1766:  SUBWF  3B,F
1768:  BZ    1776
176A:  BTFSS  3A.7
176C:  BRA    178E
176E:  MOVF   FD8,W
1770:  XORLW  01
1772:  MOVWF  FD8
1774:  BRA    178E
1776:  MOVFF  39,3B
177A:  MOVF   35,W
177C:  SUBWF  3B,F
177E:  BZ    178C
1780:  BTFSS  3A.7
1782:  BRA    178E
1784:  MOVF   FD8,W
1786:  XORLW  01
1788:  MOVWF  FD8
178A:  BRA    178E
178C:  BCF    FD8.0
178E:  RETURN 0
*
17B8:  MOVF   32,W
17BA:  BTFSC  FD8.2
17BC:  BRA    18A0
17BE:  MOVWF  00
17C0:  MOVF   36,W
17C2:  BTFSC  FD8.2
17C4:  BRA    18A0
17C6:  ADDWF  00,F
17C8:  BNC   17D2
17CA:  MOVLW  81
17CC:  ADDWF  00,F
17CE:  BC    18A0
17D0:  BRA    17DA
17D2:  MOVLW  7F
17D4:  SUBWF  00,F
17D6:  BNC   18A0
17D8:  BZ    18A0
17DA:  MOVFF  33,3A
17DE:  MOVF   37,W
17E0:  XORWF  3A,F
17E2:  BSF    33.7
17E4:  BSF    37.7
17E6:  MOVF   35,W
17E8:  MULWF  39
17EA:  MOVFF  FF4,3C
17EE:  MOVF   34,W
17F0:  MULWF  38
17F2:  MOVFF  FF4,03
17F6:  MOVFF  FF3,3B
17FA:  MULWF  39
17FC:  MOVF   FF3,W
17FE:  ADDWF  3C,F
1800:  MOVF   FF4,W
1802:  ADDWFC 3B,F
1804:  MOVLW  00
1806:  ADDWFC 03,F
1808:  MOVF   35,W
180A:  MULWF  38
180C:  MOVF   FF3,W
180E:  ADDWF  3C,F
1810:  MOVF   FF4,W
1812:  ADDWFC 3B,F
1814:  MOVLW  00
1816:  CLRF   02
1818:  ADDWFC 03,F
181A:  ADDWFC 02,F
181C:  MOVF   33,W
181E:  MULWF  39
1820:  MOVF   FF3,W
1822:  ADDWF  3B,F
1824:  MOVF   FF4,W
1826:  ADDWFC 03,F
1828:  MOVLW  00
182A:  ADDWFC 02,F
182C:  MOVF   33,W
182E:  MULWF  38
1830:  MOVF   FF3,W
1832:  ADDWF  03,F
1834:  MOVF   FF4,W
1836:  ADDWFC 02,F
1838:  MOVLW  00
183A:  CLRF   01
183C:  ADDWFC 01,F
183E:  MOVF   35,W
1840:  MULWF  37
1842:  MOVF   FF3,W
1844:  ADDWF  3B,F
1846:  MOVF   FF4,W
1848:  ADDWFC 03,F
184A:  MOVLW  00
184C:  ADDWFC 02,F
184E:  ADDWFC 01,F
1850:  MOVF   34,W
1852:  MULWF  37
1854:  MOVF   FF3,W
1856:  ADDWF  03,F
1858:  MOVF   FF4,W
185A:  ADDWFC 02,F
185C:  MOVLW  00
185E:  ADDWFC 01,F
1860:  MOVF   33,W
1862:  MULWF  37
1864:  MOVF   FF3,W
1866:  ADDWF  02,F
1868:  MOVF   FF4,W
186A:  ADDWFC 01,F
186C:  INCF   00,F
186E:  BTFSC  01.7
1870:  BRA    187C
1872:  RLCF   3B,F
1874:  RLCF   03,F
1876:  RLCF   02,F
1878:  RLCF   01,F
187A:  DECF   00,F
187C:  MOVLW  00
187E:  BTFSS  3B.7
1880:  BRA    1896
1882:  INCF   03,F
1884:  ADDWFC 02,F
1886:  ADDWFC 01,F
1888:  MOVF   01,W
188A:  BNZ   1896
188C:  MOVF   02,W
188E:  BNZ   1896
1890:  MOVF   03,W
1892:  BNZ   1896
1894:  INCF   00,F
1896:  BTFSC  3A.7
1898:  BSF    01.7
189A:  BTFSS  3A.7
189C:  BCF    01.7
189E:  BRA    18A8
18A0:  CLRF   00
18A2:  CLRF   01
18A4:  CLRF   02
18A6:  CLRF   03
18A8:  RETURN 0
18AA:  MOVLW  8E
18AC:  MOVWF  00
18AE:  MOVF   2E,W
18B0:  SUBWF  00,F
18B2:  MOVFF  2F,02
18B6:  MOVFF  30,01
18BA:  BSF    02.7
18BC:  MOVF   00,F
18BE:  BZ    18D2
18C0:  BCF    FD8.0
18C2:  MOVF   02,F
18C4:  BNZ   18CA
18C6:  MOVF   01,F
18C8:  BZ    18D2
18CA:  RRCF   02,F
18CC:  RRCF   01,F
18CE:  DECFSZ 00,F
18D0:  BRA    18C0
18D2:  BTFSS  2F.7
18D4:  BRA    18E0
18D6:  COMF   01,F
18D8:  COMF   02,F
18DA:  INCF   01,F
18DC:  BTFSC  FD8.2
18DE:  INCF   02,F
18E0:  RETURN 0
*
1E44:  DATA 31,3A
1E46:  DATA 20,00
1E48:  DATA 20,32
1E4A:  DATA 3A,20
1E4C:  DATA 00,00
1E4E:  DATA 33,3A
1E50:  DATA 20,00
1E52:  DATA 20,34
1E54:  DATA 3A,20
1E56:  DATA 00,00
1E58:  DATA 20,49
1E5A:  DATA 6E,69
1E5C:  DATA 63,69
1E5E:  DATA 61,6C
1E60:  DATA 69,7A
1E62:  DATA 61,6E
1E64:  DATA 64,6F
1E66:  DATA 00,00
1E68:  DATA 46,72
1E6A:  DATA 65,6E
1E6C:  DATA 74,65
1E6E:  DATA 00,00
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=48MHz,crystal=20MHz) 
*
10C6:  MOVLW  01
10C8:  SUBWF  3E,F
10CA:  BNC   10E4
10CC:  CLRF   FEA
10CE:  MOVLW  3E
10D0:  MOVWF  FE9
10D2:  MOVF   FEF,W
10D4:  BZ    10E4
10D6:  MOVLW  02
10D8:  MOVWF  00
10DA:  DECFSZ 00,F
10DC:  BRA    10DA
10DE:  BRA    10E0
10E0:  DECFSZ FEF,F
10E2:  BRA    10D6
10E4:  RETURN 0
*
1176:  CLRF   FEA
1178:  MOVLW  38
117A:  MOVWF  FE9
117C:  MOVF   FEF,W
117E:  BZ    119C
1180:  MOVLW  0F
1182:  MOVWF  01
1184:  CLRF   00
1186:  DECFSZ 00,F
1188:  BRA    1186
118A:  DECFSZ 01,F
118C:  BRA    1184
118E:  MOVLW  8F
1190:  MOVWF  00
1192:  DECFSZ 00,F
1194:  BRA    1192
1196:  NOP   
1198:  DECFSZ FEF,F
119A:  BRA    1180
119C:  RETURN 0
....................  
.................... // #build(reset=0x1000, interrupt=0x1008) 
.................... // #org 0x000, 0xfff { } 
....................  
.................... #include <Motor1.c> 
.................... #build(reset = 0x1000, interrupt = 0x1008) 
.................... #org 0x000, 0xfff {} 
....................  
.................... #define m1p1 pin_e2 
.................... #define m1p2 pin_c0 
.................... #define m2p1 pin_d0 
.................... #define m2p2 pin_d1 
....................  
.................... void tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void frente() 
.................... { 
....................       output_bit(m1p1, 1); 
*
1F3E:  BSF    F8D.2
1F40:  BCF    F96.2
....................       output_bit(m1p2, 0); 
1F42:  BCF    F8B.0
1F44:  BCF    F94.0
....................       output_bit(m2p1, 0); 
1F46:  BCF    F8C.0
1F48:  BCF    F95.0
....................       output_bit(m2p2, 1); 
1F4A:  BSF    F8C.1
1F4C:  BCF    F95.1
1F4E:  GOTO   1F92 (RETURN)
.................... } 
....................  
.................... void gira_esquerda() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void gira_direita() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_frente() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_frente() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void para() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void MotorInitialize() 
.................... { 
....................       setup_timer_2(T2_DIV_BY_16, 255, 1); //341 us overflow, 341 us interrupt 
*
1F1E:  MOVLW  00
1F20:  IORLW  06
1F22:  MOVWF  FCA
1F24:  MOVLW  FF
1F26:  MOVWF  FCB
....................  
....................       setup_ccp1(CCP_PWM | CCP_SHUTDOWN_AC_L | CCP_SHUTDOWN_BD_L); 
1F28:  BCF    F94.2
1F2A:  BCF    F8B.2
1F2C:  MOVLW  0C
1F2E:  MOVWF  FBD
1F30:  CLRF   FB7
1F32:  CLRF   FB6
....................       setup_ccp2(CCP_PWM); 
1F34:  BCF    F94.1
1F36:  BCF    F8B.1
1F38:  MOVWF  FBA
1F3A:  GOTO   1F7C (RETURN)
.................... } 
....................  
.................... void SetBothPwm(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
190A:  MOVFF  2F,02
190E:  MOVFF  2E,01
1912:  RRCF   02,F
1914:  RRCF   01,F
1916:  RRCF   02,F
1918:  RRCF   01,F
191A:  RRCF   02,F
191C:  MOVFF  01,FBE
1920:  RRCF   02,F
1922:  RRCF   02,W
1924:  ANDLW  30
1926:  MOVWF  00
1928:  MOVF   FBD,W
192A:  ANDLW  CF
192C:  IORWF  00,W
192E:  MOVWF  FBD
....................       set_pwm2_duty((int16)vel); //-50); 
1930:  MOVFF  2F,02
1934:  MOVFF  2E,01
1938:  RRCF   02,F
193A:  RRCF   01,F
193C:  RRCF   02,F
193E:  RRCF   01,F
1940:  RRCF   02,F
1942:  MOVFF  01,FBB
1946:  RRCF   02,F
1948:  RRCF   02,W
194A:  ANDLW  30
194C:  MOVWF  00
194E:  MOVF   FBA,W
1950:  ANDLW  CF
1952:  IORWF  00,W
1954:  MOVWF  FBA
1956:  RETURN 0
.................... } 
....................  
.................... void SetRight(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
1790:  MOVFF  31,02
1794:  MOVFF  30,01
1798:  RRCF   02,F
179A:  RRCF   01,F
179C:  RRCF   02,F
179E:  RRCF   01,F
17A0:  RRCF   02,F
17A2:  MOVFF  01,FBE
17A6:  RRCF   02,F
17A8:  RRCF   02,W
17AA:  ANDLW  30
17AC:  MOVWF  00
17AE:  MOVF   FBD,W
17B0:  ANDLW  CF
17B2:  IORWF  00,W
17B4:  MOVWF  FBD
17B6:  RETURN 0
.................... } 
.................... void SetLeft(int16 vel) 
.................... { 
....................       set_pwm2_duty((int16)vel); 
*
18E2:  MOVFF  31,02
18E6:  MOVFF  30,01
18EA:  RRCF   02,F
18EC:  RRCF   01,F
18EE:  RRCF   02,F
18F0:  RRCF   01,F
18F2:  RRCF   02,F
18F4:  MOVFF  01,FBB
18F8:  RRCF   02,F
18FA:  RRCF   02,W
18FC:  ANDLW  30
18FE:  MOVWF  00
1900:  MOVF   FBA,W
1902:  ANDLW  CF
1904:  IORWF  00,W
1906:  MOVWF  FBA
1908:  RETURN 0
.................... } 
....................  
.................... #include <LCD_KIT.c> 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipula��o de m�dulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: F�bio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
.................... /* 
.................... lcd_cursor_on()                        fun��es LCD 
.................... lcd_cursor_pisca() 
.................... lcd_cursor_off() 
.................... lcd_corre_esquerda() 
.................... lcd_corre_direita() 
.................... lcd_envia_nibble( byte dado ) 
.................... lcd_le_byte() 
.................... lcd_ini() 
.................... lcd_pos_xy( byte x, byte y) 
.................... lcd_escreve( char c)                  \f  Clear display                            //// 
....................                                             \n  Go to start of second line               //// 
....................                                   \b  Move back one position                   //// 
....................  
.................... lcd_le( byte x, byte y) 
.................... lcd_apaga() 
.................... { 
....................  
.................... */ 
.................... // As defini��es a seguir s�o utilizadas para acesso aos pinos do display 
.................... // caso o pino RW n�o seja utilizado, comente a defini��o lcd_rw 
.................... #ifndef lcd_enable 
....................    #define lcd_rs         pin_d2      // pino rs do LCD 
....................    #define lcd_enable     pin_d3      // pino enable do LCD 
....................    #define lcd_d4         pin_d4      // pino de dados d4 do LCD 
....................    #define lcd_d5         pin_d5      // pino de dados d5 do LCD 
....................    #define lcd_d6         pin_d6      // pino de dados d6 do LCD 
....................    #define lcd_d7         pin_d7   // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endere�o da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seq��ncia de inicializa��o do m�dulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................  
.................... /*   O 0x20 eh p configurar o tipo do display e talz. 
....................    O Segundo numero configura o modo do cursor, sendo: 
....................                -> 0xf Cursor piscante 
....................                -> 0xe Cursor comum 
....................                -> 0xc Sem cursor 
....................    O terceiro (1) limpa o display 
....................    O Quarto volta com o cursor. 
.................... */ 
....................  
.................... byte lcd_le_byte() 
.................... // l� um byte do LCD (somente com pino RW) 
.................... { 
....................    byte dado; 
....................    // configura os pinos de dados como entradas 
....................    input(lcd_d4); 
....................    input(lcd_d5); 
....................    input(lcd_d6); 
....................    input(lcd_d7); 
....................    // se o pino rw for utilizado, coloca em 1 
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_high(lcd_enable); // habilita display 
....................    dado = 0;   // zera a vari�vel de leitura 
....................    // l� os quatro bits mais significativos 
....................    if (input(lcd_d7)) bit_set(dado,7); 
....................    if (input(lcd_d6)) bit_set(dado,6); 
....................    if (input(lcd_d5)) bit_set(dado,5); 
....................    if (input(lcd_d4)) bit_set(dado,4); 
....................    // d� um pulso na linha enable 
....................    output_low(lcd_enable); 
....................    output_high(lcd_enable); 
....................    // l� os quatro bits menos significativos 
....................    if (input(lcd_d7)) bit_set(dado,3); 
....................    if (input(lcd_d6)) bit_set(dado,2); 
....................    if (input(lcd_d5)) bit_set(dado,1); 
....................    if (input(lcd_d4)) bit_set(dado,0); 
....................    output_low(lcd_enable);   // desabilita o display 
....................    return dado;   // retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
....................    // coloca os quatro bits nas saidas 
....................    output_bit(lcd_d4,bit_test(dado,0)); 
*
10E6:  BTFSC  3F.0
10E8:  BRA    10EE
10EA:  BCF    F8C.4
10EC:  BRA    10F0
10EE:  BSF    F8C.4
10F0:  BCF    F95.4
....................    output_bit(lcd_d5,bit_test(dado,1)); 
10F2:  BTFSC  3F.1
10F4:  BRA    10FA
10F6:  BCF    F8C.5
10F8:  BRA    10FC
10FA:  BSF    F8C.5
10FC:  BCF    F95.5
....................    output_bit(lcd_d6,bit_test(dado,2)); 
10FE:  BTFSC  3F.2
1100:  BRA    1106
1102:  BCF    F8C.6
1104:  BRA    1108
1106:  BSF    F8C.6
1108:  BCF    F95.6
....................    output_bit(lcd_d7,bit_test(dado,3)); 
110A:  BTFSC  3F.3
110C:  BRA    1112
110E:  BCF    F8C.7
1110:  BRA    1114
1112:  BSF    F8C.7
1114:  BCF    F95.7
....................    // d� um pulso na linha enable 
....................    output_high(lcd_enable); 
1116:  BCF    F95.3
1118:  BSF    F8C.3
....................    output_low(lcd_enable); 
111A:  BCF    F95.3
111C:  BCF    F8C.3
111E:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
....................    // coloca a linha rs em 0 
....................    output_low(lcd_rs); 
1120:  BCF    F95.2
1122:  BCF    F8C.2
....................    // aguarda o display ficar desocupado 
....................    //while ( bit_test(lcd_le_byte(),7) ) ; 
....................    // configura a linha rs dependendo do modo selecionado 
....................    output_bit(lcd_rs,endereco); 
1124:  MOVF   3C,F
1126:  BNZ   112C
1128:  BCF    F8C.2
112A:  BRA    112E
112C:  BSF    F8C.2
112E:  BCF    F95.2
....................    delay_us(100);   // aguarda 100 us 
1130:  MOVLW  64
1132:  MOVWF  3E
1134:  RCALL  10C6
....................    // caso a linha rw esteja definida, coloca em 0 
....................    #ifdef lcd_rw 
....................       output_low(lcd_rw); 
....................    #endif 
....................    // desativa linha enable 
....................    output_low(lcd_enable); 
1136:  BCF    F95.3
1138:  BCF    F8C.3
....................    // envia a primeira parte do byte 
....................    lcd_envia_nibble(dado >> 4); 
113A:  SWAPF  3D,W
113C:  MOVWF  3E
113E:  MOVLW  0F
1140:  ANDWF  3E,F
1142:  MOVFF  3E,3F
1146:  RCALL  10E6
....................    // envia a segunda parte do byte 
....................    lcd_envia_nibble(dado & 0x0f); 
1148:  MOVF   3D,W
114A:  ANDLW  0F
114C:  MOVWF  3E
114E:  MOVWF  3F
1150:  RCALL  10E6
1152:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicializa��o do display 
.................... { 
....................    byte conta; 
....................    output_low(lcd_d4); 
*
1E70:  BCF    F95.4
1E72:  BCF    F8C.4
....................    output_low(lcd_d5); 
1E74:  BCF    F95.5
1E76:  BCF    F8C.5
....................    output_low(lcd_d6); 
1E78:  BCF    F95.6
1E7A:  BCF    F8C.6
....................    output_low(lcd_d7); 
1E7C:  BCF    F95.7
1E7E:  BCF    F8C.7
....................    output_low(lcd_rs); 
1E80:  BCF    F95.2
1E82:  BCF    F8C.2
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_low(lcd_enable); 
1E84:  BCF    F95.3
1E86:  BCF    F8C.3
1E88:  CLRF   16
1E8A:  BTFSC  FF2.7
1E8C:  BSF    16.7
1E8E:  BCF    FF2.7
....................    delay_ms(15); 
1E90:  MOVLW  0F
1E92:  MOVWF  38
1E94:  CALL   1176
1E98:  BTFSC  16.7
1E9A:  BSF    FF2.7
....................    // envia uma seq��ncia de 3 vezes 0x03 
....................    // e depois 0x02 para configurar o m�dulo 
....................    // para modo de 4 bits 
....................    for(conta=1;conta<=3;++conta) 
1E9C:  MOVLW  01
1E9E:  MOVWF  23
1EA0:  MOVF   23,W
1EA2:  SUBLW  03
1EA4:  BNC   1ED2
1EA6:  CLRF   16
1EA8:  BTFSC  FF2.7
1EAA:  BSF    16.7
1EAC:  BCF    FF2.7
....................    { 
....................       lcd_envia_nibble(3); 
1EAE:  MOVLW  03
1EB0:  MOVWF  3F
1EB2:  CALL   10E6
1EB6:  BTFSC  16.7
1EB8:  BSF    FF2.7
1EBA:  CLRF   16
1EBC:  BTFSC  FF2.7
1EBE:  BSF    16.7
1EC0:  BCF    FF2.7
....................       delay_ms(5); 
1EC2:  MOVLW  05
1EC4:  MOVWF  38
1EC6:  CALL   1176
1ECA:  BTFSC  16.7
1ECC:  BSF    FF2.7
1ECE:  INCF   23,F
1ED0:  BRA    1EA0
1ED2:  CLRF   16
1ED4:  BTFSC  FF2.7
1ED6:  BSF    16.7
1ED8:  BCF    FF2.7
....................    } 
....................    lcd_envia_nibble(2); 
1EDA:  MOVLW  02
1EDC:  MOVWF  3F
1EDE:  CALL   10E6
1EE2:  BTFSC  16.7
1EE4:  BSF    FF2.7
....................    // envia string de inicializa��o do display 
....................    for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
1EE6:  CLRF   23
1EE8:  MOVF   23,W
1EEA:  SUBLW  03
1EEC:  BNC   1F1A
1EEE:  CLRF   03
1EF0:  MOVF   23,W
1EF2:  MOVFF  FF2,24
1EF6:  BCF    FF2.7
1EF8:  CALL   1096
1EFC:  BTFSC  24.7
1EFE:  BSF    FF2.7
1F00:  MOVWF  24
1F02:  CLRF   16
1F04:  BTFSC  FF2.7
1F06:  BSF    16.7
1F08:  BCF    FF2.7
1F0A:  CLRF   3C
1F0C:  MOVWF  3D
1F0E:  CALL   1120
1F12:  BTFSC  16.7
1F14:  BSF    FF2.7
1F16:  INCF   23,F
1F18:  BRA    1EE8
1F1A:  GOTO   1F7A (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
1154:  DECFSZ 39,W
1156:  BRA    115A
1158:  BRA    1160
....................       endereco = lcd_seg_lin; 
115A:  MOVLW  40
115C:  MOVWF  3A
115E:  BRA    1162
....................    else 
....................       endereco = 0; 
1160:  CLRF   3A
....................    endereco += x-1; 
1162:  MOVLW  01
1164:  SUBWF  38,W
1166:  ADDWF  3A,F
....................    lcd_envia_byte(0,0x80|endereco); 
1168:  MOVF   3A,W
116A:  IORLW  80
116C:  MOVWF  3B
116E:  CLRF   3C
1170:  MOVWF  3D
1172:  RCALL  1120
1174:  RETURN 0
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
*
119E:  MOVF   37,W
11A0:  XORLW  0C
11A2:  BZ    11B2
11A4:  XORLW  06
11A6:  BZ    11C2
11A8:  XORLW  07
11AA:  BZ    11C2
11AC:  XORLW  05
11AE:  BZ    11CE
11B0:  BRA    11D8
....................    { 
....................      case '\f'    :   lcd_envia_byte(0,1); 
11B2:  CLRF   3C
11B4:  MOVLW  01
11B6:  MOVWF  3D
11B8:  RCALL  1120
....................               delay_ms(2); 
11BA:  MOVLW  02
11BC:  MOVWF  38
11BE:  RCALL  1176
....................             break; 
11C0:  BRA    11E2
....................      case '\n'   : 
....................      case '\r'    :   lcd_pos_xy(1,2); 
11C2:  MOVLW  01
11C4:  MOVWF  38
11C6:  MOVLW  02
11C8:  MOVWF  39
11CA:  RCALL  1154
....................               break; 
11CC:  BRA    11E2
....................      case '\b'    :   lcd_envia_byte(0,0x10); 
11CE:  CLRF   3C
11D0:  MOVLW  10
11D2:  MOVWF  3D
11D4:  RCALL  1120
....................               break; 
11D6:  BRA    11E2
....................      default   :   lcd_envia_byte(1,c); 
11D8:  MOVLW  01
11DA:  MOVWF  3C
11DC:  MOVFF  37,3D
11E0:  RCALL  1120
....................               break; 
....................    } 
11E2:  RETURN 0
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
....................    char valor; 
....................    // seleciona a posi��o do caractere 
....................    lcd_pos_xy(x,y); 
....................    // ativa rs 
....................    output_high(lcd_rs); 
....................    // l� o caractere 
....................    valor = lcd_le_byte(); 
....................    // desativa rs 
....................    output_low(lcd_rs); 
....................    // retorna o valor do caractere 
....................    return valor; 
.................... } 
....................  
.................... void lcd_apaga() 
.................... { 
....................    lcd_envia_byte(0,1); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_cursor_on() 
....................     { 
.................... lcd_envia_byte(0,0x0E); 
....................     } 
....................  
.................... void lcd_cursor_pisca() 
....................     { 
.................... lcd_envia_byte(0,0x0F); 
....................     } 
....................  
.................... void lcd_cursor_off() 
....................     { 
....................  lcd_envia_byte(0,0x0C); 
....................     } 
....................  
.................... void lcd_corre_esquerda() 
....................     { 
....................  lcd_envia_byte(0,0x18); 
....................     } 
....................  
.................... void lcd_corre_direita() 
....................     { 
.................... lcd_envia_byte(0,0x1C); 
....................     } 
....................  
....................  
....................  
.................... #define button1 pin_a4 
.................... #define button2 pin_a5 
.................... #define button3 pin_e0 
.................... #define button4 pin_e1 
....................  
.................... int running; 
.................... const char blankScreen[] = "                "; 
....................  
.................... int16 ad1, ad2, ad3, ad4; 
.................... int16 timerBase; 
.................... int8 adCounter; 
....................  
.................... void ClearScreen(); 
.................... void Setup(); 
....................  
.................... #int_timer0 
.................... void timerTick() 
.................... { 
....................     if (adCounter == 1) 
*
1958:  DECFSZ 22,W
195A:  BRA    196C
....................     { 
....................         ad1 = read_adc(); 
195C:  BSF    FC2.1
195E:  BTFSC  FC2.1
1960:  BRA    195E
1962:  MOVFF  FC3,18
1966:  MOVFF  FC4,19
....................     } 
196A:  BRA    19A8
....................     else if (adCounter == 2) 
196C:  MOVF   22,W
196E:  SUBLW  02
1970:  BNZ   1982
....................     { 
....................         ad2 = read_adc(); 
1972:  BSF    FC2.1
1974:  BTFSC  FC2.1
1976:  BRA    1974
1978:  MOVFF  FC3,1A
197C:  MOVFF  FC4,1B
....................     } 
1980:  BRA    19A8
....................     else if (adCounter == 3) 
1982:  MOVF   22,W
1984:  SUBLW  03
1986:  BNZ   1998
....................     { 
....................         ad3 = read_adc(); 
1988:  BSF    FC2.1
198A:  BTFSC  FC2.1
198C:  BRA    198A
198E:  MOVFF  FC3,1C
1992:  MOVFF  FC4,1D
....................     } 
1996:  BRA    19A8
....................     else 
....................     { 
....................         adCounter = 0; 
1998:  CLRF   22
....................         ad4 = read_adc(); 
199A:  BSF    FC2.1
199C:  BTFSC  FC2.1
199E:  BRA    199C
19A0:  MOVFF  FC3,1E
19A4:  MOVFF  FC4,1F
....................     } 
....................     if (timerBase == 2000) 
19A8:  MOVF   20,W
19AA:  SUBLW  D0
19AC:  BNZ   1A38
19AE:  MOVF   21,W
19B0:  SUBLW  07
19B2:  BNZ   1A38
....................     { 
....................         timerBase = 0; 
19B4:  CLRF   21
19B6:  CLRF   20
....................         ClearScreen(); 
19B8:  BRA    1204
....................         lcd_pos_xy(1, 1); 
19BA:  MOVLW  01
19BC:  MOVWF  38
19BE:  MOVWF  39
19C0:  CALL   1154
....................         printf(lcd_escreve, "1: "); 
19C4:  MOVLW  44
19C6:  MOVWF  FF6
19C8:  MOVLW  1E
19CA:  MOVWF  FF7
19CC:  RCALL  11E4
....................         printf(lcd_escreve, "%04ld", ad1); 
19CE:  MOVLW  0A
19D0:  MOVWF  FE9
19D2:  MOVFF  19,2F
19D6:  MOVFF  18,2E
19DA:  RCALL  122E
....................         printf(lcd_escreve, " 2: "); 
19DC:  MOVLW  48
19DE:  MOVWF  FF6
19E0:  MOVLW  1E
19E2:  MOVWF  FF7
19E4:  CALL   11E4
....................         printf(lcd_escreve, "%04ld", ad2); 
19E8:  MOVLW  0A
19EA:  MOVWF  FE9
19EC:  MOVFF  1B,2F
19F0:  MOVFF  1A,2E
19F4:  RCALL  122E
....................         lcd_pos_xy(1, 2); 
19F6:  MOVLW  01
19F8:  MOVWF  38
19FA:  MOVLW  02
19FC:  MOVWF  39
19FE:  CALL   1154
....................         printf(lcd_escreve, "3: "); 
1A02:  MOVLW  4E
1A04:  MOVWF  FF6
1A06:  MOVLW  1E
1A08:  MOVWF  FF7
1A0A:  CALL   11E4
....................         printf(lcd_escreve, "%04ld", ad3); 
1A0E:  MOVLW  0A
1A10:  MOVWF  FE9
1A12:  MOVFF  1D,2F
1A16:  MOVFF  1C,2E
1A1A:  RCALL  122E
....................         printf(lcd_escreve, " 4: "); 
1A1C:  MOVLW  52
1A1E:  MOVWF  FF6
1A20:  MOVLW  1E
1A22:  MOVWF  FF7
1A24:  CALL   11E4
....................         printf(lcd_escreve, "%04ld", ad4); 
1A28:  MOVLW  0A
1A2A:  MOVWF  FE9
1A2C:  MOVFF  1F,2F
1A30:  MOVFF  1E,2E
1A34:  CALL   122E
....................     } 
....................     timerBase++; 
1A38:  INCF   20,F
1A3A:  BTFSC  FD8.2
1A3C:  INCF   21,F
....................     adCounter++; 
1A3E:  INCF   22,F
....................  
....................     set_adc_channel(adCounter + 1); 
1A40:  MOVLW  01
1A42:  ADDWF  22,W
1A44:  MOVWF  2E
1A46:  RLCF   2E,W
1A48:  MOVWF  00
1A4A:  RLCF   00,F
1A4C:  MOVLW  FC
1A4E:  ANDWF  00,F
1A50:  MOVF   FC2,W
1A52:  ANDLW  C3
1A54:  IORWF  00,W
1A56:  MOVWF  FC2
....................     if (running == 1) 
1A58:  DECFSZ 17,W
1A5A:  BRA    1E38
....................     { 
....................         ///alto significa escuro 
....................         if (ad1 + ad2 > 250) 
1A5C:  MOVF   1A,W
1A5E:  ADDWF  18,W
1A60:  MOVWF  2E
1A62:  MOVF   1B,W
1A64:  ADDWFC 19,W
1A66:  MOVWF  2F
1A68:  MOVF   2F,F
1A6A:  BNZ   1A74
1A6C:  MOVF   2E,W
1A6E:  SUBLW  FA
1A70:  BTFSC  FD8.0
1A72:  BRA    1E30
....................         { 
....................             //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................             //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................             // 
....................             if ((float)ad1 / ad1 + ad2 < 0.48f) 
1A74:  MOVFF  19,33
1A78:  MOVFF  18,32
1A7C:  RCALL  1320
1A7E:  MOVFF  03,31
1A82:  MOVFF  02,30
1A86:  MOVFF  01,2F
1A8A:  MOVFF  00,2E
1A8E:  MOVFF  19,33
1A92:  MOVFF  18,32
1A96:  RCALL  1320
1A98:  MOVFF  31,35
1A9C:  MOVFF  30,34
1AA0:  MOVFF  2F,33
1AA4:  MOVFF  2E,32
1AA8:  MOVFF  03,39
1AAC:  MOVFF  02,38
1AB0:  MOVFF  01,37
1AB4:  MOVFF  00,36
1AB8:  RCALL  1356
1ABA:  MOVFF  03,31
1ABE:  MOVFF  02,30
1AC2:  MOVFF  01,2F
1AC6:  MOVFF  00,2E
1ACA:  MOVFF  1B,33
1ACE:  MOVFF  1A,32
1AD2:  RCALL  1320
1AD4:  BCF    FD8.1
1AD6:  MOVFF  31,35
1ADA:  MOVFF  30,34
1ADE:  MOVFF  2F,33
1AE2:  MOVFF  2E,32
1AE6:  MOVFF  03,39
1AEA:  MOVFF  02,38
1AEE:  MOVFF  01,37
1AF2:  MOVFF  00,36
1AF6:  RCALL  14B0
1AF8:  MOVFF  03,31
1AFC:  MOVFF  02,30
1B00:  MOVFF  01,2F
1B04:  MOVFF  00,2E
1B08:  MOVFF  03,35
1B0C:  MOVFF  02,34
1B10:  MOVFF  01,33
1B14:  MOVFF  00,32
1B18:  MOVLW  8F
1B1A:  MOVWF  39
1B1C:  MOVLW  C2
1B1E:  MOVWF  38
1B20:  MOVLW  75
1B22:  MOVWF  37
1B24:  MOVLW  7D
1B26:  MOVWF  36
1B28:  RCALL  171A
1B2A:  BTFSS  FD8.0
1B2C:  BRA    1C46
....................             { 
....................                 SetRight(1023); 
1B2E:  MOVLW  03
1B30:  MOVWF  31
1B32:  SETF   30
1B34:  RCALL  1790
....................                 SetLeft((((float)ad1 / ad1 + ad2) * 200) + 800); 
1B36:  MOVFF  19,33
1B3A:  MOVFF  18,32
1B3E:  CALL   1320
1B42:  MOVFF  03,31
1B46:  MOVFF  02,30
1B4A:  MOVFF  01,2F
1B4E:  MOVFF  00,2E
1B52:  MOVFF  19,33
1B56:  MOVFF  18,32
1B5A:  CALL   1320
1B5E:  MOVFF  31,35
1B62:  MOVFF  30,34
1B66:  MOVFF  2F,33
1B6A:  MOVFF  2E,32
1B6E:  MOVFF  03,39
1B72:  MOVFF  02,38
1B76:  MOVFF  01,37
1B7A:  MOVFF  00,36
1B7E:  CALL   1356
1B82:  MOVFF  03,31
1B86:  MOVFF  02,30
1B8A:  MOVFF  01,2F
1B8E:  MOVFF  00,2E
1B92:  MOVFF  1B,33
1B96:  MOVFF  1A,32
1B9A:  CALL   1320
1B9E:  BCF    FD8.1
1BA0:  MOVFF  31,35
1BA4:  MOVFF  30,34
1BA8:  MOVFF  2F,33
1BAC:  MOVFF  2E,32
1BB0:  MOVFF  03,39
1BB4:  MOVFF  02,38
1BB8:  MOVFF  01,37
1BBC:  MOVFF  00,36
1BC0:  RCALL  14B0
1BC2:  MOVFF  03,31
1BC6:  MOVFF  02,30
1BCA:  MOVFF  01,2F
1BCE:  MOVFF  00,2E
1BD2:  MOVFF  03,35
1BD6:  MOVFF  02,34
1BDA:  MOVFF  01,33
1BDE:  MOVFF  00,32
1BE2:  CLRF   39
1BE4:  CLRF   38
1BE6:  MOVLW  48
1BE8:  MOVWF  37
1BEA:  MOVLW  86
1BEC:  MOVWF  36
1BEE:  RCALL  17B8
1BF0:  MOVFF  03,31
1BF4:  MOVFF  02,30
1BF8:  MOVFF  01,2F
1BFC:  MOVFF  00,2E
1C00:  BCF    FD8.1
1C02:  MOVFF  03,35
1C06:  MOVFF  02,34
1C0A:  MOVFF  01,33
1C0E:  MOVFF  00,32
1C12:  CLRF   39
1C14:  CLRF   38
1C16:  MOVLW  48
1C18:  MOVWF  37
1C1A:  MOVLW  88
1C1C:  MOVWF  36
1C1E:  RCALL  14B0
1C20:  MOVFF  03,31
1C24:  MOVFF  02,30
1C28:  MOVFF  01,2F
1C2C:  MOVFF  00,2E
1C30:  RCALL  18AA
1C32:  MOVFF  02,2F
1C36:  MOVFF  01,2E
1C3A:  MOVFF  02,31
1C3E:  MOVFF  01,30
1C42:  RCALL  18E2
....................             } 
1C44:  BRA    1E2E
....................             else if ((float)ad2 / ad1 + ad2 < 0.48f) 
1C46:  MOVFF  1B,33
1C4A:  MOVFF  1A,32
1C4E:  CALL   1320
1C52:  MOVFF  03,31
1C56:  MOVFF  02,30
1C5A:  MOVFF  01,2F
1C5E:  MOVFF  00,2E
1C62:  MOVFF  19,33
1C66:  MOVFF  18,32
1C6A:  CALL   1320
1C6E:  MOVFF  31,35
1C72:  MOVFF  30,34
1C76:  MOVFF  2F,33
1C7A:  MOVFF  2E,32
1C7E:  MOVFF  03,39
1C82:  MOVFF  02,38
1C86:  MOVFF  01,37
1C8A:  MOVFF  00,36
1C8E:  CALL   1356
1C92:  MOVFF  03,31
1C96:  MOVFF  02,30
1C9A:  MOVFF  01,2F
1C9E:  MOVFF  00,2E
1CA2:  MOVFF  1B,33
1CA6:  MOVFF  1A,32
1CAA:  CALL   1320
1CAE:  BCF    FD8.1
1CB0:  MOVFF  31,35
1CB4:  MOVFF  30,34
1CB8:  MOVFF  2F,33
1CBC:  MOVFF  2E,32
1CC0:  MOVFF  03,39
1CC4:  MOVFF  02,38
1CC8:  MOVFF  01,37
1CCC:  MOVFF  00,36
1CD0:  CALL   14B0
1CD4:  MOVFF  03,31
1CD8:  MOVFF  02,30
1CDC:  MOVFF  01,2F
1CE0:  MOVFF  00,2E
1CE4:  MOVFF  03,35
1CE8:  MOVFF  02,34
1CEC:  MOVFF  01,33
1CF0:  MOVFF  00,32
1CF4:  MOVLW  8F
1CF6:  MOVWF  39
1CF8:  MOVLW  C2
1CFA:  MOVWF  38
1CFC:  MOVLW  75
1CFE:  MOVWF  37
1D00:  MOVLW  7D
1D02:  MOVWF  36
1D04:  RCALL  171A
1D06:  BTFSS  FD8.0
1D08:  BRA    1E26
....................             { 
....................                 SetLeft(1023); 
1D0A:  MOVLW  03
1D0C:  MOVWF  31
1D0E:  SETF   30
1D10:  RCALL  18E2
....................                 SetRight((((float)ad2 / ad1 + ad2) * 200) + 800); 
1D12:  MOVFF  1B,33
1D16:  MOVFF  1A,32
1D1A:  CALL   1320
1D1E:  MOVFF  03,31
1D22:  MOVFF  02,30
1D26:  MOVFF  01,2F
1D2A:  MOVFF  00,2E
1D2E:  MOVFF  19,33
1D32:  MOVFF  18,32
1D36:  CALL   1320
1D3A:  MOVFF  31,35
1D3E:  MOVFF  30,34
1D42:  MOVFF  2F,33
1D46:  MOVFF  2E,32
1D4A:  MOVFF  03,39
1D4E:  MOVFF  02,38
1D52:  MOVFF  01,37
1D56:  MOVFF  00,36
1D5A:  CALL   1356
1D5E:  MOVFF  03,31
1D62:  MOVFF  02,30
1D66:  MOVFF  01,2F
1D6A:  MOVFF  00,2E
1D6E:  MOVFF  1B,33
1D72:  MOVFF  1A,32
1D76:  CALL   1320
1D7A:  BCF    FD8.1
1D7C:  MOVFF  31,35
1D80:  MOVFF  30,34
1D84:  MOVFF  2F,33
1D88:  MOVFF  2E,32
1D8C:  MOVFF  03,39
1D90:  MOVFF  02,38
1D94:  MOVFF  01,37
1D98:  MOVFF  00,36
1D9C:  CALL   14B0
1DA0:  MOVFF  03,31
1DA4:  MOVFF  02,30
1DA8:  MOVFF  01,2F
1DAC:  MOVFF  00,2E
1DB0:  MOVFF  03,35
1DB4:  MOVFF  02,34
1DB8:  MOVFF  01,33
1DBC:  MOVFF  00,32
1DC0:  CLRF   39
1DC2:  CLRF   38
1DC4:  MOVLW  48
1DC6:  MOVWF  37
1DC8:  MOVLW  86
1DCA:  MOVWF  36
1DCC:  RCALL  17B8
1DCE:  MOVFF  03,31
1DD2:  MOVFF  02,30
1DD6:  MOVFF  01,2F
1DDA:  MOVFF  00,2E
1DDE:  BCF    FD8.1
1DE0:  MOVFF  03,35
1DE4:  MOVFF  02,34
1DE8:  MOVFF  01,33
1DEC:  MOVFF  00,32
1DF0:  CLRF   39
1DF2:  CLRF   38
1DF4:  MOVLW  48
1DF6:  MOVWF  37
1DF8:  MOVLW  88
1DFA:  MOVWF  36
1DFC:  CALL   14B0
1E00:  MOVFF  03,31
1E04:  MOVFF  02,30
1E08:  MOVFF  01,2F
1E0C:  MOVFF  00,2E
1E10:  RCALL  18AA
1E12:  MOVFF  02,2F
1E16:  MOVFF  01,2E
1E1A:  MOVFF  02,31
1E1E:  MOVFF  01,30
1E22:  RCALL  1790
....................             } 
1E24:  BRA    1E2E
....................             else 
....................             { 
....................                 SetBothPwm(1023); 
1E26:  MOVLW  03
1E28:  MOVWF  2F
1E2A:  SETF   2E
1E2C:  RCALL  190A
....................             } 
....................         } 
1E2E:  BRA    1E36
....................         else 
....................         { 
....................             SetBothPwm(0); 
1E30:  CLRF   2F
1E32:  CLRF   2E
1E34:  RCALL  190A
....................         } 
....................     } 
1E36:  BRA    1E3E
....................  
....................     ///Seta para pegar no proximo tick 
....................     else 
....................     { 
....................         SetBothPwm(0); 
1E38:  CLRF   2F
1E3A:  CLRF   2E
1E3C:  RCALL  190A
....................     } 
1E3E:  BCF    FF2.2
1E40:  GOTO   1054
.................... } 
....................  
.................... void main() 
*
1F96:  CLRF   FF8
1F98:  BCF    FD0.7
1F9A:  BSF    07.7
1F9C:  MOVF   FC1,W
1F9E:  ANDLW  C0
1FA0:  IORLW  0F
1FA2:  MOVWF  FC1
1FA4:  MOVLW  07
1FA6:  MOVWF  FB4
.................... { 
....................     Setup(); 
1FA8:  BRA    1F52
1FAA:  CLRF   16
1FAC:  BTFSC  FF2.7
1FAE:  BSF    16.7
1FB0:  BCF    FF2.7
....................     lcd_pos_xy(1, 1); 
1FB2:  MOVLW  01
1FB4:  MOVWF  38
1FB6:  MOVWF  39
1FB8:  CALL   1154
1FBC:  BTFSC  16.7
1FBE:  BSF    FF2.7
....................     printf(lcd_escreve, " Inicializando"); 
1FC0:  MOVLW  58
1FC2:  MOVWF  FF6
1FC4:  MOVLW  1E
1FC6:  MOVWF  FF7
1FC8:  CLRF   16
1FCA:  BTFSC  FF2.7
1FCC:  BSF    16.7
1FCE:  BCF    FF2.7
1FD0:  CALL   11E4
1FD4:  BTFSC  16.7
1FD6:  BSF    FF2.7
....................     delay_ms(1000); 
1FD8:  MOVLW  04
1FDA:  MOVWF  23
1FDC:  CLRF   16
1FDE:  BTFSC  FF2.7
1FE0:  BSF    16.7
1FE2:  BCF    FF2.7
1FE4:  MOVLW  FA
1FE6:  MOVWF  38
1FE8:  CALL   1176
1FEC:  BTFSC  16.7
1FEE:  BSF    FF2.7
1FF0:  DECFSZ 23,F
1FF2:  BRA    1FDC
....................  
....................     do 
....................     { 
....................         if (input(button1) == 0) 
1FF4:  BSF    F92.4
1FF6:  BTFSC  F80.4
1FF8:  BRA    2040
....................         { 
....................             running = 1; 
1FFA:  MOVLW  01
1FFC:  MOVWF  17
1FFE:  CLRF   16
2000:  BTFSC  FF2.7
2002:  BSF    16.7
2004:  BCF    FF2.7
....................             lcd_pos_xy(1, 1); 
2006:  MOVLW  01
2008:  MOVWF  38
200A:  MOVWF  39
200C:  CALL   1154
2010:  BTFSC  16.7
2012:  BSF    FF2.7
....................             printf(lcd_escreve, "Frente"); 
2014:  MOVLW  68
2016:  MOVWF  FF6
2018:  MOVLW  1E
201A:  MOVWF  FF7
201C:  CLRF   16
201E:  BTFSC  FF2.7
2020:  BSF    16.7
2022:  BCF    FF2.7
2024:  CALL   11E4
2028:  BTFSC  16.7
202A:  BSF    FF2.7
202C:  CLRF   16
202E:  BTFSC  FF2.7
2030:  BSF    16.7
2032:  BCF    FF2.7
....................             SetBothPwm(1023); 
2034:  MOVLW  03
2036:  MOVWF  2F
2038:  SETF   2E
203A:  RCALL  190A
203C:  BTFSC  16.7
203E:  BSF    FF2.7
....................         } 
....................         if (input(button2) == 0) 
2040:  BSF    F92.5
2042:  BTFSC  F80.5
2044:  BRA    2048
....................         { 
....................             running = 0; 
2046:  CLRF   17
....................         } 
....................     } while (1); 
2048:  BRA    1FF4
.................... } 
....................  
204A:  SLEEP 
.................... void Setup() 
.................... { 
....................     adCounter = 1; 
*
1F52:  MOVLW  01
1F54:  MOVWF  22
....................     running = 1; 
1F56:  MOVWF  17
....................  
....................     setup_adc_ports(AN0_TO_AN3); 
1F58:  MOVF   FC1,W
1F5A:  ANDLW  C0
1F5C:  IORLW  0B
1F5E:  MOVWF  FC1
....................     setup_adc(ADC_CLOCK_DIV_4); 
1F60:  MOVF   FC0,W
1F62:  ANDLW  C0
1F64:  IORLW  04
1F66:  MOVWF  FC0
1F68:  BSF    FC0.7
1F6A:  BSF    FC2.0
....................  
....................     setup_timer_0(RTCC_INTERNAL | RTCC_DIV_2 | RTCC_8_BIT); 
1F6C:  MOVLW  C0
1F6E:  MOVWF  FD5
....................     set_timer0(0); 
1F70:  CLRF   FD7
1F72:  CLRF   FD6
....................     enable_interrupts(INT_TIMER0); 
1F74:  BSF    FF2.5
....................     enable_interrupts(GLOBAL); 
1F76:  IORWF  FF2,F
....................  
....................     lcd_ini(); 
1F78:  BRA    1E70
....................     MotorInitialize(); 
1F7A:  BRA    1F1E
1F7C:  CLRF   16
1F7E:  BTFSC  FF2.7
1F80:  BSF    16.7
1F82:  BCF    FF2.7
....................     SetBothPwm(1023); 
1F84:  MOVLW  03
1F86:  MOVWF  2F
1F88:  SETF   2E
1F8A:  RCALL  190A
1F8C:  BTFSC  16.7
1F8E:  BSF    FF2.7
....................     frente(); 
1F90:  BRA    1F3E
1F92:  GOTO   1FAA (RETURN)
.................... } 
....................  
.................... void ClearScreen() 
.................... { 
....................     lcd_pos_xy(1, 1); 
*
1204:  MOVLW  01
1206:  MOVWF  38
1208:  MOVWF  39
120A:  RCALL  1154
....................     printf(lcd_escreve, blankScreen); 
120C:  MOVLW  B4
120E:  MOVWF  FF6
1210:  MOVLW  10
1212:  MOVWF  FF7
1214:  RCALL  11E4
....................     lcd_pos_xy(1, 2); 
1216:  MOVLW  01
1218:  MOVWF  38
121A:  MOVLW  02
121C:  MOVWF  39
121E:  RCALL  1154
....................     printf(lcd_escreve, blankScreen); 
1220:  MOVLW  B4
1222:  MOVWF  FF6
1224:  MOVLW  10
1226:  MOVWF  FF7
1228:  RCALL  11E4
122A:  GOTO   19BA (RETURN)
.................... } 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
