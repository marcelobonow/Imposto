CCS PCH C Compiler, Version 5.015, 5967               27-ago-18 23:07

               Filename:   D:\Projetos\Imposto\Source Code\main.lst

               ROM used:   2932 bytes (9%)
                           Largest free fragment is 25736
               RAM used:   36 (2%) at main() level
                           72 (4%) worst case
               Stack used: 11 locations (5 in main + 6 for interrupts)
               Stack size: 31

*
1000:  GOTO   1AF0
*
1008:  MOVWF  04
100A:  MOVFF  FD8,05
100E:  MOVFF  FE0,06
1012:  MOVLB  0
1014:  MOVFF  FE9,0C
1018:  MOVFF  FEA,07
101C:  MOVFF  FE1,08
1020:  MOVFF  FE2,09
1024:  MOVFF  FD9,0A
1028:  MOVFF  FDA,0B
102C:  MOVFF  FF3,12
1030:  MOVFF  FF4,13
1034:  MOVFF  FFA,14
1038:  MOVFF  00,0E
103C:  MOVFF  01,0F
1040:  MOVFF  02,10
1044:  MOVFF  03,11
1048:  BTFSS  FF2.5
104A:  GOTO   1054
104E:  BTFSC  FF2.2
1050:  GOTO   16BC
1054:  MOVFF  0E,00
1058:  MOVFF  0F,01
105C:  MOVFF  10,02
1060:  MOVFF  11,03
1064:  MOVFF  0C,FE9
1068:  MOVFF  07,FEA
106C:  BSF    07.7
106E:  MOVFF  08,FE1
1072:  MOVFF  09,FE2
1076:  MOVFF  0A,FD9
107A:  MOVFF  0B,FDA
107E:  MOVFF  12,FF3
1082:  MOVFF  13,FF4
1086:  MOVFF  14,FFA
108A:  MOVF   04,W
108C:  MOVFF  06,FE0
1090:  MOVFF  05,FD8
1094:  RETFIE 0
.................... //#DEFINE DEBUG 
.................... #include <main.h> 
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
1096:  MOVFF  FF2,0D
109A:  BCF    FF2.7
109C:  CLRF   FF7
109E:  ADDLW  B0
10A0:  MOVWF  FF6
10A2:  MOVLW  10
10A4:  ADDWFC FF7,F
10A6:  TBLRD*+
10A8:  MOVF   FF5,W
10AA:  BTFSC  0D.7
10AC:  BSF    FF2.7
10AE:  RETURN 0
10B0:  DATA 28,0C
10B2:  DATA 01,06
*
11DC:  TBLRD*+
11DE:  MOVF   FF5,F
11E0:  BZ    11FA
11E2:  MOVFF  FF6,36
11E6:  MOVFF  FF7,37
11EA:  MOVFF  FF5,3F
11EE:  RCALL  118C
11F0:  MOVFF  36,FF6
11F4:  MOVFF  37,FF7
11F8:  BRA    11DC
11FA:  RETURN 0
11FC:  MOVFF  FEA,3E
1200:  MOVFF  FE9,3D
1204:  BTFSS  37.7
1206:  BRA    1218
1208:  BSF    3D.7
120A:  BTFSS  3D.4
120C:  INCF   3D,F
120E:  COMF   36,F
1210:  COMF   37,F
1212:  INCF   36,F
1214:  BTFSC  FD8.2
1216:  INCF   37,F
1218:  SWAPF  37,W
121A:  IORLW  F0
121C:  MOVWF  39
121E:  ADDWF  39,F
1220:  ADDLW  E2
1222:  MOVWF  3A
1224:  ADDLW  32
1226:  MOVWF  3C
1228:  MOVF   37,W
122A:  ANDLW  0F
122C:  ADDWF  3A,F
122E:  ADDWF  3A,F
1230:  ADDWF  3C,F
1232:  ADDLW  E9
1234:  MOVWF  3B
1236:  ADDWF  3B,F
1238:  ADDWF  3B,F
123A:  SWAPF  36,W
123C:  ANDLW  0F
123E:  ADDWF  3B,F
1240:  ADDWF  3C,F
1242:  RLCF   3B,F
1244:  RLCF   3C,F
1246:  COMF   3C,F
1248:  RLCF   3C,F
124A:  MOVF   36,W
124C:  ANDLW  0F
124E:  ADDWF  3C,F
1250:  RLCF   39,F
1252:  MOVLW  07
1254:  MOVWF  38
1256:  MOVLW  0A
1258:  DECF   3B,F
125A:  ADDWF  3C,F
125C:  BNC   1258
125E:  DECF   3A,F
1260:  ADDWF  3B,F
1262:  BNC   125E
1264:  DECF   39,F
1266:  ADDWF  3A,F
1268:  BNC   1264
126A:  DECF   38,F
126C:  ADDWF  39,F
126E:  BNC   126A
1270:  CLRF   FEA
1272:  MOVLW  38
1274:  MOVWF  FE9
1276:  MOVLW  07
1278:  ANDWF  3D,W
127A:  BCF    3D.6
127C:  MOVF   FED,F
127E:  ANDWF  3D,W
1280:  BNZ   1290
1282:  BTFSC  3D.4
1284:  MOVF   FEE,F
1286:  BTFSC  3D.4
1288:  BRA    1290
128A:  MOVLW  20
128C:  MOVWF  00
128E:  BRA    12D0
1290:  ADDWF  FE9,F
1292:  MOVLW  00
1294:  ADDWFC FEA,F
1296:  MOVF   FE9,W
1298:  SUBLW  3C
129A:  BNZ   12A2
129C:  MOVF   FEA,F
129E:  BNZ   12A2
12A0:  BSF    3D.6
12A2:  MOVF   FEF,W
12A4:  MOVWF  00
12A6:  BNZ   12B8
12A8:  BTFSC  3D.6
12AA:  BRA    12B8
12AC:  BTFSC  3D.4
12AE:  BRA    12E6
12B0:  BTFSC  3D.3
12B2:  BRA    12B8
12B4:  MOVLW  20
12B6:  BRA    12CE
12B8:  BTFSS  3D.7
12BA:  BRA    12C8
12BC:  MOVLW  2D
12BE:  MOVWF  00
12C0:  MOVF   FED,W
12C2:  BCF    3D.6
12C4:  BCF    3D.7
12C6:  BRA    12D0
12C8:  BSF    3D.3
12CA:  BCF    3D.4
12CC:  MOVLW  30
12CE:  ADDWF  00,F
12D0:  MOVFF  FEA,37
12D4:  MOVFF  FE9,36
12D8:  MOVFF  00,3F
12DC:  RCALL  118C
12DE:  MOVFF  37,FEA
12E2:  MOVFF  36,FE9
12E6:  MOVF   FEE,W
12E8:  BTFSS  3D.6
12EA:  BRA    1296
12EC:  RETURN 0
12EE:  MOVLW  8E
12F0:  MOVWF  00
12F2:  MOVFF  3B,01
12F6:  MOVFF  3A,02
12FA:  CLRF   03
12FC:  MOVF   01,F
12FE:  BNZ   1312
1300:  MOVFF  02,01
1304:  CLRF   02
1306:  MOVLW  08
1308:  SUBWF  00,F
130A:  MOVF   01,F
130C:  BNZ   1312
130E:  CLRF   00
1310:  BRA    1322
1312:  BCF    FD8.0
1314:  BTFSC  01.7
1316:  BRA    1320
1318:  RLCF   02,F
131A:  RLCF   01,F
131C:  DECF   00,F
131E:  BRA    1312
1320:  BCF    01.7
1322:  RETURN 0
1324:  MOVF   3A,W
1326:  BTFSC  FD8.2
1328:  BRA    1474
132A:  MOVWF  46
132C:  MOVF   3E,W
132E:  BTFSC  FD8.2
1330:  BRA    1474
1332:  SUBWF  46,F
1334:  BNC   1340
1336:  MOVLW  7F
1338:  ADDWF  46,F
133A:  BTFSC  FD8.0
133C:  BRA    1474
133E:  BRA    134C
1340:  MOVLW  81
1342:  SUBWF  46,F
1344:  BTFSS  FD8.0
1346:  BRA    1474
1348:  BTFSC  FD8.2
134A:  BRA    1474
134C:  MOVFF  46,00
1350:  CLRF   01
1352:  CLRF   02
1354:  CLRF   03
1356:  CLRF   45
1358:  MOVFF  3B,44
135C:  BSF    44.7
135E:  MOVFF  3C,43
1362:  MOVFF  3D,42
1366:  MOVLW  19
1368:  MOVWF  46
136A:  MOVF   41,W
136C:  SUBWF  42,F
136E:  BC    138A
1370:  MOVLW  01
1372:  SUBWF  43,F
1374:  BC    138A
1376:  SUBWF  44,F
1378:  BC    138A
137A:  SUBWF  45,F
137C:  BC    138A
137E:  INCF   45,F
1380:  INCF   44,F
1382:  INCF   43,F
1384:  MOVF   41,W
1386:  ADDWF  42,F
1388:  BRA    13DA
138A:  MOVF   40,W
138C:  SUBWF  43,F
138E:  BC    13B4
1390:  MOVLW  01
1392:  SUBWF  44,F
1394:  BC    13B4
1396:  SUBWF  45,F
1398:  BC    13B4
139A:  INCF   45,F
139C:  INCF   44,F
139E:  MOVF   40,W
13A0:  ADDWF  43,F
13A2:  MOVF   41,W
13A4:  ADDWF  42,F
13A6:  BNC   13DA
13A8:  INCF   43,F
13AA:  BNZ   13DA
13AC:  INCF   44,F
13AE:  BNZ   13DA
13B0:  INCF   45,F
13B2:  BRA    13DA
13B4:  MOVF   3F,W
13B6:  IORLW  80
13B8:  SUBWF  44,F
13BA:  BC    13D8
13BC:  MOVLW  01
13BE:  SUBWF  45,F
13C0:  BC    13D8
13C2:  INCF   45,F
13C4:  MOVF   3F,W
13C6:  IORLW  80
13C8:  ADDWF  44,F
13CA:  MOVF   40,W
13CC:  ADDWF  43,F
13CE:  BNC   13A2
13D0:  INCF   44,F
13D2:  BNZ   13A2
13D4:  INCF   45,F
13D6:  BRA    13A2
13D8:  BSF    03.0
13DA:  DECFSZ 46,F
13DC:  BRA    13E0
13DE:  BRA    13F6
13E0:  BCF    FD8.0
13E2:  RLCF   42,F
13E4:  RLCF   43,F
13E6:  RLCF   44,F
13E8:  RLCF   45,F
13EA:  BCF    FD8.0
13EC:  RLCF   03,F
13EE:  RLCF   02,F
13F0:  RLCF   01,F
13F2:  RLCF   47,F
13F4:  BRA    136A
13F6:  BTFSS  47.0
13F8:  BRA    1406
13FA:  BCF    FD8.0
13FC:  RRCF   01,F
13FE:  RRCF   02,F
1400:  RRCF   03,F
1402:  RRCF   47,F
1404:  BRA    140A
1406:  DECF   00,F
1408:  BZ    1474
140A:  BTFSC  47.7
140C:  BRA    144A
140E:  BCF    FD8.0
1410:  RLCF   42,F
1412:  RLCF   43,F
1414:  RLCF   44,F
1416:  RLCF   45,F
1418:  MOVF   41,W
141A:  SUBWF  42,F
141C:  BC    142C
141E:  MOVLW  01
1420:  SUBWF  43,F
1422:  BC    142C
1424:  SUBWF  44,F
1426:  BC    142C
1428:  SUBWF  45,F
142A:  BNC   1460
142C:  MOVF   40,W
142E:  SUBWF  43,F
1430:  BC    143C
1432:  MOVLW  01
1434:  SUBWF  44,F
1436:  BC    143C
1438:  SUBWF  45,F
143A:  BNC   1460
143C:  MOVF   3F,W
143E:  IORLW  80
1440:  SUBWF  44,F
1442:  BC    144A
1444:  MOVLW  01
1446:  SUBWF  45,F
1448:  BNC   1460
144A:  INCF   03,F
144C:  BNZ   1460
144E:  INCF   02,F
1450:  BNZ   1460
1452:  INCF   01,F
1454:  BNZ   1460
1456:  INCF   00,F
1458:  BZ    1474
145A:  RRCF   01,F
145C:  RRCF   02,F
145E:  RRCF   03,F
1460:  MOVFF  3B,46
1464:  MOVF   3F,W
1466:  XORWF  46,F
1468:  BTFSS  46.7
146A:  BRA    1470
146C:  BSF    01.7
146E:  BRA    147C
1470:  BCF    01.7
1472:  BRA    147C
1474:  CLRF   00
1476:  CLRF   01
1478:  CLRF   02
147A:  CLRF   03
147C:  RETURN 0
147E:  MOVFF  37,3E
1482:  MOVF   3B,W
1484:  XORWF  3E,F
1486:  BTFSS  3E.7
1488:  BRA    1494
148A:  BCF    FD8.2
148C:  BCF    FD8.0
148E:  BTFSC  37.7
1490:  BSF    FD8.0
1492:  BRA    14F2
1494:  MOVFF  37,3E
1498:  MOVFF  3A,3F
149C:  MOVF   36,W
149E:  SUBWF  3F,F
14A0:  BZ    14AE
14A2:  BTFSS  3E.7
14A4:  BRA    14F2
14A6:  MOVF   FD8,W
14A8:  XORLW  01
14AA:  MOVWF  FD8
14AC:  BRA    14F2
14AE:  MOVFF  3B,3F
14B2:  MOVF   37,W
14B4:  SUBWF  3F,F
14B6:  BZ    14C4
14B8:  BTFSS  3E.7
14BA:  BRA    14F2
14BC:  MOVF   FD8,W
14BE:  XORLW  01
14C0:  MOVWF  FD8
14C2:  BRA    14F2
14C4:  MOVFF  3C,3F
14C8:  MOVF   38,W
14CA:  SUBWF  3F,F
14CC:  BZ    14DA
14CE:  BTFSS  3E.7
14D0:  BRA    14F2
14D2:  MOVF   FD8,W
14D4:  XORLW  01
14D6:  MOVWF  FD8
14D8:  BRA    14F2
14DA:  MOVFF  3D,3F
14DE:  MOVF   39,W
14E0:  SUBWF  3F,F
14E2:  BZ    14F0
14E4:  BTFSS  3E.7
14E6:  BRA    14F2
14E8:  MOVF   FD8,W
14EA:  XORLW  01
14EC:  MOVWF  FD8
14EE:  BRA    14F2
14F0:  BCF    FD8.0
14F2:  RETURN 0
*
1544:  MOVF   36,W
1546:  BTFSC  FD8.2
1548:  BRA    162C
154A:  MOVWF  00
154C:  MOVF   3A,W
154E:  BTFSC  FD8.2
1550:  BRA    162C
1552:  ADDWF  00,F
1554:  BNC   155E
1556:  MOVLW  81
1558:  ADDWF  00,F
155A:  BC    162C
155C:  BRA    1566
155E:  MOVLW  7F
1560:  SUBWF  00,F
1562:  BNC   162C
1564:  BZ    162C
1566:  MOVFF  37,3E
156A:  MOVF   3B,W
156C:  XORWF  3E,F
156E:  BSF    37.7
1570:  BSF    3B.7
1572:  MOVF   39,W
1574:  MULWF  3D
1576:  MOVFF  FF4,40
157A:  MOVF   38,W
157C:  MULWF  3C
157E:  MOVFF  FF4,03
1582:  MOVFF  FF3,3F
1586:  MULWF  3D
1588:  MOVF   FF3,W
158A:  ADDWF  40,F
158C:  MOVF   FF4,W
158E:  ADDWFC 3F,F
1590:  MOVLW  00
1592:  ADDWFC 03,F
1594:  MOVF   39,W
1596:  MULWF  3C
1598:  MOVF   FF3,W
159A:  ADDWF  40,F
159C:  MOVF   FF4,W
159E:  ADDWFC 3F,F
15A0:  MOVLW  00
15A2:  CLRF   02
15A4:  ADDWFC 03,F
15A6:  ADDWFC 02,F
15A8:  MOVF   37,W
15AA:  MULWF  3D
15AC:  MOVF   FF3,W
15AE:  ADDWF  3F,F
15B0:  MOVF   FF4,W
15B2:  ADDWFC 03,F
15B4:  MOVLW  00
15B6:  ADDWFC 02,F
15B8:  MOVF   37,W
15BA:  MULWF  3C
15BC:  MOVF   FF3,W
15BE:  ADDWF  03,F
15C0:  MOVF   FF4,W
15C2:  ADDWFC 02,F
15C4:  MOVLW  00
15C6:  CLRF   01
15C8:  ADDWFC 01,F
15CA:  MOVF   39,W
15CC:  MULWF  3B
15CE:  MOVF   FF3,W
15D0:  ADDWF  3F,F
15D2:  MOVF   FF4,W
15D4:  ADDWFC 03,F
15D6:  MOVLW  00
15D8:  ADDWFC 02,F
15DA:  ADDWFC 01,F
15DC:  MOVF   38,W
15DE:  MULWF  3B
15E0:  MOVF   FF3,W
15E2:  ADDWF  03,F
15E4:  MOVF   FF4,W
15E6:  ADDWFC 02,F
15E8:  MOVLW  00
15EA:  ADDWFC 01,F
15EC:  MOVF   37,W
15EE:  MULWF  3B
15F0:  MOVF   FF3,W
15F2:  ADDWF  02,F
15F4:  MOVF   FF4,W
15F6:  ADDWFC 01,F
15F8:  INCF   00,F
15FA:  BTFSC  01.7
15FC:  BRA    1608
15FE:  RLCF   3F,F
1600:  RLCF   03,F
1602:  RLCF   02,F
1604:  RLCF   01,F
1606:  DECF   00,F
1608:  MOVLW  00
160A:  BTFSS  3F.7
160C:  BRA    1622
160E:  INCF   03,F
1610:  ADDWFC 02,F
1612:  ADDWFC 01,F
1614:  MOVF   01,W
1616:  BNZ   1622
1618:  MOVF   02,W
161A:  BNZ   1622
161C:  MOVF   03,W
161E:  BNZ   1622
1620:  INCF   00,F
1622:  BTFSC  3E.7
1624:  BSF    01.7
1626:  BTFSS  3E.7
1628:  BCF    01.7
162A:  BRA    1634
162C:  CLRF   00
162E:  CLRF   01
1630:  CLRF   02
1632:  CLRF   03
1634:  RETURN 0
1636:  MOVLW  8E
1638:  MOVWF  00
163A:  MOVF   36,W
163C:  SUBWF  00,F
163E:  MOVFF  37,02
1642:  MOVFF  38,01
1646:  BSF    02.7
1648:  MOVF   00,F
164A:  BZ    165E
164C:  BCF    FD8.0
164E:  MOVF   02,F
1650:  BNZ   1656
1652:  MOVF   01,F
1654:  BZ    165E
1656:  RRCF   02,F
1658:  RRCF   01,F
165A:  DECFSZ 00,F
165C:  BRA    164C
165E:  BTFSS  37.7
1660:  BRA    166C
1662:  COMF   01,F
1664:  COMF   02,F
1666:  INCF   01,F
1668:  BTFSC  FD8.2
166A:  INCF   02,F
166C:  RETURN 0
*
1986:  DATA 31,3A
1988:  DATA 20,00
198A:  DATA 20,32
198C:  DATA 3A,20
198E:  DATA 00,00
1990:  DATA 45,73
1992:  DATA 74,61
1994:  DATA 20,61
1996:  DATA 20,64
1998:  DATA 69,72
199A:  DATA 65,69
199C:  DATA 74,61
199E:  DATA 00,00
19A0:  DATA 45,73
19A2:  DATA 74,61
19A4:  DATA 20,61
19A6:  DATA 20,65
19A8:  DATA 73,71
19AA:  DATA 75,65
19AC:  DATA 72,64
19AE:  DATA 61,00
19B0:  DATA 53,65
19B2:  DATA 20,70
19B4:  DATA 65,72
19B6:  DATA 64,65
19B8:  DATA 75,00
19BA:  DATA 20,49
19BC:  DATA 6E,69
19BE:  DATA 63,69
19C0:  DATA 61,6C
19C2:  DATA 69,7A
19C4:  DATA 61,6E
19C6:  DATA 64,6F
19C8:  DATA 00,00
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=48MHz,crystal=20MHz) 
*
10B4:  MOVLW  01
10B6:  SUBWF  46,F
10B8:  BNC   10D2
10BA:  CLRF   FEA
10BC:  MOVLW  46
10BE:  MOVWF  FE9
10C0:  MOVF   FEF,W
10C2:  BZ    10D2
10C4:  MOVLW  02
10C6:  MOVWF  00
10C8:  DECFSZ 00,F
10CA:  BRA    10C8
10CC:  BRA    10CE
10CE:  DECFSZ FEF,F
10D0:  BRA    10C4
10D2:  RETURN 0
*
1142:  CLRF   FEA
1144:  MOVLW  40
1146:  MOVWF  FE9
1148:  MOVF   FEF,W
114A:  BZ    1168
114C:  MOVLW  0F
114E:  MOVWF  01
1150:  CLRF   00
1152:  DECFSZ 00,F
1154:  BRA    1152
1156:  DECFSZ 01,F
1158:  BRA    1150
115A:  MOVLW  8F
115C:  MOVWF  00
115E:  DECFSZ 00,F
1160:  BRA    115E
1162:  NOP   
1164:  DECFSZ FEF,F
1166:  BRA    114C
1168:  RETURN 0
....................  
.................... // #build(reset=0x1000, interrupt=0x1008) 
.................... // #org 0x000, 0xfff { } 
....................  
.................... #include <Motor1.c> 
.................... #build(reset = 0x1000, interrupt = 0x1008) 
.................... #org 0x000, 0xfff {} 
....................  
.................... #define m1p1 pin_e2 
.................... #define m1p2 pin_c0 
.................... #define m2p1 pin_d0 
.................... #define m2p2 pin_d1 
....................  
.................... void tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void frente() 
.................... { 
....................       output_bit(m1p1, 1); 
*
1A98:  BSF    F8D.2
1A9A:  BCF    F96.2
....................       output_bit(m1p2, 0); 
1A9C:  BCF    F8B.0
1A9E:  BCF    F94.0
....................       output_bit(m2p1, 0); 
1AA0:  BCF    F8C.0
1AA2:  BCF    F95.0
....................       output_bit(m2p2, 1); 
1AA4:  BSF    F8C.1
1AA6:  BCF    F95.1
1AA8:  GOTO   1AEC (RETURN)
.................... } 
....................  
.................... void gira_esquerda() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void gira_direita() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_frente() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_frente() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void para() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void MotorInitialize() 
.................... { 
....................       setup_timer_2(T2_DIV_BY_16, 255, 1); //341 us overflow, 341 us interrupt 
*
1A78:  MOVLW  00
1A7A:  IORLW  06
1A7C:  MOVWF  FCA
1A7E:  MOVLW  FF
1A80:  MOVWF  FCB
....................  
....................       setup_ccp1(CCP_PWM | CCP_SHUTDOWN_AC_L | CCP_SHUTDOWN_BD_L); 
1A82:  BCF    F94.2
1A84:  BCF    F8B.2
1A86:  MOVLW  0C
1A88:  MOVWF  FBD
1A8A:  CLRF   FB7
1A8C:  CLRF   FB6
....................       setup_ccp2(CCP_PWM); 
1A8E:  BCF    F94.1
1A90:  BCF    F8B.1
1A92:  MOVWF  FBA
1A94:  GOTO   1AD6 (RETURN)
.................... } 
....................  
.................... void SetBothPwm(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
166E:  MOVFF  37,02
1672:  MOVFF  36,01
1676:  RRCF   02,F
1678:  RRCF   01,F
167A:  RRCF   02,F
167C:  RRCF   01,F
167E:  RRCF   02,F
1680:  MOVFF  01,FBE
1684:  RRCF   02,F
1686:  RRCF   02,W
1688:  ANDLW  30
168A:  MOVWF  00
168C:  MOVF   FBD,W
168E:  ANDLW  CF
1690:  IORWF  00,W
1692:  MOVWF  FBD
....................       set_pwm2_duty((int16)vel); //-50); 
1694:  MOVFF  37,02
1698:  MOVFF  36,01
169C:  RRCF   02,F
169E:  RRCF   01,F
16A0:  RRCF   02,F
16A2:  RRCF   01,F
16A4:  RRCF   02,F
16A6:  MOVFF  01,FBB
16AA:  RRCF   02,F
16AC:  RRCF   02,W
16AE:  ANDLW  30
16B0:  MOVWF  00
16B2:  MOVF   FBA,W
16B4:  ANDLW  CF
16B6:  IORWF  00,W
16B8:  MOVWF  FBA
16BA:  RETURN 0
.................... } 
....................  
.................... void SetRight(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
14F4:  MOVFF  39,02
14F8:  MOVFF  38,01
14FC:  RRCF   02,F
14FE:  RRCF   01,F
1500:  RRCF   02,F
1502:  RRCF   01,F
1504:  RRCF   02,F
1506:  MOVFF  01,FBE
150A:  RRCF   02,F
150C:  RRCF   02,W
150E:  ANDLW  30
1510:  MOVWF  00
1512:  MOVF   FBD,W
1514:  ANDLW  CF
1516:  IORWF  00,W
1518:  MOVWF  FBD
151A:  RETURN 0
.................... } 
.................... void SetLeft(int16 vel) 
.................... { 
....................       set_pwm2_duty((int16)vel); 
151C:  MOVFF  39,02
1520:  MOVFF  38,01
1524:  RRCF   02,F
1526:  RRCF   01,F
1528:  RRCF   02,F
152A:  RRCF   01,F
152C:  RRCF   02,F
152E:  MOVFF  01,FBB
1532:  RRCF   02,F
1534:  RRCF   02,W
1536:  ANDLW  30
1538:  MOVWF  00
153A:  MOVF   FBA,W
153C:  ANDLW  CF
153E:  IORWF  00,W
1540:  MOVWF  FBA
1542:  RETURN 0
.................... } 
....................  
.................... #include <LCD_KIT.c> 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipula��o de m�dulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: F�bio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
.................... /* 
.................... lcd_cursor_on()                        fun��es LCD 
.................... lcd_cursor_pisca() 
.................... lcd_cursor_off() 
.................... lcd_corre_esquerda() 
.................... lcd_corre_direita() 
.................... lcd_envia_nibble( byte dado ) 
.................... lcd_le_byte() 
.................... lcd_ini() 
.................... lcd_pos_xy( byte x, byte y) 
.................... lcd_escreve( char c)                  \f  Clear display                            //// 
....................                                             \n  Go to start of second line               //// 
....................                                   \b  Move back one position                   //// 
....................  
.................... lcd_le( byte x, byte y) 
.................... lcd_apaga() 
.................... { 
....................  
.................... */ 
.................... // As defini��es a seguir s�o utilizadas para acesso aos pinos do display 
.................... // caso o pino RW n�o seja utilizado, comente a defini��o lcd_rw 
.................... #ifndef lcd_enable 
....................    #define lcd_rs         pin_d2      // pino rs do LCD 
....................    #define lcd_enable     pin_d3      // pino enable do LCD 
....................    #define lcd_d4         pin_d4      // pino de dados d4 do LCD 
....................    #define lcd_d5         pin_d5      // pino de dados d5 do LCD 
....................    #define lcd_d6         pin_d6      // pino de dados d6 do LCD 
....................    #define lcd_d7         pin_d7   // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endere�o da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seq��ncia de inicializa��o do m�dulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................  
.................... /*   O 0x20 eh p configurar o tipo do display e talz. 
....................    O Segundo numero configura o modo do cursor, sendo: 
....................                -> 0xf Cursor piscante 
....................                -> 0xe Cursor comum 
....................                -> 0xc Sem cursor 
....................    O terceiro (1) limpa o display 
....................    O Quarto volta com o cursor. 
.................... */ 
....................  
.................... byte lcd_le_byte() 
.................... // l� um byte do LCD (somente com pino RW) 
.................... { 
....................    byte dado; 
....................    // configura os pinos de dados como entradas 
....................    input(lcd_d4); 
....................    input(lcd_d5); 
....................    input(lcd_d6); 
....................    input(lcd_d7); 
....................    // se o pino rw for utilizado, coloca em 1 
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_high(lcd_enable); // habilita display 
....................    dado = 0;   // zera a vari�vel de leitura 
....................    // l� os quatro bits mais significativos 
....................    if (input(lcd_d7)) bit_set(dado,7); 
....................    if (input(lcd_d6)) bit_set(dado,6); 
....................    if (input(lcd_d5)) bit_set(dado,5); 
....................    if (input(lcd_d4)) bit_set(dado,4); 
....................    // d� um pulso na linha enable 
....................    output_low(lcd_enable); 
....................    output_high(lcd_enable); 
....................    // l� os quatro bits menos significativos 
....................    if (input(lcd_d7)) bit_set(dado,3); 
....................    if (input(lcd_d6)) bit_set(dado,2); 
....................    if (input(lcd_d5)) bit_set(dado,1); 
....................    if (input(lcd_d4)) bit_set(dado,0); 
....................    output_low(lcd_enable);   // desabilita o display 
....................    return dado;   // retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
....................    // coloca os quatro bits nas saidas 
....................    output_bit(lcd_d4,bit_test(dado,0)); 
*
10D4:  BTFSC  47.0
10D6:  BRA    10DC
10D8:  BCF    F8C.4
10DA:  BRA    10DE
10DC:  BSF    F8C.4
10DE:  BCF    F95.4
....................    output_bit(lcd_d5,bit_test(dado,1)); 
10E0:  BTFSC  47.1
10E2:  BRA    10E8
10E4:  BCF    F8C.5
10E6:  BRA    10EA
10E8:  BSF    F8C.5
10EA:  BCF    F95.5
....................    output_bit(lcd_d6,bit_test(dado,2)); 
10EC:  BTFSC  47.2
10EE:  BRA    10F4
10F0:  BCF    F8C.6
10F2:  BRA    10F6
10F4:  BSF    F8C.6
10F6:  BCF    F95.6
....................    output_bit(lcd_d7,bit_test(dado,3)); 
10F8:  BTFSC  47.3
10FA:  BRA    1100
10FC:  BCF    F8C.7
10FE:  BRA    1102
1100:  BSF    F8C.7
1102:  BCF    F95.7
....................    // d� um pulso na linha enable 
....................    output_high(lcd_enable); 
1104:  BCF    F95.3
1106:  BSF    F8C.3
....................    output_low(lcd_enable); 
1108:  BCF    F95.3
110A:  BCF    F8C.3
110C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
....................    // coloca a linha rs em 0 
....................    output_low(lcd_rs); 
110E:  BCF    F95.2
1110:  BCF    F8C.2
....................    // aguarda o display ficar desocupado 
....................    //while ( bit_test(lcd_le_byte(),7) ) ; 
....................    // configura a linha rs dependendo do modo selecionado 
....................    output_bit(lcd_rs,endereco); 
1112:  MOVF   44,F
1114:  BNZ   111A
1116:  BCF    F8C.2
1118:  BRA    111C
111A:  BSF    F8C.2
111C:  BCF    F95.2
....................    delay_us(100);   // aguarda 100 us 
111E:  MOVLW  64
1120:  MOVWF  46
1122:  RCALL  10B4
....................    // caso a linha rw esteja definida, coloca em 0 
....................    #ifdef lcd_rw 
....................       output_low(lcd_rw); 
....................    #endif 
....................    // desativa linha enable 
....................    output_low(lcd_enable); 
1124:  BCF    F95.3
1126:  BCF    F8C.3
....................    // envia a primeira parte do byte 
....................    lcd_envia_nibble(dado >> 4); 
1128:  SWAPF  45,W
112A:  MOVWF  46
112C:  MOVLW  0F
112E:  ANDWF  46,F
1130:  MOVFF  46,47
1134:  RCALL  10D4
....................    // envia a segunda parte do byte 
....................    lcd_envia_nibble(dado & 0x0f); 
1136:  MOVF   45,W
1138:  ANDLW  0F
113A:  MOVWF  46
113C:  MOVWF  47
113E:  RCALL  10D4
1140:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicializa��o do display 
.................... { 
....................    byte conta; 
....................    output_low(lcd_d4); 
*
19CA:  BCF    F95.4
19CC:  BCF    F8C.4
....................    output_low(lcd_d5); 
19CE:  BCF    F95.5
19D0:  BCF    F8C.5
....................    output_low(lcd_d6); 
19D2:  BCF    F95.6
19D4:  BCF    F8C.6
....................    output_low(lcd_d7); 
19D6:  BCF    F95.7
19D8:  BCF    F8C.7
....................    output_low(lcd_rs); 
19DA:  BCF    F95.2
19DC:  BCF    F8C.2
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_low(lcd_enable); 
19DE:  BCF    F95.3
19E0:  BCF    F8C.3
19E2:  CLRF   16
19E4:  BTFSC  FF2.7
19E6:  BSF    16.7
19E8:  BCF    FF2.7
....................    delay_ms(15); 
19EA:  MOVLW  0F
19EC:  MOVWF  40
19EE:  CALL   1142
19F2:  BTFSC  16.7
19F4:  BSF    FF2.7
....................    // envia uma seq��ncia de 3 vezes 0x03 
....................    // e depois 0x02 para configurar o m�dulo 
....................    // para modo de 4 bits 
....................    for(conta=1;conta<=3;++conta) 
19F6:  MOVLW  01
19F8:  MOVWF  23
19FA:  MOVF   23,W
19FC:  SUBLW  03
19FE:  BNC   1A2C
1A00:  CLRF   16
1A02:  BTFSC  FF2.7
1A04:  BSF    16.7
1A06:  BCF    FF2.7
....................    { 
....................       lcd_envia_nibble(3); 
1A08:  MOVLW  03
1A0A:  MOVWF  47
1A0C:  CALL   10D4
1A10:  BTFSC  16.7
1A12:  BSF    FF2.7
1A14:  CLRF   16
1A16:  BTFSC  FF2.7
1A18:  BSF    16.7
1A1A:  BCF    FF2.7
....................       delay_ms(5); 
1A1C:  MOVLW  05
1A1E:  MOVWF  40
1A20:  CALL   1142
1A24:  BTFSC  16.7
1A26:  BSF    FF2.7
1A28:  INCF   23,F
1A2A:  BRA    19FA
1A2C:  CLRF   16
1A2E:  BTFSC  FF2.7
1A30:  BSF    16.7
1A32:  BCF    FF2.7
....................    } 
....................    lcd_envia_nibble(2); 
1A34:  MOVLW  02
1A36:  MOVWF  47
1A38:  CALL   10D4
1A3C:  BTFSC  16.7
1A3E:  BSF    FF2.7
....................    // envia string de inicializa��o do display 
....................    for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
1A40:  CLRF   23
1A42:  MOVF   23,W
1A44:  SUBLW  03
1A46:  BNC   1A74
1A48:  CLRF   03
1A4A:  MOVF   23,W
1A4C:  MOVFF  FF2,24
1A50:  BCF    FF2.7
1A52:  CALL   1096
1A56:  BTFSC  24.7
1A58:  BSF    FF2.7
1A5A:  MOVWF  24
1A5C:  CLRF   16
1A5E:  BTFSC  FF2.7
1A60:  BSF    16.7
1A62:  BCF    FF2.7
1A64:  CLRF   44
1A66:  MOVWF  45
1A68:  CALL   110E
1A6C:  BTFSC  16.7
1A6E:  BSF    FF2.7
1A70:  INCF   23,F
1A72:  BRA    1A42
1A74:  GOTO   1AD4 (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
116A:  DECFSZ 41,W
116C:  BRA    1170
116E:  BRA    1176
....................       endereco = lcd_seg_lin; 
1170:  MOVLW  40
1172:  MOVWF  42
1174:  BRA    1178
....................    else 
....................       endereco = 0; 
1176:  CLRF   42
....................    endereco += x-1; 
1178:  MOVLW  01
117A:  SUBWF  40,W
117C:  ADDWF  42,F
....................    lcd_envia_byte(0,0x80|endereco); 
117E:  MOVF   42,W
1180:  IORLW  80
1182:  MOVWF  43
1184:  CLRF   44
1186:  MOVWF  45
1188:  RCALL  110E
118A:  RETURN 0
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
118C:  MOVF   3F,W
118E:  XORLW  0C
1190:  BZ    11A0
1192:  XORLW  06
1194:  BZ    11B0
1196:  XORLW  07
1198:  BZ    11B0
119A:  XORLW  05
119C:  BZ    11BC
119E:  BRA    11C6
....................    { 
....................      case '\f'    :   lcd_envia_byte(0,1); 
11A0:  CLRF   44
11A2:  MOVLW  01
11A4:  MOVWF  45
11A6:  RCALL  110E
....................               delay_ms(2); 
11A8:  MOVLW  02
11AA:  MOVWF  40
11AC:  RCALL  1142
....................             break; 
11AE:  BRA    11D0
....................      case '\n'   : 
....................      case '\r'    :   lcd_pos_xy(1,2); 
11B0:  MOVLW  01
11B2:  MOVWF  40
11B4:  MOVLW  02
11B6:  MOVWF  41
11B8:  RCALL  116A
....................               break; 
11BA:  BRA    11D0
....................      case '\b'    :   lcd_envia_byte(0,0x10); 
11BC:  CLRF   44
11BE:  MOVLW  10
11C0:  MOVWF  45
11C2:  RCALL  110E
....................               break; 
11C4:  BRA    11D0
....................      default   :   lcd_envia_byte(1,c); 
11C6:  MOVLW  01
11C8:  MOVWF  44
11CA:  MOVFF  3F,45
11CE:  RCALL  110E
....................               break; 
....................    } 
11D0:  RETURN 0
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
....................    char valor; 
....................    // seleciona a posi��o do caractere 
....................    lcd_pos_xy(x,y); 
....................    // ativa rs 
....................    output_high(lcd_rs); 
....................    // l� o caractere 
....................    valor = lcd_le_byte(); 
....................    // desativa rs 
....................    output_low(lcd_rs); 
....................    // retorna o valor do caractere 
....................    return valor; 
.................... } 
....................  
.................... void lcd_apaga() 
.................... { 
....................    lcd_envia_byte(0,1); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_cursor_on() 
....................     { 
.................... lcd_envia_byte(0,0x0E); 
....................     } 
....................  
.................... void lcd_cursor_pisca() 
....................     { 
.................... lcd_envia_byte(0,0x0F); 
....................     } 
....................  
.................... void lcd_cursor_off() 
....................     { 
....................  lcd_envia_byte(0,0x0C); 
....................     } 
....................  
.................... void lcd_corre_esquerda() 
....................     { 
....................  lcd_envia_byte(0,0x18); 
....................     } 
....................  
.................... void lcd_corre_direita() 
....................     { 
.................... lcd_envia_byte(0,0x1C); 
....................     } 
....................  
....................  
....................  
.................... #define button1 pin_a4 
.................... #define button2 pin_a5 
.................... #define button3 pin_e0 
.................... #define button4 pin_e1 
....................  
.................... int running; 
....................  
.................... int16 ad1, ad2, ad3, ad4; 
.................... int16 timerBase; 
.................... int8 adCounter; 
....................  
.................... void ClearScreen(); 
.................... void Setup(); 
....................  
.................... #int_timer0 
.................... void timerTick() 
.................... { 
....................     if (adCounter == 1) 
*
16BC:  DECFSZ 22,W
16BE:  BRA    16D0
....................     { 
....................         ad1 = read_adc(); 
16C0:  BSF    FC2.1
16C2:  BTFSC  FC2.1
16C4:  BRA    16C2
16C6:  MOVFF  FC3,18
16CA:  MOVFF  FC4,19
....................     } 
16CE:  BRA    170C
....................     else if (adCounter == 2) 
16D0:  MOVF   22,W
16D2:  SUBLW  02
16D4:  BNZ   16E6
....................     { 
....................         ad2 = read_adc(); 
16D6:  BSF    FC2.1
16D8:  BTFSC  FC2.1
16DA:  BRA    16D8
16DC:  MOVFF  FC3,1A
16E0:  MOVFF  FC4,1B
....................     } 
16E4:  BRA    170C
....................     else if (adCounter == 3) 
16E6:  MOVF   22,W
16E8:  SUBLW  03
16EA:  BNZ   16FC
....................     { 
....................         ad3 = read_adc(); 
16EC:  BSF    FC2.1
16EE:  BTFSC  FC2.1
16F0:  BRA    16EE
16F2:  MOVFF  FC3,1C
16F6:  MOVFF  FC4,1D
....................     } 
16FA:  BRA    170C
....................     else 
....................     { 
....................         adCounter = 0; 
16FC:  CLRF   22
....................         ad4 = read_adc(); 
16FE:  BSF    FC2.1
1700:  BTFSC  FC2.1
1702:  BRA    1700
1704:  MOVFF  FC3,1E
1708:  MOVFF  FC4,1F
....................     } 
....................     if (timerBase == 2000) 
170C:  MOVF   20,W
170E:  SUBLW  D0
1710:  BNZ   174E
1712:  MOVF   21,W
1714:  SUBLW  07
1716:  BNZ   174E
....................     { 
....................         timerBase = 0; 
1718:  CLRF   21
171A:  CLRF   20
....................         ClearScreen(); 
171C:  BRA    11D2
....................         printf(lcd_escreve, "1: "); 
171E:  MOVLW  86
1720:  MOVWF  FF6
1722:  MOVLW  19
1724:  MOVWF  FF7
1726:  RCALL  11DC
....................         printf(lcd_escreve, "%04ld", ad1); 
1728:  MOVLW  0A
172A:  MOVWF  FE9
172C:  MOVFF  19,37
1730:  MOVFF  18,36
1734:  RCALL  11FC
....................         printf(lcd_escreve, " 2: "); 
1736:  MOVLW  8A
1738:  MOVWF  FF6
173A:  MOVLW  19
173C:  MOVWF  FF7
173E:  RCALL  11DC
....................         printf(lcd_escreve, "%04ld", ad2); 
1740:  MOVLW  0A
1742:  MOVWF  FE9
1744:  MOVFF  1B,37
1748:  MOVFF  1A,36
174C:  RCALL  11FC
....................         // lcd_pos_xy(1, 2); 
....................         // printf(lcd_escreve, "3: "); 
....................         // printf(lcd_escreve, "%04ld", ad3); 
....................         // printf(lcd_escreve, " 4: "); 
....................         // printf(lcd_escreve, "%04ld", ad4); 
....................     } 
....................     timerBase++; 
174E:  INCF   20,F
1750:  BTFSC  FD8.2
1752:  INCF   21,F
....................     adCounter++; 
1754:  INCF   22,F
....................  
....................     set_adc_channel(adCounter); 
1756:  RLCF   22,W
1758:  MOVWF  00
175A:  RLCF   00,F
175C:  MOVLW  FC
175E:  ANDWF  00,F
1760:  MOVF   FC2,W
1762:  ANDLW  C3
1764:  IORWF  00,W
1766:  MOVWF  FC2
.................... #ifdef DEBUG 
....................     SetLeft(0); 
....................     SetRight(1023); 
.................... #else 
....................     if (running == 1) 
1768:  DECFSZ 17,W
176A:  BRA    197A
....................     { 
....................         float ad1Ratio = (float)ad1 / (float)(ad1 + ad2); 
....................         float ad2Ratio = (float)ad2 / (float)(ad1 + ad2); 
176C:  MOVFF  19,3B
1770:  MOVFF  18,3A
1774:  RCALL  12EE
1776:  MOVFF  03,39
177A:  MOVFF  02,38
177E:  MOVFF  01,37
1782:  MOVFF  00,36
1786:  MOVF   1A,W
1788:  ADDWF  18,W
178A:  MOVWF  01
178C:  MOVF   1B,W
178E:  ADDWFC 19,W
1790:  MOVWF  03
1792:  MOVFF  01,3A
1796:  MOVWF  3B
1798:  RCALL  12EE
179A:  MOVFF  39,3D
179E:  MOVFF  38,3C
17A2:  MOVFF  37,3B
17A6:  MOVFF  36,3A
17AA:  MOVFF  03,41
17AE:  MOVFF  02,40
17B2:  MOVFF  01,3F
17B6:  MOVFF  00,3E
17BA:  RCALL  1324
17BC:  MOVFF  03,31
17C0:  MOVFF  02,30
17C4:  MOVFF  01,2F
17C8:  MOVFF  00,2E
17CC:  MOVFF  1B,3B
17D0:  MOVFF  1A,3A
17D4:  RCALL  12EE
17D6:  MOVFF  03,39
17DA:  MOVFF  02,38
17DE:  MOVFF  01,37
17E2:  MOVFF  00,36
17E6:  MOVF   1A,W
17E8:  ADDWF  18,W
17EA:  MOVWF  01
17EC:  MOVF   1B,W
17EE:  ADDWFC 19,W
17F0:  MOVWF  03
17F2:  MOVFF  01,3A
17F6:  MOVWF  3B
17F8:  RCALL  12EE
17FA:  MOVFF  39,3D
17FE:  MOVFF  38,3C
1802:  MOVFF  37,3B
1806:  MOVFF  36,3A
180A:  MOVFF  03,41
180E:  MOVFF  02,40
1812:  MOVFF  01,3F
1816:  MOVFF  00,3E
181A:  RCALL  1324
181C:  MOVFF  03,35
1820:  MOVFF  02,34
1824:  MOVFF  01,33
1828:  MOVFF  00,32
....................  
....................         ///alto significa escuro 
....................         if (ad1 + ad2 > 300) 
182C:  MOVF   1A,W
182E:  ADDWF  18,W
1830:  MOVWF  36
1832:  MOVF   1B,W
1834:  ADDWFC 19,W
1836:  MOVWF  37
1838:  SUBLW  00
183A:  BTFSC  FD8.0
183C:  BRA    1962
183E:  XORLW  FF
1840:  BNZ   184A
1842:  MOVF   36,W
1844:  SUBLW  2C
1846:  BTFSC  FD8.0
1848:  BRA    1962
....................         { 
....................             //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................             //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................  
....................             lcd_pos_xy(1, 2); 
184A:  MOVLW  01
184C:  MOVWF  40
184E:  MOVLW  02
1850:  MOVWF  41
1852:  RCALL  116A
....................  
....................             //O ad1 é o da direita, se este esta maior, significa que o robo esta a direit 
....................             if (ad1Ratio > 0.7f) 
1854:  MOVLW  33
1856:  MOVWF  39
1858:  MOVWF  38
185A:  MOVWF  37
185C:  MOVLW  7E
185E:  MOVWF  36
1860:  MOVFF  31,3D
1864:  MOVFF  30,3C
1868:  MOVFF  2F,3B
186C:  MOVFF  2E,3A
1870:  RCALL  147E
1872:  BNC   1890
....................             { 
....................                 printf(lcd_escreve, "Esta a direita"); 
1874:  MOVLW  90
1876:  MOVWF  FF6
1878:  MOVLW  19
187A:  MOVWF  FF7
187C:  RCALL  11DC
....................                 SetRight(950); 
187E:  MOVLW  03
1880:  MOVWF  39
1882:  MOVLW  B6
1884:  MOVWF  38
1886:  RCALL  14F4
....................                 SetLeft(0); 
1888:  CLRF   39
188A:  CLRF   38
188C:  RCALL  151C
....................             } 
188E:  BRA    1960
....................             else if (ad2Ratio > 0.7f) 
1890:  MOVLW  33
1892:  MOVWF  39
1894:  MOVWF  38
1896:  MOVWF  37
1898:  MOVLW  7E
189A:  MOVWF  36
189C:  MOVFF  35,3D
18A0:  MOVFF  34,3C
18A4:  MOVFF  33,3B
18A8:  MOVFF  32,3A
18AC:  RCALL  147E
18AE:  BNC   18CC
....................             { 
....................                 printf(lcd_escreve, "Esta a esquerda"); 
18B0:  MOVLW  A0
18B2:  MOVWF  FF6
18B4:  MOVLW  19
18B6:  MOVWF  FF7
18B8:  RCALL  11DC
....................                 SetRight(0); 
18BA:  CLRF   39
18BC:  CLRF   38
18BE:  RCALL  14F4
....................                 SetLeft(950); 
18C0:  MOVLW  03
18C2:  MOVWF  39
18C4:  MOVLW  B6
18C6:  MOVWF  38
18C8:  RCALL  151C
....................             } 
18CA:  BRA    1960
....................             else 
....................             { 
....................                 SetLeft((long)(ad1Ratio * 100) + 850); 
18CC:  MOVFF  31,39
18D0:  MOVFF  30,38
18D4:  MOVFF  2F,37
18D8:  MOVFF  2E,36
18DC:  CLRF   3D
18DE:  CLRF   3C
18E0:  MOVLW  48
18E2:  MOVWF  3B
18E4:  MOVLW  85
18E6:  MOVWF  3A
18E8:  RCALL  1544
18EA:  MOVFF  03,39
18EE:  MOVFF  02,38
18F2:  MOVFF  01,37
18F6:  MOVFF  00,36
18FA:  RCALL  1636
18FC:  MOVFF  02,37
1900:  MOVFF  01,36
1904:  MOVLW  52
1906:  ADDWF  36,F
1908:  MOVLW  03
190A:  ADDWFC 37,F
190C:  MOVFF  37,39
1910:  MOVFF  36,38
1914:  RCALL  151C
....................                 SetRight((long)(ad2Ratio * 100) + 850); 
1916:  MOVFF  35,39
191A:  MOVFF  34,38
191E:  MOVFF  33,37
1922:  MOVFF  32,36
1926:  CLRF   3D
1928:  CLRF   3C
192A:  MOVLW  48
192C:  MOVWF  3B
192E:  MOVLW  85
1930:  MOVWF  3A
1932:  RCALL  1544
1934:  MOVFF  03,39
1938:  MOVFF  02,38
193C:  MOVFF  01,37
1940:  MOVFF  00,36
1944:  RCALL  1636
1946:  MOVFF  02,37
194A:  MOVFF  01,36
194E:  MOVLW  52
1950:  ADDWF  36,F
1952:  MOVLW  03
1954:  ADDWFC 37,F
1956:  MOVFF  37,39
195A:  MOVFF  36,38
195E:  RCALL  14F4
....................             } 
....................         } 
1960:  BRA    1978
....................         else 
....................         { 
....................             ///Esta fora da pista, deve fazer algo 
....................             //SetBothPwm(0); 
....................             lcd_pos_xy(1, 2); 
1962:  MOVLW  01
1964:  MOVWF  40
1966:  MOVLW  02
1968:  MOVWF  41
196A:  CALL   116A
....................  
....................             printf(lcd_escreve, "Se perdeu"); 
196E:  MOVLW  B0
1970:  MOVWF  FF6
1972:  MOVLW  19
1974:  MOVWF  FF7
1976:  RCALL  11DC
....................              
....................         } 
....................     } 
1978:  BRA    1980
....................  
....................     else 
....................     { 
....................         SetBothPwm(0); 
197A:  CLRF   37
197C:  CLRF   36
197E:  RCALL  166E
....................     } 
.................... #endif 
1980:  BCF    FF2.2
1982:  GOTO   1054
.................... } 
....................  
.................... void main() 
*
1AF0:  CLRF   FF8
1AF2:  BCF    FD0.7
1AF4:  BSF    07.7
1AF6:  MOVF   FC1,W
1AF8:  ANDLW  C0
1AFA:  IORLW  0F
1AFC:  MOVWF  FC1
1AFE:  MOVLW  07
1B00:  MOVWF  FB4
.................... { 
....................     Setup(); 
1B02:  BRA    1AAC
1B04:  CLRF   16
1B06:  BTFSC  FF2.7
1B08:  BSF    16.7
1B0A:  BCF    FF2.7
....................     lcd_pos_xy(1, 1); 
1B0C:  MOVLW  01
1B0E:  MOVWF  40
1B10:  MOVWF  41
1B12:  CALL   116A
1B16:  BTFSC  16.7
1B18:  BSF    FF2.7
1B1A:  CLRF   16
1B1C:  BTFSC  FF2.7
1B1E:  BSF    16.7
1B20:  BCF    FF2.7
....................     delay_ms(5); 
1B22:  MOVLW  05
1B24:  MOVWF  40
1B26:  CALL   1142
1B2A:  BTFSC  16.7
1B2C:  BSF    FF2.7
....................     printf(lcd_escreve, " Inicializando"); 
1B2E:  MOVLW  BA
1B30:  MOVWF  FF6
1B32:  MOVLW  19
1B34:  MOVWF  FF7
1B36:  CLRF   16
1B38:  BTFSC  FF2.7
1B3A:  BSF    16.7
1B3C:  BCF    FF2.7
1B3E:  CALL   11DC
1B42:  BTFSC  16.7
1B44:  BSF    FF2.7
....................     delay_ms(1000); 
1B46:  MOVLW  04
1B48:  MOVWF  23
1B4A:  CLRF   16
1B4C:  BTFSC  FF2.7
1B4E:  BSF    16.7
1B50:  BCF    FF2.7
1B52:  MOVLW  FA
1B54:  MOVWF  40
1B56:  CALL   1142
1B5A:  BTFSC  16.7
1B5C:  BSF    FF2.7
1B5E:  DECFSZ 23,F
1B60:  BRA    1B4A
....................     do 
....................     { 
....................         if (input(button1) == 0) 
1B62:  BSF    F92.4
1B64:  BTFSC  F80.4
1B66:  BRA    1B6C
....................         { 
....................             running = 1; 
1B68:  MOVLW  01
1B6A:  MOVWF  17
....................         } 
....................         if (input(button2) == 0) 
1B6C:  BSF    F92.5
1B6E:  BTFSC  F80.5
1B70:  BRA    1B74
....................         { 
....................             running = 0; 
1B72:  CLRF   17
....................         } 
....................     } while (1); 
1B74:  BRA    1B62
.................... } 
....................  
1B76:  SLEEP 
.................... void Setup() 
.................... { 
....................     adCounter = 1; 
*
1AAC:  MOVLW  01
1AAE:  MOVWF  22
....................     running = 0; 
1AB0:  CLRF   17
....................  
....................     setup_adc_ports(AN0_TO_AN3); 
1AB2:  MOVF   FC1,W
1AB4:  ANDLW  C0
1AB6:  IORLW  0B
1AB8:  MOVWF  FC1
....................     setup_adc(ADC_CLOCK_DIV_4); 
1ABA:  MOVF   FC0,W
1ABC:  ANDLW  C0
1ABE:  IORLW  04
1AC0:  MOVWF  FC0
1AC2:  BSF    FC0.7
1AC4:  BSF    FC2.0
....................  
....................     setup_timer_0(RTCC_INTERNAL | RTCC_DIV_2 | RTCC_8_BIT); 
1AC6:  MOVLW  C0
1AC8:  MOVWF  FD5
....................     set_timer0(0); 
1ACA:  CLRF   FD7
1ACC:  CLRF   FD6
....................     enable_interrupts(INT_TIMER0); 
1ACE:  BSF    FF2.5
....................     enable_interrupts(GLOBAL); 
1AD0:  IORWF  FF2,F
....................  
....................     lcd_ini(); 
1AD2:  BRA    19CA
....................     MotorInitialize(); 
1AD4:  BRA    1A78
1AD6:  CLRF   16
1AD8:  BTFSC  FF2.7
1ADA:  BSF    16.7
1ADC:  BCF    FF2.7
....................     SetBothPwm(1023); 
1ADE:  MOVLW  03
1AE0:  MOVWF  37
1AE2:  SETF   36
1AE4:  RCALL  166E
1AE6:  BTFSC  16.7
1AE8:  BSF    FF2.7
....................     frente(); 
1AEA:  BRA    1A98
1AEC:  GOTO   1B04 (RETURN)
.................... } 
....................  
.................... void ClearScreen() 
.................... { 
....................     lcd_escreve('\f'); 
*
11D2:  MOVLW  0C
11D4:  MOVWF  3F
11D6:  RCALL  118C
11D8:  GOTO   171E (RETURN)
.................... } 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
