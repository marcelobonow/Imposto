CCS PCH C Compiler, Version 5.015, 5967               26-ago-18 16:20

               Filename:   D:\Projetos\Imposto\Source Code\main.lst

               ROM used:   4022 bytes (12%)
                           Largest free fragment is 24646
               RAM used:   36 (2%) at main() level
                           66 (3%) worst case
               Stack used: 11 locations (5 in main + 6 for interrupts)
               Stack size: 31

*
1000:  GOTO   1F46
*
1008:  MOVWF  04
100A:  MOVFF  FD8,05
100E:  MOVFF  FE0,06
1012:  MOVLB  0
1014:  MOVFF  FE9,0C
1018:  MOVFF  FEA,07
101C:  MOVFF  FE1,08
1020:  MOVFF  FE2,09
1024:  MOVFF  FD9,0A
1028:  MOVFF  FDA,0B
102C:  MOVFF  FF3,12
1030:  MOVFF  FF4,13
1034:  MOVFF  FFA,14
1038:  MOVFF  00,0E
103C:  MOVFF  01,0F
1040:  MOVFF  02,10
1044:  MOVFF  03,11
1048:  BTFSS  FF2.5
104A:  GOTO   1054
104E:  BTFSC  FF2.2
1050:  GOTO   1926
1054:  MOVFF  0E,00
1058:  MOVFF  0F,01
105C:  MOVFF  10,02
1060:  MOVFF  11,03
1064:  MOVFF  0C,FE9
1068:  MOVFF  07,FEA
106C:  BSF    07.7
106E:  MOVFF  08,FE1
1072:  MOVFF  09,FE2
1076:  MOVFF  0A,FD9
107A:  MOVFF  0B,FDA
107E:  MOVFF  12,FF3
1082:  MOVFF  13,FF4
1086:  MOVFF  14,FFA
108A:  MOVF   04,W
108C:  MOVFF  06,FE0
1090:  MOVFF  05,FD8
1094:  RETFIE 0
.................... #include <main.h> 
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
1096:  MOVFF  FF2,0D
109A:  BCF    FF2.7
109C:  CLRF   FF7
109E:  ADDLW  B0
10A0:  MOVWF  FF6
10A2:  MOVLW  10
10A4:  ADDWFC FF7,F
10A6:  TBLRD*+
10A8:  MOVF   FF5,W
10AA:  BTFSC  0D.7
10AC:  BSF    FF2.7
10AE:  RETURN 0
10B0:  DATA 28,0C
10B2:  DATA 01,06
*
11DC:  TBLRD*+
11DE:  MOVF   FF5,F
11E0:  BZ    11FA
11E2:  MOVFF  FF6,2E
11E6:  MOVFF  FF7,2F
11EA:  MOVFF  FF5,37
11EE:  RCALL  118C
11F0:  MOVFF  2E,FF6
11F4:  MOVFF  2F,FF7
11F8:  BRA    11DC
11FA:  RETURN 0
11FC:  MOVFF  FEA,36
1200:  MOVFF  FE9,35
1204:  BTFSS  2F.7
1206:  BRA    1218
1208:  BSF    35.7
120A:  BTFSS  35.4
120C:  INCF   35,F
120E:  COMF   2E,F
1210:  COMF   2F,F
1212:  INCF   2E,F
1214:  BTFSC  FD8.2
1216:  INCF   2F,F
1218:  SWAPF  2F,W
121A:  IORLW  F0
121C:  MOVWF  31
121E:  ADDWF  31,F
1220:  ADDLW  E2
1222:  MOVWF  32
1224:  ADDLW  32
1226:  MOVWF  34
1228:  MOVF   2F,W
122A:  ANDLW  0F
122C:  ADDWF  32,F
122E:  ADDWF  32,F
1230:  ADDWF  34,F
1232:  ADDLW  E9
1234:  MOVWF  33
1236:  ADDWF  33,F
1238:  ADDWF  33,F
123A:  SWAPF  2E,W
123C:  ANDLW  0F
123E:  ADDWF  33,F
1240:  ADDWF  34,F
1242:  RLCF   33,F
1244:  RLCF   34,F
1246:  COMF   34,F
1248:  RLCF   34,F
124A:  MOVF   2E,W
124C:  ANDLW  0F
124E:  ADDWF  34,F
1250:  RLCF   31,F
1252:  MOVLW  07
1254:  MOVWF  30
1256:  MOVLW  0A
1258:  DECF   33,F
125A:  ADDWF  34,F
125C:  BNC   1258
125E:  DECF   32,F
1260:  ADDWF  33,F
1262:  BNC   125E
1264:  DECF   31,F
1266:  ADDWF  32,F
1268:  BNC   1264
126A:  DECF   30,F
126C:  ADDWF  31,F
126E:  BNC   126A
1270:  CLRF   FEA
1272:  MOVLW  30
1274:  MOVWF  FE9
1276:  MOVLW  07
1278:  ANDWF  35,W
127A:  BCF    35.6
127C:  MOVF   FED,F
127E:  ANDWF  35,W
1280:  BNZ   1290
1282:  BTFSC  35.4
1284:  MOVF   FEE,F
1286:  BTFSC  35.4
1288:  BRA    1290
128A:  MOVLW  20
128C:  MOVWF  00
128E:  BRA    12D0
1290:  ADDWF  FE9,F
1292:  MOVLW  00
1294:  ADDWFC FEA,F
1296:  MOVF   FE9,W
1298:  SUBLW  34
129A:  BNZ   12A2
129C:  MOVF   FEA,F
129E:  BNZ   12A2
12A0:  BSF    35.6
12A2:  MOVF   FEF,W
12A4:  MOVWF  00
12A6:  BNZ   12B8
12A8:  BTFSC  35.6
12AA:  BRA    12B8
12AC:  BTFSC  35.4
12AE:  BRA    12E6
12B0:  BTFSC  35.3
12B2:  BRA    12B8
12B4:  MOVLW  20
12B6:  BRA    12CE
12B8:  BTFSS  35.7
12BA:  BRA    12C8
12BC:  MOVLW  2D
12BE:  MOVWF  00
12C0:  MOVF   FED,W
12C2:  BCF    35.6
12C4:  BCF    35.7
12C6:  BRA    12D0
12C8:  BSF    35.3
12CA:  BCF    35.4
12CC:  MOVLW  30
12CE:  ADDWF  00,F
12D0:  MOVFF  FEA,2F
12D4:  MOVFF  FE9,2E
12D8:  MOVFF  00,37
12DC:  RCALL  118C
12DE:  MOVFF  2F,FEA
12E2:  MOVFF  2E,FE9
12E6:  MOVF   FEE,W
12E8:  BTFSS  35.6
12EA:  BRA    1296
12EC:  RETURN 0
12EE:  MOVLW  8E
12F0:  MOVWF  00
12F2:  MOVFF  33,01
12F6:  MOVFF  32,02
12FA:  CLRF   03
12FC:  MOVF   01,F
12FE:  BNZ   1312
1300:  MOVFF  02,01
1304:  CLRF   02
1306:  MOVLW  08
1308:  SUBWF  00,F
130A:  MOVF   01,F
130C:  BNZ   1312
130E:  CLRF   00
1310:  BRA    1322
1312:  BCF    FD8.0
1314:  BTFSC  01.7
1316:  BRA    1320
1318:  RLCF   02,F
131A:  RLCF   01,F
131C:  DECF   00,F
131E:  BRA    1312
1320:  BCF    01.7
1322:  RETURN 0
1324:  MOVF   32,W
1326:  BTFSC  FD8.2
1328:  BRA    1474
132A:  MOVWF  3E
132C:  MOVF   36,W
132E:  BTFSC  FD8.2
1330:  BRA    1474
1332:  SUBWF  3E,F
1334:  BNC   1340
1336:  MOVLW  7F
1338:  ADDWF  3E,F
133A:  BTFSC  FD8.0
133C:  BRA    1474
133E:  BRA    134C
1340:  MOVLW  81
1342:  SUBWF  3E,F
1344:  BTFSS  FD8.0
1346:  BRA    1474
1348:  BTFSC  FD8.2
134A:  BRA    1474
134C:  MOVFF  3E,00
1350:  CLRF   01
1352:  CLRF   02
1354:  CLRF   03
1356:  CLRF   3D
1358:  MOVFF  33,3C
135C:  BSF    3C.7
135E:  MOVFF  34,3B
1362:  MOVFF  35,3A
1366:  MOVLW  19
1368:  MOVWF  3E
136A:  MOVF   39,W
136C:  SUBWF  3A,F
136E:  BC    138A
1370:  MOVLW  01
1372:  SUBWF  3B,F
1374:  BC    138A
1376:  SUBWF  3C,F
1378:  BC    138A
137A:  SUBWF  3D,F
137C:  BC    138A
137E:  INCF   3D,F
1380:  INCF   3C,F
1382:  INCF   3B,F
1384:  MOVF   39,W
1386:  ADDWF  3A,F
1388:  BRA    13DA
138A:  MOVF   38,W
138C:  SUBWF  3B,F
138E:  BC    13B4
1390:  MOVLW  01
1392:  SUBWF  3C,F
1394:  BC    13B4
1396:  SUBWF  3D,F
1398:  BC    13B4
139A:  INCF   3D,F
139C:  INCF   3C,F
139E:  MOVF   38,W
13A0:  ADDWF  3B,F
13A2:  MOVF   39,W
13A4:  ADDWF  3A,F
13A6:  BNC   13DA
13A8:  INCF   3B,F
13AA:  BNZ   13DA
13AC:  INCF   3C,F
13AE:  BNZ   13DA
13B0:  INCF   3D,F
13B2:  BRA    13DA
13B4:  MOVF   37,W
13B6:  IORLW  80
13B8:  SUBWF  3C,F
13BA:  BC    13D8
13BC:  MOVLW  01
13BE:  SUBWF  3D,F
13C0:  BC    13D8
13C2:  INCF   3D,F
13C4:  MOVF   37,W
13C6:  IORLW  80
13C8:  ADDWF  3C,F
13CA:  MOVF   38,W
13CC:  ADDWF  3B,F
13CE:  BNC   13A2
13D0:  INCF   3C,F
13D2:  BNZ   13A2
13D4:  INCF   3D,F
13D6:  BRA    13A2
13D8:  BSF    03.0
13DA:  DECFSZ 3E,F
13DC:  BRA    13E0
13DE:  BRA    13F6
13E0:  BCF    FD8.0
13E2:  RLCF   3A,F
13E4:  RLCF   3B,F
13E6:  RLCF   3C,F
13E8:  RLCF   3D,F
13EA:  BCF    FD8.0
13EC:  RLCF   03,F
13EE:  RLCF   02,F
13F0:  RLCF   01,F
13F2:  RLCF   3F,F
13F4:  BRA    136A
13F6:  BTFSS  3F.0
13F8:  BRA    1406
13FA:  BCF    FD8.0
13FC:  RRCF   01,F
13FE:  RRCF   02,F
1400:  RRCF   03,F
1402:  RRCF   3F,F
1404:  BRA    140A
1406:  DECF   00,F
1408:  BZ    1474
140A:  BTFSC  3F.7
140C:  BRA    144A
140E:  BCF    FD8.0
1410:  RLCF   3A,F
1412:  RLCF   3B,F
1414:  RLCF   3C,F
1416:  RLCF   3D,F
1418:  MOVF   39,W
141A:  SUBWF  3A,F
141C:  BC    142C
141E:  MOVLW  01
1420:  SUBWF  3B,F
1422:  BC    142C
1424:  SUBWF  3C,F
1426:  BC    142C
1428:  SUBWF  3D,F
142A:  BNC   1460
142C:  MOVF   38,W
142E:  SUBWF  3B,F
1430:  BC    143C
1432:  MOVLW  01
1434:  SUBWF  3C,F
1436:  BC    143C
1438:  SUBWF  3D,F
143A:  BNC   1460
143C:  MOVF   37,W
143E:  IORLW  80
1440:  SUBWF  3C,F
1442:  BC    144A
1444:  MOVLW  01
1446:  SUBWF  3D,F
1448:  BNC   1460
144A:  INCF   03,F
144C:  BNZ   1460
144E:  INCF   02,F
1450:  BNZ   1460
1452:  INCF   01,F
1454:  BNZ   1460
1456:  INCF   00,F
1458:  BZ    1474
145A:  RRCF   01,F
145C:  RRCF   02,F
145E:  RRCF   03,F
1460:  MOVFF  33,3E
1464:  MOVF   37,W
1466:  XORWF  3E,F
1468:  BTFSS  3E.7
146A:  BRA    1470
146C:  BSF    01.7
146E:  BRA    147C
1470:  BCF    01.7
1472:  BRA    147C
1474:  CLRF   00
1476:  CLRF   01
1478:  CLRF   02
147A:  CLRF   03
147C:  RETURN 0
147E:  MOVLW  80
1480:  BTFSC  FD8.1
1482:  XORWF  37,F
1484:  CLRF   3C
1486:  CLRF   3D
1488:  MOVFF  33,3B
148C:  MOVF   37,W
148E:  XORWF  3B,F
1490:  MOVF   32,W
1492:  BTFSC  FD8.2
1494:  BRA    164E
1496:  MOVWF  3A
1498:  MOVWF  00
149A:  MOVF   36,W
149C:  BTFSC  FD8.2
149E:  BRA    1660
14A0:  SUBWF  3A,F
14A2:  BTFSC  FD8.2
14A4:  BRA    15A8
14A6:  BNC   1522
14A8:  MOVFF  37,40
14AC:  BSF    40.7
14AE:  MOVFF  38,3F
14B2:  MOVFF  39,3E
14B6:  CLRF   3D
14B8:  BCF    FD8.0
14BA:  RRCF   40,F
14BC:  RRCF   3F,F
14BE:  RRCF   3E,F
14C0:  RRCF   3D,F
14C2:  DECFSZ 3A,F
14C4:  BRA    14B6
14C6:  BTFSS  3B.7
14C8:  BRA    14D0
14CA:  BSF    3C.0
14CC:  BRA    1688
14CE:  BCF    3C.0
14D0:  BCF    3A.0
14D2:  BSF    3C.4
14D4:  CLRF   FEA
14D6:  MOVLW  35
14D8:  MOVWF  FE9
14DA:  BRA    16AE
14DC:  BCF    3C.4
14DE:  BTFSC  3B.7
14E0:  BRA    14F6
14E2:  BTFSS  3A.0
14E4:  BRA    150C
14E6:  RRCF   40,F
14E8:  RRCF   3F,F
14EA:  RRCF   3E,F
14EC:  RRCF   3D,F
14EE:  INCF   00,F
14F0:  BTFSC  FD8.2
14F2:  BRA    167E
14F4:  BRA    150C
14F6:  BTFSC  40.7
14F8:  BRA    1512
14FA:  BCF    FD8.0
14FC:  RLCF   3D,F
14FE:  RLCF   3E,F
1500:  RLCF   3F,F
1502:  RLCF   40,F
1504:  DECF   00,F
1506:  BTFSC  FD8.2
1508:  BRA    167E
150A:  BRA    14F6
150C:  BSF    3C.6
150E:  BRA    15E6
1510:  BCF    3C.6
1512:  MOVFF  33,3B
1516:  BTFSS  33.7
1518:  BRA    151E
151A:  BSF    40.7
151C:  BRA    1670
151E:  BCF    40.7
1520:  BRA    1670
1522:  MOVFF  36,3A
1526:  MOVFF  36,00
152A:  MOVF   32,W
152C:  SUBWF  3A,F
152E:  MOVFF  33,40
1532:  BSF    40.7
1534:  MOVFF  34,3F
1538:  MOVFF  35,3E
153C:  CLRF   3D
153E:  BCF    FD8.0
1540:  RRCF   40,F
1542:  RRCF   3F,F
1544:  RRCF   3E,F
1546:  RRCF   3D,F
1548:  DECFSZ 3A,F
154A:  BRA    153C
154C:  BTFSS  3B.7
154E:  BRA    1556
1550:  BSF    3C.1
1552:  BRA    1688
1554:  BCF    3C.1
1556:  BCF    3A.0
1558:  BSF    3C.5
155A:  CLRF   FEA
155C:  MOVLW  39
155E:  MOVWF  FE9
1560:  BRA    16AE
1562:  BCF    3C.5
1564:  BTFSC  3B.7
1566:  BRA    157C
1568:  BTFSS  3A.0
156A:  BRA    1592
156C:  RRCF   40,F
156E:  RRCF   3F,F
1570:  RRCF   3E,F
1572:  RRCF   3D,F
1574:  INCF   00,F
1576:  BTFSC  FD8.2
1578:  BRA    167E
157A:  BRA    1592
157C:  BTFSC  40.7
157E:  BRA    1598
1580:  BCF    FD8.0
1582:  RLCF   3D,F
1584:  RLCF   3E,F
1586:  RLCF   3F,F
1588:  RLCF   40,F
158A:  DECF   00,F
158C:  BTFSC  FD8.2
158E:  BRA    167E
1590:  BRA    157C
1592:  BSF    3C.7
1594:  BRA    15E6
1596:  BCF    3C.7
1598:  MOVFF  37,3B
159C:  BTFSS  37.7
159E:  BRA    15A4
15A0:  BSF    40.7
15A2:  BRA    1670
15A4:  BCF    40.7
15A6:  BRA    1670
15A8:  MOVFF  37,40
15AC:  BSF    40.7
15AE:  MOVFF  38,3F
15B2:  MOVFF  39,3E
15B6:  BTFSS  3B.7
15B8:  BRA    15C2
15BA:  BCF    40.7
15BC:  BSF    3C.2
15BE:  BRA    1688
15C0:  BCF    3C.2
15C2:  CLRF   3D
15C4:  BCF    3A.0
15C6:  CLRF   FEA
15C8:  MOVLW  35
15CA:  MOVWF  FE9
15CC:  BRA    16AE
15CE:  BTFSC  3B.7
15D0:  BRA    160A
15D2:  MOVFF  33,3B
15D6:  BTFSS  3A.0
15D8:  BRA    15E6
15DA:  RRCF   40,F
15DC:  RRCF   3F,F
15DE:  RRCF   3E,F
15E0:  RRCF   3D,F
15E2:  INCF   00,F
15E4:  BZ    167E
15E6:  BTFSS  3D.7
15E8:  BRA    1600
15EA:  INCF   3E,F
15EC:  BNZ   1600
15EE:  INCF   3F,F
15F0:  BNZ   1600
15F2:  INCF   40,F
15F4:  BNZ   1600
15F6:  RRCF   40,F
15F8:  RRCF   3F,F
15FA:  RRCF   3E,F
15FC:  INCF   00,F
15FE:  BZ    167E
1600:  BTFSC  3C.6
1602:  BRA    1510
1604:  BTFSC  3C.7
1606:  BRA    1596
1608:  BRA    1642
160A:  MOVLW  80
160C:  XORWF  40,F
160E:  BTFSS  40.7
1610:  BRA    161A
1612:  BRA    1688
1614:  MOVFF  37,3B
1618:  BRA    162E
161A:  MOVFF  33,3B
161E:  MOVF   40,F
1620:  BNZ   162E
1622:  MOVF   3F,F
1624:  BNZ   162E
1626:  MOVF   3E,F
1628:  BNZ   162E
162A:  CLRF   00
162C:  BRA    1670
162E:  BTFSC  40.7
1630:  BRA    1642
1632:  BCF    FD8.0
1634:  RLCF   3D,F
1636:  RLCF   3E,F
1638:  RLCF   3F,F
163A:  RLCF   40,F
163C:  DECFSZ 00,F
163E:  BRA    162E
1640:  BRA    167E
1642:  BTFSS  3B.7
1644:  BRA    164A
1646:  BSF    40.7
1648:  BRA    1670
164A:  BCF    40.7
164C:  BRA    1670
164E:  MOVFF  36,00
1652:  MOVFF  37,40
1656:  MOVFF  38,3F
165A:  MOVFF  39,3E
165E:  BRA    1670
1660:  MOVFF  32,00
1664:  MOVFF  33,40
1668:  MOVFF  34,3F
166C:  MOVFF  35,3E
1670:  MOVFF  40,01
1674:  MOVFF  3F,02
1678:  MOVFF  3E,03
167C:  BRA    16E6
167E:  CLRF   00
1680:  CLRF   01
1682:  CLRF   02
1684:  CLRF   03
1686:  BRA    16E6
1688:  CLRF   3D
168A:  COMF   3E,F
168C:  COMF   3F,F
168E:  COMF   40,F
1690:  COMF   3D,F
1692:  INCF   3D,F
1694:  BNZ   16A0
1696:  INCF   3E,F
1698:  BNZ   16A0
169A:  INCF   3F,F
169C:  BNZ   16A0
169E:  INCF   40,F
16A0:  BTFSC  3C.0
16A2:  BRA    14CE
16A4:  BTFSC  3C.1
16A6:  BRA    1554
16A8:  BTFSC  3C.2
16AA:  BRA    15C0
16AC:  BRA    1614
16AE:  MOVF   FEF,W
16B0:  ADDWF  3E,F
16B2:  BNC   16BE
16B4:  INCF   3F,F
16B6:  BNZ   16BE
16B8:  INCF   40,F
16BA:  BTFSC  FD8.2
16BC:  BSF    3A.0
16BE:  MOVF   FED,F
16C0:  MOVF   FEF,W
16C2:  ADDWF  3F,F
16C4:  BNC   16CC
16C6:  INCF   40,F
16C8:  BTFSC  FD8.2
16CA:  BSF    3A.0
16CC:  MOVF   FED,F
16CE:  MOVF   FEF,W
16D0:  BTFSC  FEF.7
16D2:  BRA    16D6
16D4:  XORLW  80
16D6:  ADDWF  40,F
16D8:  BTFSC  FD8.0
16DA:  BSF    3A.0
16DC:  BTFSC  3C.4
16DE:  BRA    14DC
16E0:  BTFSC  3C.5
16E2:  BRA    1562
16E4:  BRA    15CE
16E6:  RETURN 0
16E8:  MOVFF  33,3A
16EC:  MOVF   37,W
16EE:  XORWF  3A,F
16F0:  BTFSS  3A.7
16F2:  BRA    16FE
16F4:  BCF    FD8.2
16F6:  BCF    FD8.0
16F8:  BTFSC  33.7
16FA:  BSF    FD8.0
16FC:  BRA    175C
16FE:  MOVFF  33,3A
1702:  MOVFF  36,3B
1706:  MOVF   32,W
1708:  SUBWF  3B,F
170A:  BZ    1718
170C:  BTFSS  3A.7
170E:  BRA    175C
1710:  MOVF   FD8,W
1712:  XORLW  01
1714:  MOVWF  FD8
1716:  BRA    175C
1718:  MOVFF  37,3B
171C:  MOVF   33,W
171E:  SUBWF  3B,F
1720:  BZ    172E
1722:  BTFSS  3A.7
1724:  BRA    175C
1726:  MOVF   FD8,W
1728:  XORLW  01
172A:  MOVWF  FD8
172C:  BRA    175C
172E:  MOVFF  38,3B
1732:  MOVF   34,W
1734:  SUBWF  3B,F
1736:  BZ    1744
1738:  BTFSS  3A.7
173A:  BRA    175C
173C:  MOVF   FD8,W
173E:  XORLW  01
1740:  MOVWF  FD8
1742:  BRA    175C
1744:  MOVFF  39,3B
1748:  MOVF   35,W
174A:  SUBWF  3B,F
174C:  BZ    175A
174E:  BTFSS  3A.7
1750:  BRA    175C
1752:  MOVF   FD8,W
1754:  XORLW  01
1756:  MOVWF  FD8
1758:  BRA    175C
175A:  BCF    FD8.0
175C:  RETURN 0
*
1786:  MOVF   32,W
1788:  BTFSC  FD8.2
178A:  BRA    186E
178C:  MOVWF  00
178E:  MOVF   36,W
1790:  BTFSC  FD8.2
1792:  BRA    186E
1794:  ADDWF  00,F
1796:  BNC   17A0
1798:  MOVLW  81
179A:  ADDWF  00,F
179C:  BC    186E
179E:  BRA    17A8
17A0:  MOVLW  7F
17A2:  SUBWF  00,F
17A4:  BNC   186E
17A6:  BZ    186E
17A8:  MOVFF  33,3A
17AC:  MOVF   37,W
17AE:  XORWF  3A,F
17B0:  BSF    33.7
17B2:  BSF    37.7
17B4:  MOVF   35,W
17B6:  MULWF  39
17B8:  MOVFF  FF4,3C
17BC:  MOVF   34,W
17BE:  MULWF  38
17C0:  MOVFF  FF4,03
17C4:  MOVFF  FF3,3B
17C8:  MULWF  39
17CA:  MOVF   FF3,W
17CC:  ADDWF  3C,F
17CE:  MOVF   FF4,W
17D0:  ADDWFC 3B,F
17D2:  MOVLW  00
17D4:  ADDWFC 03,F
17D6:  MOVF   35,W
17D8:  MULWF  38
17DA:  MOVF   FF3,W
17DC:  ADDWF  3C,F
17DE:  MOVF   FF4,W
17E0:  ADDWFC 3B,F
17E2:  MOVLW  00
17E4:  CLRF   02
17E6:  ADDWFC 03,F
17E8:  ADDWFC 02,F
17EA:  MOVF   33,W
17EC:  MULWF  39
17EE:  MOVF   FF3,W
17F0:  ADDWF  3B,F
17F2:  MOVF   FF4,W
17F4:  ADDWFC 03,F
17F6:  MOVLW  00
17F8:  ADDWFC 02,F
17FA:  MOVF   33,W
17FC:  MULWF  38
17FE:  MOVF   FF3,W
1800:  ADDWF  03,F
1802:  MOVF   FF4,W
1804:  ADDWFC 02,F
1806:  MOVLW  00
1808:  CLRF   01
180A:  ADDWFC 01,F
180C:  MOVF   35,W
180E:  MULWF  37
1810:  MOVF   FF3,W
1812:  ADDWF  3B,F
1814:  MOVF   FF4,W
1816:  ADDWFC 03,F
1818:  MOVLW  00
181A:  ADDWFC 02,F
181C:  ADDWFC 01,F
181E:  MOVF   34,W
1820:  MULWF  37
1822:  MOVF   FF3,W
1824:  ADDWF  03,F
1826:  MOVF   FF4,W
1828:  ADDWFC 02,F
182A:  MOVLW  00
182C:  ADDWFC 01,F
182E:  MOVF   33,W
1830:  MULWF  37
1832:  MOVF   FF3,W
1834:  ADDWF  02,F
1836:  MOVF   FF4,W
1838:  ADDWFC 01,F
183A:  INCF   00,F
183C:  BTFSC  01.7
183E:  BRA    184A
1840:  RLCF   3B,F
1842:  RLCF   03,F
1844:  RLCF   02,F
1846:  RLCF   01,F
1848:  DECF   00,F
184A:  MOVLW  00
184C:  BTFSS  3B.7
184E:  BRA    1864
1850:  INCF   03,F
1852:  ADDWFC 02,F
1854:  ADDWFC 01,F
1856:  MOVF   01,W
1858:  BNZ   1864
185A:  MOVF   02,W
185C:  BNZ   1864
185E:  MOVF   03,W
1860:  BNZ   1864
1862:  INCF   00,F
1864:  BTFSC  3A.7
1866:  BSF    01.7
1868:  BTFSS  3A.7
186A:  BCF    01.7
186C:  BRA    1876
186E:  CLRF   00
1870:  CLRF   01
1872:  CLRF   02
1874:  CLRF   03
1876:  RETURN 0
1878:  MOVLW  8E
187A:  MOVWF  00
187C:  MOVF   2E,W
187E:  SUBWF  00,F
1880:  MOVFF  2F,02
1884:  MOVFF  30,01
1888:  BSF    02.7
188A:  MOVF   00,F
188C:  BZ    18A0
188E:  BCF    FD8.0
1890:  MOVF   02,F
1892:  BNZ   1898
1894:  MOVF   01,F
1896:  BZ    18A0
1898:  RRCF   02,F
189A:  RRCF   01,F
189C:  DECFSZ 00,F
189E:  BRA    188E
18A0:  BTFSS  2F.7
18A2:  BRA    18AE
18A4:  COMF   01,F
18A6:  COMF   02,F
18A8:  INCF   01,F
18AA:  BTFSC  FD8.2
18AC:  INCF   02,F
18AE:  RETURN 0
*
1DFC:  DATA 31,3A
1DFE:  DATA 20,00
1E00:  DATA 20,32
1E02:  DATA 3A,20
1E04:  DATA 00,00
1E06:  DATA 33,3A
1E08:  DATA 20,00
1E0A:  DATA 20,34
1E0C:  DATA 3A,20
1E0E:  DATA 00,00
1E10:  DATA 20,49
1E12:  DATA 6E,69
1E14:  DATA 63,69
1E16:  DATA 61,6C
1E18:  DATA 69,7A
1E1A:  DATA 61,6E
1E1C:  DATA 64,6F
1E1E:  DATA 00,00
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=48MHz,crystal=20MHz) 
*
10B4:  MOVLW  01
10B6:  SUBWF  3E,F
10B8:  BNC   10D2
10BA:  CLRF   FEA
10BC:  MOVLW  3E
10BE:  MOVWF  FE9
10C0:  MOVF   FEF,W
10C2:  BZ    10D2
10C4:  MOVLW  02
10C6:  MOVWF  00
10C8:  DECFSZ 00,F
10CA:  BRA    10C8
10CC:  BRA    10CE
10CE:  DECFSZ FEF,F
10D0:  BRA    10C4
10D2:  RETURN 0
*
1142:  CLRF   FEA
1144:  MOVLW  38
1146:  MOVWF  FE9
1148:  MOVF   FEF,W
114A:  BZ    1168
114C:  MOVLW  0F
114E:  MOVWF  01
1150:  CLRF   00
1152:  DECFSZ 00,F
1154:  BRA    1152
1156:  DECFSZ 01,F
1158:  BRA    1150
115A:  MOVLW  8F
115C:  MOVWF  00
115E:  DECFSZ 00,F
1160:  BRA    115E
1162:  NOP   
1164:  DECFSZ FEF,F
1166:  BRA    114C
1168:  RETURN 0
....................  
.................... // #build(reset=0x1000, interrupt=0x1008) 
.................... // #org 0x000, 0xfff { } 
....................  
.................... #include <Motor1.c> 
.................... #build(reset = 0x1000, interrupt = 0x1008) 
.................... #org 0x000, 0xfff {} 
....................  
.................... #define m1p1 pin_e2 
.................... #define m1p2 pin_c0 
.................... #define m2p1 pin_d0 
.................... #define m2p2 pin_d1 
....................  
.................... void tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void frente() 
.................... { 
....................       output_bit(m1p1, 1); 
*
1EEE:  BSF    F8D.2
1EF0:  BCF    F96.2
....................       output_bit(m1p2, 0); 
1EF2:  BCF    F8B.0
1EF4:  BCF    F94.0
....................       output_bit(m2p1, 0); 
1EF6:  BCF    F8C.0
1EF8:  BCF    F95.0
....................       output_bit(m2p2, 1); 
1EFA:  BSF    F8C.1
1EFC:  BCF    F95.1
1EFE:  GOTO   1F42 (RETURN)
.................... } 
....................  
.................... void gira_esquerda() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void gira_direita() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_frente() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_frente() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void para() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void MotorInitialize() 
.................... { 
....................       setup_timer_2(T2_DIV_BY_16, 255, 1); //341 us overflow, 341 us interrupt 
*
1ECE:  MOVLW  00
1ED0:  IORLW  06
1ED2:  MOVWF  FCA
1ED4:  MOVLW  FF
1ED6:  MOVWF  FCB
....................  
....................       setup_ccp1(CCP_PWM | CCP_SHUTDOWN_AC_L | CCP_SHUTDOWN_BD_L); 
1ED8:  BCF    F94.2
1EDA:  BCF    F8B.2
1EDC:  MOVLW  0C
1EDE:  MOVWF  FBD
1EE0:  CLRF   FB7
1EE2:  CLRF   FB6
....................       setup_ccp2(CCP_PWM); 
1EE4:  BCF    F94.1
1EE6:  BCF    F8B.1
1EE8:  MOVWF  FBA
1EEA:  GOTO   1F2C (RETURN)
.................... } 
....................  
.................... void SetBothPwm(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
18D8:  MOVFF  2F,02
18DC:  MOVFF  2E,01
18E0:  RRCF   02,F
18E2:  RRCF   01,F
18E4:  RRCF   02,F
18E6:  RRCF   01,F
18E8:  RRCF   02,F
18EA:  MOVFF  01,FBE
18EE:  RRCF   02,F
18F0:  RRCF   02,W
18F2:  ANDLW  30
18F4:  MOVWF  00
18F6:  MOVF   FBD,W
18F8:  ANDLW  CF
18FA:  IORWF  00,W
18FC:  MOVWF  FBD
....................       set_pwm2_duty((int16)vel); //-50); 
18FE:  MOVFF  2F,02
1902:  MOVFF  2E,01
1906:  RRCF   02,F
1908:  RRCF   01,F
190A:  RRCF   02,F
190C:  RRCF   01,F
190E:  RRCF   02,F
1910:  MOVFF  01,FBB
1914:  RRCF   02,F
1916:  RRCF   02,W
1918:  ANDLW  30
191A:  MOVWF  00
191C:  MOVF   FBA,W
191E:  ANDLW  CF
1920:  IORWF  00,W
1922:  MOVWF  FBA
1924:  RETURN 0
.................... } 
....................  
.................... void SetRight(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
175E:  MOVFF  31,02
1762:  MOVFF  30,01
1766:  RRCF   02,F
1768:  RRCF   01,F
176A:  RRCF   02,F
176C:  RRCF   01,F
176E:  RRCF   02,F
1770:  MOVFF  01,FBE
1774:  RRCF   02,F
1776:  RRCF   02,W
1778:  ANDLW  30
177A:  MOVWF  00
177C:  MOVF   FBD,W
177E:  ANDLW  CF
1780:  IORWF  00,W
1782:  MOVWF  FBD
1784:  RETURN 0
.................... } 
.................... void SetLeft(int16 vel) 
.................... { 
....................       set_pwm2_duty((int16)vel); 
*
18B0:  MOVFF  31,02
18B4:  MOVFF  30,01
18B8:  RRCF   02,F
18BA:  RRCF   01,F
18BC:  RRCF   02,F
18BE:  RRCF   01,F
18C0:  RRCF   02,F
18C2:  MOVFF  01,FBB
18C6:  RRCF   02,F
18C8:  RRCF   02,W
18CA:  ANDLW  30
18CC:  MOVWF  00
18CE:  MOVF   FBA,W
18D0:  ANDLW  CF
18D2:  IORWF  00,W
18D4:  MOVWF  FBA
18D6:  RETURN 0
.................... } 
....................  
.................... #include <LCD_KIT.c> 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipula��o de m�dulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: F�bio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
.................... /* 
.................... lcd_cursor_on()                        fun��es LCD 
.................... lcd_cursor_pisca() 
.................... lcd_cursor_off() 
.................... lcd_corre_esquerda() 
.................... lcd_corre_direita() 
.................... lcd_envia_nibble( byte dado ) 
.................... lcd_le_byte() 
.................... lcd_ini() 
.................... lcd_pos_xy( byte x, byte y) 
.................... lcd_escreve( char c)                  \f  Clear display                            //// 
....................                                             \n  Go to start of second line               //// 
....................                                   \b  Move back one position                   //// 
....................  
.................... lcd_le( byte x, byte y) 
.................... lcd_apaga() 
.................... { 
....................  
.................... */ 
.................... // As defini��es a seguir s�o utilizadas para acesso aos pinos do display 
.................... // caso o pino RW n�o seja utilizado, comente a defini��o lcd_rw 
.................... #ifndef lcd_enable 
....................    #define lcd_rs         pin_d2      // pino rs do LCD 
....................    #define lcd_enable     pin_d3      // pino enable do LCD 
....................    #define lcd_d4         pin_d4      // pino de dados d4 do LCD 
....................    #define lcd_d5         pin_d5      // pino de dados d5 do LCD 
....................    #define lcd_d6         pin_d6      // pino de dados d6 do LCD 
....................    #define lcd_d7         pin_d7   // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endere�o da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seq��ncia de inicializa��o do m�dulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................  
.................... /*   O 0x20 eh p configurar o tipo do display e talz. 
....................    O Segundo numero configura o modo do cursor, sendo: 
....................                -> 0xf Cursor piscante 
....................                -> 0xe Cursor comum 
....................                -> 0xc Sem cursor 
....................    O terceiro (1) limpa o display 
....................    O Quarto volta com o cursor. 
.................... */ 
....................  
.................... byte lcd_le_byte() 
.................... // l� um byte do LCD (somente com pino RW) 
.................... { 
....................    byte dado; 
....................    // configura os pinos de dados como entradas 
....................    input(lcd_d4); 
....................    input(lcd_d5); 
....................    input(lcd_d6); 
....................    input(lcd_d7); 
....................    // se o pino rw for utilizado, coloca em 1 
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_high(lcd_enable); // habilita display 
....................    dado = 0;   // zera a vari�vel de leitura 
....................    // l� os quatro bits mais significativos 
....................    if (input(lcd_d7)) bit_set(dado,7); 
....................    if (input(lcd_d6)) bit_set(dado,6); 
....................    if (input(lcd_d5)) bit_set(dado,5); 
....................    if (input(lcd_d4)) bit_set(dado,4); 
....................    // d� um pulso na linha enable 
....................    output_low(lcd_enable); 
....................    output_high(lcd_enable); 
....................    // l� os quatro bits menos significativos 
....................    if (input(lcd_d7)) bit_set(dado,3); 
....................    if (input(lcd_d6)) bit_set(dado,2); 
....................    if (input(lcd_d5)) bit_set(dado,1); 
....................    if (input(lcd_d4)) bit_set(dado,0); 
....................    output_low(lcd_enable);   // desabilita o display 
....................    return dado;   // retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
....................    // coloca os quatro bits nas saidas 
....................    output_bit(lcd_d4,bit_test(dado,0)); 
*
10D4:  BTFSC  3F.0
10D6:  BRA    10DC
10D8:  BCF    F8C.4
10DA:  BRA    10DE
10DC:  BSF    F8C.4
10DE:  BCF    F95.4
....................    output_bit(lcd_d5,bit_test(dado,1)); 
10E0:  BTFSC  3F.1
10E2:  BRA    10E8
10E4:  BCF    F8C.5
10E6:  BRA    10EA
10E8:  BSF    F8C.5
10EA:  BCF    F95.5
....................    output_bit(lcd_d6,bit_test(dado,2)); 
10EC:  BTFSC  3F.2
10EE:  BRA    10F4
10F0:  BCF    F8C.6
10F2:  BRA    10F6
10F4:  BSF    F8C.6
10F6:  BCF    F95.6
....................    output_bit(lcd_d7,bit_test(dado,3)); 
10F8:  BTFSC  3F.3
10FA:  BRA    1100
10FC:  BCF    F8C.7
10FE:  BRA    1102
1100:  BSF    F8C.7
1102:  BCF    F95.7
....................    // d� um pulso na linha enable 
....................    output_high(lcd_enable); 
1104:  BCF    F95.3
1106:  BSF    F8C.3
....................    output_low(lcd_enable); 
1108:  BCF    F95.3
110A:  BCF    F8C.3
110C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
....................    // coloca a linha rs em 0 
....................    output_low(lcd_rs); 
110E:  BCF    F95.2
1110:  BCF    F8C.2
....................    // aguarda o display ficar desocupado 
....................    //while ( bit_test(lcd_le_byte(),7) ) ; 
....................    // configura a linha rs dependendo do modo selecionado 
....................    output_bit(lcd_rs,endereco); 
1112:  MOVF   3C,F
1114:  BNZ   111A
1116:  BCF    F8C.2
1118:  BRA    111C
111A:  BSF    F8C.2
111C:  BCF    F95.2
....................    delay_us(100);   // aguarda 100 us 
111E:  MOVLW  64
1120:  MOVWF  3E
1122:  RCALL  10B4
....................    // caso a linha rw esteja definida, coloca em 0 
....................    #ifdef lcd_rw 
....................       output_low(lcd_rw); 
....................    #endif 
....................    // desativa linha enable 
....................    output_low(lcd_enable); 
1124:  BCF    F95.3
1126:  BCF    F8C.3
....................    // envia a primeira parte do byte 
....................    lcd_envia_nibble(dado >> 4); 
1128:  SWAPF  3D,W
112A:  MOVWF  3E
112C:  MOVLW  0F
112E:  ANDWF  3E,F
1130:  MOVFF  3E,3F
1134:  RCALL  10D4
....................    // envia a segunda parte do byte 
....................    lcd_envia_nibble(dado & 0x0f); 
1136:  MOVF   3D,W
1138:  ANDLW  0F
113A:  MOVWF  3E
113C:  MOVWF  3F
113E:  RCALL  10D4
1140:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicializa��o do display 
.................... { 
....................    byte conta; 
....................    output_low(lcd_d4); 
*
1E20:  BCF    F95.4
1E22:  BCF    F8C.4
....................    output_low(lcd_d5); 
1E24:  BCF    F95.5
1E26:  BCF    F8C.5
....................    output_low(lcd_d6); 
1E28:  BCF    F95.6
1E2A:  BCF    F8C.6
....................    output_low(lcd_d7); 
1E2C:  BCF    F95.7
1E2E:  BCF    F8C.7
....................    output_low(lcd_rs); 
1E30:  BCF    F95.2
1E32:  BCF    F8C.2
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_low(lcd_enable); 
1E34:  BCF    F95.3
1E36:  BCF    F8C.3
1E38:  CLRF   16
1E3A:  BTFSC  FF2.7
1E3C:  BSF    16.7
1E3E:  BCF    FF2.7
....................    delay_ms(15); 
1E40:  MOVLW  0F
1E42:  MOVWF  38
1E44:  CALL   1142
1E48:  BTFSC  16.7
1E4A:  BSF    FF2.7
....................    // envia uma seq��ncia de 3 vezes 0x03 
....................    // e depois 0x02 para configurar o m�dulo 
....................    // para modo de 4 bits 
....................    for(conta=1;conta<=3;++conta) 
1E4C:  MOVLW  01
1E4E:  MOVWF  23
1E50:  MOVF   23,W
1E52:  SUBLW  03
1E54:  BNC   1E82
1E56:  CLRF   16
1E58:  BTFSC  FF2.7
1E5A:  BSF    16.7
1E5C:  BCF    FF2.7
....................    { 
....................       lcd_envia_nibble(3); 
1E5E:  MOVLW  03
1E60:  MOVWF  3F
1E62:  CALL   10D4
1E66:  BTFSC  16.7
1E68:  BSF    FF2.7
1E6A:  CLRF   16
1E6C:  BTFSC  FF2.7
1E6E:  BSF    16.7
1E70:  BCF    FF2.7
....................       delay_ms(5); 
1E72:  MOVLW  05
1E74:  MOVWF  38
1E76:  CALL   1142
1E7A:  BTFSC  16.7
1E7C:  BSF    FF2.7
1E7E:  INCF   23,F
1E80:  BRA    1E50
1E82:  CLRF   16
1E84:  BTFSC  FF2.7
1E86:  BSF    16.7
1E88:  BCF    FF2.7
....................    } 
....................    lcd_envia_nibble(2); 
1E8A:  MOVLW  02
1E8C:  MOVWF  3F
1E8E:  CALL   10D4
1E92:  BTFSC  16.7
1E94:  BSF    FF2.7
....................    // envia string de inicializa��o do display 
....................    for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
1E96:  CLRF   23
1E98:  MOVF   23,W
1E9A:  SUBLW  03
1E9C:  BNC   1ECA
1E9E:  CLRF   03
1EA0:  MOVF   23,W
1EA2:  MOVFF  FF2,24
1EA6:  BCF    FF2.7
1EA8:  CALL   1096
1EAC:  BTFSC  24.7
1EAE:  BSF    FF2.7
1EB0:  MOVWF  24
1EB2:  CLRF   16
1EB4:  BTFSC  FF2.7
1EB6:  BSF    16.7
1EB8:  BCF    FF2.7
1EBA:  CLRF   3C
1EBC:  MOVWF  3D
1EBE:  CALL   110E
1EC2:  BTFSC  16.7
1EC4:  BSF    FF2.7
1EC6:  INCF   23,F
1EC8:  BRA    1E98
1ECA:  GOTO   1F2A (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
116A:  DECFSZ 39,W
116C:  BRA    1170
116E:  BRA    1176
....................       endereco = lcd_seg_lin; 
1170:  MOVLW  40
1172:  MOVWF  3A
1174:  BRA    1178
....................    else 
....................       endereco = 0; 
1176:  CLRF   3A
....................    endereco += x-1; 
1178:  MOVLW  01
117A:  SUBWF  38,W
117C:  ADDWF  3A,F
....................    lcd_envia_byte(0,0x80|endereco); 
117E:  MOVF   3A,W
1180:  IORLW  80
1182:  MOVWF  3B
1184:  CLRF   3C
1186:  MOVWF  3D
1188:  RCALL  110E
118A:  RETURN 0
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
118C:  MOVF   37,W
118E:  XORLW  0C
1190:  BZ    11A0
1192:  XORLW  06
1194:  BZ    11B0
1196:  XORLW  07
1198:  BZ    11B0
119A:  XORLW  05
119C:  BZ    11BC
119E:  BRA    11C6
....................    { 
....................      case '\f'    :   lcd_envia_byte(0,1); 
11A0:  CLRF   3C
11A2:  MOVLW  01
11A4:  MOVWF  3D
11A6:  RCALL  110E
....................               delay_ms(2); 
11A8:  MOVLW  02
11AA:  MOVWF  38
11AC:  RCALL  1142
....................             break; 
11AE:  BRA    11D0
....................      case '\n'   : 
....................      case '\r'    :   lcd_pos_xy(1,2); 
11B0:  MOVLW  01
11B2:  MOVWF  38
11B4:  MOVLW  02
11B6:  MOVWF  39
11B8:  RCALL  116A
....................               break; 
11BA:  BRA    11D0
....................      case '\b'    :   lcd_envia_byte(0,0x10); 
11BC:  CLRF   3C
11BE:  MOVLW  10
11C0:  MOVWF  3D
11C2:  RCALL  110E
....................               break; 
11C4:  BRA    11D0
....................      default   :   lcd_envia_byte(1,c); 
11C6:  MOVLW  01
11C8:  MOVWF  3C
11CA:  MOVFF  37,3D
11CE:  RCALL  110E
....................               break; 
....................    } 
11D0:  RETURN 0
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
....................    char valor; 
....................    // seleciona a posi��o do caractere 
....................    lcd_pos_xy(x,y); 
....................    // ativa rs 
....................    output_high(lcd_rs); 
....................    // l� o caractere 
....................    valor = lcd_le_byte(); 
....................    // desativa rs 
....................    output_low(lcd_rs); 
....................    // retorna o valor do caractere 
....................    return valor; 
.................... } 
....................  
.................... void lcd_apaga() 
.................... { 
....................    lcd_envia_byte(0,1); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_cursor_on() 
....................     { 
.................... lcd_envia_byte(0,0x0E); 
....................     } 
....................  
.................... void lcd_cursor_pisca() 
....................     { 
.................... lcd_envia_byte(0,0x0F); 
....................     } 
....................  
.................... void lcd_cursor_off() 
....................     { 
....................  lcd_envia_byte(0,0x0C); 
....................     } 
....................  
.................... void lcd_corre_esquerda() 
....................     { 
....................  lcd_envia_byte(0,0x18); 
....................     } 
....................  
.................... void lcd_corre_direita() 
....................     { 
.................... lcd_envia_byte(0,0x1C); 
....................     } 
....................  
....................  
....................  
.................... #define button1 pin_a4 
.................... #define button2 pin_a5 
.................... #define button3 pin_e0 
.................... #define button4 pin_e1 
....................  
.................... int running; 
....................  
.................... int16 ad1, ad2, ad3, ad4; 
.................... int16 timerBase; 
.................... int8 adCounter; 
....................  
.................... void ClearScreen(); 
.................... void Setup(); 
....................  
.................... #int_timer0 
.................... void timerTick() 
.................... { 
....................     if (adCounter == 1) 
*
1926:  DECFSZ 22,W
1928:  BRA    193A
....................     { 
....................         ad1 = read_adc(); 
192A:  BSF    FC2.1
192C:  BTFSC  FC2.1
192E:  BRA    192C
1930:  MOVFF  FC3,18
1934:  MOVFF  FC4,19
....................     } 
1938:  BRA    1976
....................     else if (adCounter == 2) 
193A:  MOVF   22,W
193C:  SUBLW  02
193E:  BNZ   1950
....................     { 
....................         ad2 = read_adc(); 
1940:  BSF    FC2.1
1942:  BTFSC  FC2.1
1944:  BRA    1942
1946:  MOVFF  FC3,1A
194A:  MOVFF  FC4,1B
....................     } 
194E:  BRA    1976
....................     else if (adCounter == 3) 
1950:  MOVF   22,W
1952:  SUBLW  03
1954:  BNZ   1966
....................     { 
....................         ad3 = read_adc(); 
1956:  BSF    FC2.1
1958:  BTFSC  FC2.1
195A:  BRA    1958
195C:  MOVFF  FC3,1C
1960:  MOVFF  FC4,1D
....................     } 
1964:  BRA    1976
....................     else 
....................     { 
....................         adCounter = 0; 
1966:  CLRF   22
....................         ad4 = read_adc(); 
1968:  BSF    FC2.1
196A:  BTFSC  FC2.1
196C:  BRA    196A
196E:  MOVFF  FC3,1E
1972:  MOVFF  FC4,1F
....................     } 
....................     if (timerBase == 2000) 
1976:  MOVF   20,W
1978:  SUBLW  D0
197A:  BNZ   19F6
197C:  MOVF   21,W
197E:  SUBLW  07
1980:  BNZ   19F6
....................     { 
....................         timerBase = 0; 
1982:  CLRF   21
1984:  CLRF   20
....................         ClearScreen(); 
1986:  BRA    11D2
....................         printf(lcd_escreve, "1: "); 
1988:  MOVLW  FC
198A:  MOVWF  FF6
198C:  MOVLW  1D
198E:  MOVWF  FF7
1990:  RCALL  11DC
....................         printf(lcd_escreve, "%04ld", ad1); 
1992:  MOVLW  0A
1994:  MOVWF  FE9
1996:  MOVFF  19,2F
199A:  MOVFF  18,2E
199E:  RCALL  11FC
....................         printf(lcd_escreve, " 2: "); 
19A0:  MOVLW  00
19A2:  MOVWF  FF6
19A4:  MOVLW  1E
19A6:  MOVWF  FF7
19A8:  RCALL  11DC
....................         printf(lcd_escreve, "%04ld", ad2); 
19AA:  MOVLW  0A
19AC:  MOVWF  FE9
19AE:  MOVFF  1B,2F
19B2:  MOVFF  1A,2E
19B6:  RCALL  11FC
....................         lcd_pos_xy(1, 2); 
19B8:  MOVLW  01
19BA:  MOVWF  38
19BC:  MOVLW  02
19BE:  MOVWF  39
19C0:  CALL   116A
....................         printf(lcd_escreve, "3: "); 
19C4:  MOVLW  06
19C6:  MOVWF  FF6
19C8:  MOVLW  1E
19CA:  MOVWF  FF7
19CC:  RCALL  11DC
....................         printf(lcd_escreve, "%04ld", ad3); 
19CE:  MOVLW  0A
19D0:  MOVWF  FE9
19D2:  MOVFF  1D,2F
19D6:  MOVFF  1C,2E
19DA:  RCALL  11FC
....................         printf(lcd_escreve, " 4: "); 
19DC:  MOVLW  0A
19DE:  MOVWF  FF6
19E0:  MOVLW  1E
19E2:  MOVWF  FF7
19E4:  CALL   11DC
....................         printf(lcd_escreve, "%04ld", ad4); 
19E8:  MOVLW  0A
19EA:  MOVWF  FE9
19EC:  MOVFF  1F,2F
19F0:  MOVFF  1E,2E
19F4:  RCALL  11FC
....................     } 
....................     timerBase++; 
19F6:  INCF   20,F
19F8:  BTFSC  FD8.2
19FA:  INCF   21,F
....................     adCounter++; 
19FC:  INCF   22,F
....................  
....................     set_adc_channel(adCounter); 
19FE:  RLCF   22,W
1A00:  MOVWF  00
1A02:  RLCF   00,F
1A04:  MOVLW  FC
1A06:  ANDWF  00,F
1A08:  MOVF   FC2,W
1A0A:  ANDLW  C3
1A0C:  IORWF  00,W
1A0E:  MOVWF  FC2
....................     if (running == 1) 
1A10:  DECFSZ 17,W
1A12:  BRA    1DF0
....................     { 
....................         ///alto significa escuro 
....................         if (ad1 + ad2 > 250) 
1A14:  MOVF   1A,W
1A16:  ADDWF  18,W
1A18:  MOVWF  2E
1A1A:  MOVF   1B,W
1A1C:  ADDWFC 19,W
1A1E:  MOVWF  2F
1A20:  MOVF   2F,F
1A22:  BNZ   1A2C
1A24:  MOVF   2E,W
1A26:  SUBLW  FA
1A28:  BTFSC  FD8.0
1A2A:  BRA    1DE8
....................         { 
....................             //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................             //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................             // 
....................             if ((float)ad1 / ad1 + ad2 < 0.48f) 
1A2C:  MOVFF  19,33
1A30:  MOVFF  18,32
1A34:  RCALL  12EE
1A36:  MOVFF  03,31
1A3A:  MOVFF  02,30
1A3E:  MOVFF  01,2F
1A42:  MOVFF  00,2E
1A46:  MOVFF  19,33
1A4A:  MOVFF  18,32
1A4E:  RCALL  12EE
1A50:  MOVFF  31,35
1A54:  MOVFF  30,34
1A58:  MOVFF  2F,33
1A5C:  MOVFF  2E,32
1A60:  MOVFF  03,39
1A64:  MOVFF  02,38
1A68:  MOVFF  01,37
1A6C:  MOVFF  00,36
1A70:  RCALL  1324
1A72:  MOVFF  03,31
1A76:  MOVFF  02,30
1A7A:  MOVFF  01,2F
1A7E:  MOVFF  00,2E
1A82:  MOVFF  1B,33
1A86:  MOVFF  1A,32
1A8A:  RCALL  12EE
1A8C:  BCF    FD8.1
1A8E:  MOVFF  31,35
1A92:  MOVFF  30,34
1A96:  MOVFF  2F,33
1A9A:  MOVFF  2E,32
1A9E:  MOVFF  03,39
1AA2:  MOVFF  02,38
1AA6:  MOVFF  01,37
1AAA:  MOVFF  00,36
1AAE:  RCALL  147E
1AB0:  MOVFF  03,31
1AB4:  MOVFF  02,30
1AB8:  MOVFF  01,2F
1ABC:  MOVFF  00,2E
1AC0:  MOVFF  03,35
1AC4:  MOVFF  02,34
1AC8:  MOVFF  01,33
1ACC:  MOVFF  00,32
1AD0:  MOVLW  8F
1AD2:  MOVWF  39
1AD4:  MOVLW  C2
1AD6:  MOVWF  38
1AD8:  MOVLW  75
1ADA:  MOVWF  37
1ADC:  MOVLW  7D
1ADE:  MOVWF  36
1AE0:  RCALL  16E8
1AE2:  BTFSS  FD8.0
1AE4:  BRA    1BFE
....................             { 
....................                 SetRight(1023); 
1AE6:  MOVLW  03
1AE8:  MOVWF  31
1AEA:  SETF   30
1AEC:  RCALL  175E
....................                 SetLeft((((float)ad1 / ad1 + ad2) * 200) + 800); 
1AEE:  MOVFF  19,33
1AF2:  MOVFF  18,32
1AF6:  CALL   12EE
1AFA:  MOVFF  03,31
1AFE:  MOVFF  02,30
1B02:  MOVFF  01,2F
1B06:  MOVFF  00,2E
1B0A:  MOVFF  19,33
1B0E:  MOVFF  18,32
1B12:  CALL   12EE
1B16:  MOVFF  31,35
1B1A:  MOVFF  30,34
1B1E:  MOVFF  2F,33
1B22:  MOVFF  2E,32
1B26:  MOVFF  03,39
1B2A:  MOVFF  02,38
1B2E:  MOVFF  01,37
1B32:  MOVFF  00,36
1B36:  CALL   1324
1B3A:  MOVFF  03,31
1B3E:  MOVFF  02,30
1B42:  MOVFF  01,2F
1B46:  MOVFF  00,2E
1B4A:  MOVFF  1B,33
1B4E:  MOVFF  1A,32
1B52:  CALL   12EE
1B56:  BCF    FD8.1
1B58:  MOVFF  31,35
1B5C:  MOVFF  30,34
1B60:  MOVFF  2F,33
1B64:  MOVFF  2E,32
1B68:  MOVFF  03,39
1B6C:  MOVFF  02,38
1B70:  MOVFF  01,37
1B74:  MOVFF  00,36
1B78:  RCALL  147E
1B7A:  MOVFF  03,31
1B7E:  MOVFF  02,30
1B82:  MOVFF  01,2F
1B86:  MOVFF  00,2E
1B8A:  MOVFF  03,35
1B8E:  MOVFF  02,34
1B92:  MOVFF  01,33
1B96:  MOVFF  00,32
1B9A:  CLRF   39
1B9C:  CLRF   38
1B9E:  MOVLW  48
1BA0:  MOVWF  37
1BA2:  MOVLW  86
1BA4:  MOVWF  36
1BA6:  RCALL  1786
1BA8:  MOVFF  03,31
1BAC:  MOVFF  02,30
1BB0:  MOVFF  01,2F
1BB4:  MOVFF  00,2E
1BB8:  BCF    FD8.1
1BBA:  MOVFF  03,35
1BBE:  MOVFF  02,34
1BC2:  MOVFF  01,33
1BC6:  MOVFF  00,32
1BCA:  CLRF   39
1BCC:  CLRF   38
1BCE:  MOVLW  48
1BD0:  MOVWF  37
1BD2:  MOVLW  88
1BD4:  MOVWF  36
1BD6:  RCALL  147E
1BD8:  MOVFF  03,31
1BDC:  MOVFF  02,30
1BE0:  MOVFF  01,2F
1BE4:  MOVFF  00,2E
1BE8:  RCALL  1878
1BEA:  MOVFF  02,2F
1BEE:  MOVFF  01,2E
1BF2:  MOVFF  02,31
1BF6:  MOVFF  01,30
1BFA:  RCALL  18B0
....................             } 
1BFC:  BRA    1DE6
....................             else if ((float)ad2 / ad1 + ad2 < 0.48f) 
1BFE:  MOVFF  1B,33
1C02:  MOVFF  1A,32
1C06:  CALL   12EE
1C0A:  MOVFF  03,31
1C0E:  MOVFF  02,30
1C12:  MOVFF  01,2F
1C16:  MOVFF  00,2E
1C1A:  MOVFF  19,33
1C1E:  MOVFF  18,32
1C22:  CALL   12EE
1C26:  MOVFF  31,35
1C2A:  MOVFF  30,34
1C2E:  MOVFF  2F,33
1C32:  MOVFF  2E,32
1C36:  MOVFF  03,39
1C3A:  MOVFF  02,38
1C3E:  MOVFF  01,37
1C42:  MOVFF  00,36
1C46:  CALL   1324
1C4A:  MOVFF  03,31
1C4E:  MOVFF  02,30
1C52:  MOVFF  01,2F
1C56:  MOVFF  00,2E
1C5A:  MOVFF  1B,33
1C5E:  MOVFF  1A,32
1C62:  CALL   12EE
1C66:  BCF    FD8.1
1C68:  MOVFF  31,35
1C6C:  MOVFF  30,34
1C70:  MOVFF  2F,33
1C74:  MOVFF  2E,32
1C78:  MOVFF  03,39
1C7C:  MOVFF  02,38
1C80:  MOVFF  01,37
1C84:  MOVFF  00,36
1C88:  CALL   147E
1C8C:  MOVFF  03,31
1C90:  MOVFF  02,30
1C94:  MOVFF  01,2F
1C98:  MOVFF  00,2E
1C9C:  MOVFF  03,35
1CA0:  MOVFF  02,34
1CA4:  MOVFF  01,33
1CA8:  MOVFF  00,32
1CAC:  MOVLW  8F
1CAE:  MOVWF  39
1CB0:  MOVLW  C2
1CB2:  MOVWF  38
1CB4:  MOVLW  75
1CB6:  MOVWF  37
1CB8:  MOVLW  7D
1CBA:  MOVWF  36
1CBC:  RCALL  16E8
1CBE:  BTFSS  FD8.0
1CC0:  BRA    1DDE
....................             { 
....................                 SetLeft(1023); 
1CC2:  MOVLW  03
1CC4:  MOVWF  31
1CC6:  SETF   30
1CC8:  RCALL  18B0
....................                 SetRight((((float)ad2 / ad1 + ad2) * 200) + 800); 
1CCA:  MOVFF  1B,33
1CCE:  MOVFF  1A,32
1CD2:  CALL   12EE
1CD6:  MOVFF  03,31
1CDA:  MOVFF  02,30
1CDE:  MOVFF  01,2F
1CE2:  MOVFF  00,2E
1CE6:  MOVFF  19,33
1CEA:  MOVFF  18,32
1CEE:  CALL   12EE
1CF2:  MOVFF  31,35
1CF6:  MOVFF  30,34
1CFA:  MOVFF  2F,33
1CFE:  MOVFF  2E,32
1D02:  MOVFF  03,39
1D06:  MOVFF  02,38
1D0A:  MOVFF  01,37
1D0E:  MOVFF  00,36
1D12:  CALL   1324
1D16:  MOVFF  03,31
1D1A:  MOVFF  02,30
1D1E:  MOVFF  01,2F
1D22:  MOVFF  00,2E
1D26:  MOVFF  1B,33
1D2A:  MOVFF  1A,32
1D2E:  CALL   12EE
1D32:  BCF    FD8.1
1D34:  MOVFF  31,35
1D38:  MOVFF  30,34
1D3C:  MOVFF  2F,33
1D40:  MOVFF  2E,32
1D44:  MOVFF  03,39
1D48:  MOVFF  02,38
1D4C:  MOVFF  01,37
1D50:  MOVFF  00,36
1D54:  CALL   147E
1D58:  MOVFF  03,31
1D5C:  MOVFF  02,30
1D60:  MOVFF  01,2F
1D64:  MOVFF  00,2E
1D68:  MOVFF  03,35
1D6C:  MOVFF  02,34
1D70:  MOVFF  01,33
1D74:  MOVFF  00,32
1D78:  CLRF   39
1D7A:  CLRF   38
1D7C:  MOVLW  48
1D7E:  MOVWF  37
1D80:  MOVLW  86
1D82:  MOVWF  36
1D84:  RCALL  1786
1D86:  MOVFF  03,31
1D8A:  MOVFF  02,30
1D8E:  MOVFF  01,2F
1D92:  MOVFF  00,2E
1D96:  BCF    FD8.1
1D98:  MOVFF  03,35
1D9C:  MOVFF  02,34
1DA0:  MOVFF  01,33
1DA4:  MOVFF  00,32
1DA8:  CLRF   39
1DAA:  CLRF   38
1DAC:  MOVLW  48
1DAE:  MOVWF  37
1DB0:  MOVLW  88
1DB2:  MOVWF  36
1DB4:  CALL   147E
1DB8:  MOVFF  03,31
1DBC:  MOVFF  02,30
1DC0:  MOVFF  01,2F
1DC4:  MOVFF  00,2E
1DC8:  RCALL  1878
1DCA:  MOVFF  02,2F
1DCE:  MOVFF  01,2E
1DD2:  MOVFF  02,31
1DD6:  MOVFF  01,30
1DDA:  RCALL  175E
....................             } 
1DDC:  BRA    1DE6
....................             else 
....................             { 
....................                 SetBothPwm(1023); 
1DDE:  MOVLW  03
1DE0:  MOVWF  2F
1DE2:  SETF   2E
1DE4:  RCALL  18D8
....................             } 
....................         } 
1DE6:  BRA    1DEE
....................         else 
....................         { 
....................             SetBothPwm(0); 
1DE8:  CLRF   2F
1DEA:  CLRF   2E
1DEC:  RCALL  18D8
....................         } 
....................     } 
1DEE:  BRA    1DF6
....................  
....................     ///Seta para pegar no proximo tick 
....................     else 
....................     { 
....................         SetBothPwm(0); 
1DF0:  CLRF   2F
1DF2:  CLRF   2E
1DF4:  RCALL  18D8
....................     } 
1DF6:  BCF    FF2.2
1DF8:  GOTO   1054
.................... } 
....................  
.................... void main() 
*
1F46:  CLRF   FF8
1F48:  BCF    FD0.7
1F4A:  BSF    07.7
1F4C:  MOVF   FC1,W
1F4E:  ANDLW  C0
1F50:  IORLW  0F
1F52:  MOVWF  FC1
1F54:  MOVLW  07
1F56:  MOVWF  FB4
.................... { 
....................     Setup(); 
1F58:  BRA    1F02
1F5A:  CLRF   16
1F5C:  BTFSC  FF2.7
1F5E:  BSF    16.7
1F60:  BCF    FF2.7
....................     lcd_pos_xy(1, 1); 
1F62:  MOVLW  01
1F64:  MOVWF  38
1F66:  MOVWF  39
1F68:  CALL   116A
1F6C:  BTFSC  16.7
1F6E:  BSF    FF2.7
....................     printf(lcd_escreve, " Inicializando"); 
1F70:  MOVLW  10
1F72:  MOVWF  FF6
1F74:  MOVLW  1E
1F76:  MOVWF  FF7
1F78:  CLRF   16
1F7A:  BTFSC  FF2.7
1F7C:  BSF    16.7
1F7E:  BCF    FF2.7
1F80:  CALL   11DC
1F84:  BTFSC  16.7
1F86:  BSF    FF2.7
....................     delay_ms(1000); 
1F88:  MOVLW  04
1F8A:  MOVWF  23
1F8C:  CLRF   16
1F8E:  BTFSC  FF2.7
1F90:  BSF    16.7
1F92:  BCF    FF2.7
1F94:  MOVLW  FA
1F96:  MOVWF  38
1F98:  CALL   1142
1F9C:  BTFSC  16.7
1F9E:  BSF    FF2.7
1FA0:  DECFSZ 23,F
1FA2:  BRA    1F8C
....................  
....................     do 
....................     { 
....................         if (input(button1) == 0) 
1FA4:  BSF    F92.4
1FA6:  BTFSC  F80.4
1FA8:  BRA    1FAE
....................         { 
....................             running = 1; 
1FAA:  MOVLW  01
1FAC:  MOVWF  17
....................         } 
....................         if (input(button2) == 0) 
1FAE:  BSF    F92.5
1FB0:  BTFSC  F80.5
1FB2:  BRA    1FB6
....................         { 
....................             running = 0; 
1FB4:  CLRF   17
....................         } 
....................     } while (1); 
1FB6:  BRA    1FA4
.................... } 
....................  
1FB8:  SLEEP 
.................... void Setup() 
.................... { 
....................     adCounter = 1; 
*
1F02:  MOVLW  01
1F04:  MOVWF  22
....................     running = 0; 
1F06:  CLRF   17
....................  
....................     setup_adc_ports(AN0_TO_AN3); 
1F08:  MOVF   FC1,W
1F0A:  ANDLW  C0
1F0C:  IORLW  0B
1F0E:  MOVWF  FC1
....................     setup_adc(ADC_CLOCK_DIV_4); 
1F10:  MOVF   FC0,W
1F12:  ANDLW  C0
1F14:  IORLW  04
1F16:  MOVWF  FC0
1F18:  BSF    FC0.7
1F1A:  BSF    FC2.0
....................  
....................     setup_timer_0(RTCC_INTERNAL | RTCC_DIV_2 | RTCC_8_BIT); 
1F1C:  MOVLW  C0
1F1E:  MOVWF  FD5
....................     set_timer0(0); 
1F20:  CLRF   FD7
1F22:  CLRF   FD6
....................     enable_interrupts(INT_TIMER0); 
1F24:  BSF    FF2.5
....................     enable_interrupts(GLOBAL); 
1F26:  IORWF  FF2,F
....................  
....................     lcd_ini(); 
1F28:  BRA    1E20
....................     MotorInitialize(); 
1F2A:  BRA    1ECE
1F2C:  CLRF   16
1F2E:  BTFSC  FF2.7
1F30:  BSF    16.7
1F32:  BCF    FF2.7
....................     SetBothPwm(1023); 
1F34:  MOVLW  03
1F36:  MOVWF  2F
1F38:  SETF   2E
1F3A:  RCALL  18D8
1F3C:  BTFSC  16.7
1F3E:  BSF    FF2.7
....................     frente(); 
1F40:  BRA    1EEE
1F42:  GOTO   1F5A (RETURN)
.................... } 
....................  
.................... void ClearScreen() 
.................... { 
....................     lcd_escreve('\f'); 
*
11D2:  MOVLW  0C
11D4:  MOVWF  37
11D6:  RCALL  118C
11D8:  GOTO   1988 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
