CCS PCH C Compiler, Version 5.015, 5967               12-nov-18 00:30

               Filename:   D:\Projetos\Imposto\Source Code\main.lst

               ROM used:   3948 bytes (12%)
                           Largest free fragment is 24720
               RAM used:   41 (2%) at main() level
                           80 (4%) worst case
               Stack used: 8 locations (6 in main + 2 for interrupts)
               Stack size: 31

*
1000:  GOTO   1E84
*
1008:  MOVWF  04
100A:  MOVFF  FD8,05
100E:  MOVFF  FE0,06
1012:  MOVLB  0
1014:  MOVFF  FE9,0C
1018:  MOVFF  FEA,07
101C:  MOVFF  FE1,08
1020:  MOVFF  FE2,09
1024:  MOVFF  FD9,0A
1028:  MOVFF  FDA,0B
102C:  MOVFF  FF3,12
1030:  MOVFF  FF4,13
1034:  MOVFF  FFA,14
1038:  MOVFF  00,0E
103C:  MOVFF  01,0F
1040:  MOVFF  02,10
1044:  MOVFF  03,11
1048:  BTFSS  FF2.5
104A:  GOTO   1054
104E:  BTFSC  FF2.2
1050:  GOTO   112C
1054:  MOVFF  0E,00
1058:  MOVFF  0F,01
105C:  MOVFF  10,02
1060:  MOVFF  11,03
1064:  MOVFF  0C,FE9
1068:  MOVFF  07,FEA
106C:  BSF    07.7
106E:  MOVFF  08,FE1
1072:  MOVFF  09,FE2
1076:  MOVFF  0A,FD9
107A:  MOVFF  0B,FDA
107E:  MOVFF  12,FF3
1082:  MOVFF  13,FF4
1086:  MOVFF  14,FFA
108A:  MOVF   04,W
108C:  MOVFF  06,FE0
1090:  MOVFF  05,FD8
1094:  RETFIE 0
.................... #include <main.h> 
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
1096:  MOVFF  FF2,0D
109A:  BCF    FF2.7
109C:  CLRF   FF7
109E:  ADDLW  B0
10A0:  MOVWF  FF6
10A2:  MOVLW  10
10A4:  ADDWFC FF7,F
10A6:  TBLRD*+
10A8:  MOVF   FF5,W
10AA:  BTFSC  0D.7
10AC:  BSF    FF2.7
10AE:  RETURN 0
10B0:  DATA 28,0C
10B2:  DATA 01,06
10B4:  DATA 45,73
10B6:  DATA 74,61
10B8:  DATA 20,61
10BA:  DATA 20,64
10BC:  DATA 69,72
10BE:  DATA 65,69
10C0:  DATA 74,61
10C2:  DATA 00,00
10C4:  DATA 45,73
10C6:  DATA 74,61
10C8:  DATA 20,61
10CA:  DATA 20,65
10CC:  DATA 73,71
10CE:  DATA 75,65
10D0:  DATA 72,64
10D2:  DATA 61,00
10D4:  DATA 53,65
10D6:  DATA 20,70
10D8:  DATA 65,72
10DA:  DATA 64,65
10DC:  DATA 75,00
10DE:  DATA 45,73
10E0:  DATA 74,61
10E2:  DATA 20,61
10E4:  DATA 20,64
10E6:  DATA 69,72
10E8:  DATA 65,69
10EA:  DATA 74,61
10EC:  DATA 00,00
10EE:  DATA 45,73
10F0:  DATA 74,61
10F2:  DATA 20,61
10F4:  DATA 20,65
10F6:  DATA 73,71
10F8:  DATA 75,65
10FA:  DATA 72,64
10FC:  DATA 61,00
10FE:  DATA 53,65
1100:  DATA 20,70
1102:  DATA 65,72
1104:  DATA 64,65
1106:  DATA 75,00
*
1200:  DATA 20,49
1202:  DATA 6E,69
1204:  DATA 63,69
1206:  DATA 61,6C
1208:  DATA 69,7A
120A:  DATA 61,6E
120C:  DATA 64,6F
120E:  DATA 00,00
1210:  DATA 20,64
1212:  DATA 3A,20
1214:  DATA 25,64
1216:  DATA 00,00
1218:  DATA 20,63
121A:  DATA 3A,20
121C:  DATA 25,64
121E:  DATA 00,00
*
13F4:  TBLRD*+
13F6:  MOVF   FF5,F
13F8:  BZ    1412
13FA:  MOVFF  FF6,34
13FE:  MOVFF  FF7,35
1402:  MOVFF  FF5,36
1406:  RCALL  13AE
1408:  MOVFF  34,FF6
140C:  MOVFF  35,FF7
1410:  BRA    13F4
1412:  RETURN 0
*
141E:  TBLRD*+
1420:  MOVFF  FF6,29
1424:  MOVFF  FF7,2A
1428:  MOVFF  FF5,36
142C:  RCALL  13AE
142E:  MOVFF  29,FF6
1432:  MOVFF  2A,FF7
1436:  DECFSZ 28,F
1438:  BRA    141E
143A:  RETURN 0
143C:  MOVF   2F,W
143E:  CLRF   01
1440:  SUBWF  2E,W
1442:  BC    144A
1444:  MOVFF  2E,00
1448:  BRA    1462
144A:  CLRF   00
144C:  MOVLW  08
144E:  MOVWF  30
1450:  RLCF   2E,F
1452:  RLCF   00,F
1454:  MOVF   2F,W
1456:  SUBWF  00,W
1458:  BTFSC  FD8.0
145A:  MOVWF  00
145C:  RLCF   01,F
145E:  DECFSZ 30,F
1460:  BRA    1450
1462:  RETURN 0
1464:  MOVLW  20
1466:  BTFSS  29.4
1468:  MOVLW  30
146A:  MOVWF  2A
146C:  MOVFF  28,00
1470:  BTFSS  28.7
1472:  BRA    1484
1474:  COMF   00,F
1476:  INCF   00,F
1478:  MOVFF  00,28
147C:  MOVLW  2D
147E:  MOVWF  2A
1480:  BSF    29.7
1482:  BSF    29.0
1484:  MOVF   01,W
1486:  MOVFF  28,2E
148A:  MOVLW  64
148C:  MOVWF  2F
148E:  RCALL  143C
1490:  MOVFF  00,28
1494:  MOVLW  30
1496:  ADDWF  01,W
1498:  MOVWF  2B
149A:  MOVFF  28,2E
149E:  MOVLW  0A
14A0:  MOVWF  2F
14A2:  RCALL  143C
14A4:  MOVLW  30
14A6:  ADDWF  00,W
14A8:  MOVWF  2D
14AA:  MOVLW  30
14AC:  ADDWF  01,W
14AE:  MOVWF  2C
14B0:  MOVFF  2A,00
14B4:  MOVLW  30
14B6:  SUBWF  2B,W
14B8:  BZ    14C2
14BA:  BSF    29.1
14BC:  BTFSC  29.7
14BE:  BSF    29.2
14C0:  BRA    14E6
14C2:  MOVFF  2A,2B
14C6:  MOVLW  20
14C8:  MOVWF  2A
14CA:  MOVLW  30
14CC:  SUBWF  2C,W
14CE:  BZ    14D8
14D0:  BSF    29.0
14D2:  BTFSC  29.7
14D4:  BSF    29.1
14D6:  BRA    14E6
14D8:  BTFSS  FD8.2
14DA:  BSF    29.0
14DC:  BNZ   14E6
14DE:  MOVFF  2B,2C
14E2:  MOVLW  20
14E4:  MOVWF  2B
14E6:  BTFSC  29.2
14E8:  BRA    14F4
14EA:  BTFSC  29.1
14EC:  BRA    14FA
14EE:  BTFSC  29.0
14F0:  BRA    1500
14F2:  BRA    1506
14F4:  MOVFF  2A,36
14F8:  RCALL  13AE
14FA:  MOVFF  2B,36
14FE:  RCALL  13AE
1500:  MOVFF  2C,36
1504:  RCALL  13AE
1506:  MOVFF  2D,36
150A:  RCALL  13AE
150C:  RETURN 0
150E:  MOVLW  8E
1510:  MOVWF  00
1512:  MOVFF  39,01
1516:  MOVFF  38,02
151A:  CLRF   03
151C:  MOVF   01,F
151E:  BNZ   1532
1520:  MOVFF  02,01
1524:  CLRF   02
1526:  MOVLW  08
1528:  SUBWF  00,F
152A:  MOVF   01,F
152C:  BNZ   1532
152E:  CLRF   00
1530:  BRA    1542
1532:  BCF    FD8.0
1534:  BTFSC  01.7
1536:  BRA    1540
1538:  RLCF   02,F
153A:  RLCF   01,F
153C:  DECF   00,F
153E:  BRA    1532
1540:  BCF    01.7
1542:  RETURN 0
1544:  MOVF   38,W
1546:  BTFSC  FD8.2
1548:  BRA    1694
154A:  MOVWF  44
154C:  MOVF   3C,W
154E:  BTFSC  FD8.2
1550:  BRA    1694
1552:  SUBWF  44,F
1554:  BNC   1560
1556:  MOVLW  7F
1558:  ADDWF  44,F
155A:  BTFSC  FD8.0
155C:  BRA    1694
155E:  BRA    156C
1560:  MOVLW  81
1562:  SUBWF  44,F
1564:  BTFSS  FD8.0
1566:  BRA    1694
1568:  BTFSC  FD8.2
156A:  BRA    1694
156C:  MOVFF  44,00
1570:  CLRF   01
1572:  CLRF   02
1574:  CLRF   03
1576:  CLRF   43
1578:  MOVFF  39,42
157C:  BSF    42.7
157E:  MOVFF  3A,41
1582:  MOVFF  3B,40
1586:  MOVLW  19
1588:  MOVWF  44
158A:  MOVF   3F,W
158C:  SUBWF  40,F
158E:  BC    15AA
1590:  MOVLW  01
1592:  SUBWF  41,F
1594:  BC    15AA
1596:  SUBWF  42,F
1598:  BC    15AA
159A:  SUBWF  43,F
159C:  BC    15AA
159E:  INCF   43,F
15A0:  INCF   42,F
15A2:  INCF   41,F
15A4:  MOVF   3F,W
15A6:  ADDWF  40,F
15A8:  BRA    15FA
15AA:  MOVF   3E,W
15AC:  SUBWF  41,F
15AE:  BC    15D4
15B0:  MOVLW  01
15B2:  SUBWF  42,F
15B4:  BC    15D4
15B6:  SUBWF  43,F
15B8:  BC    15D4
15BA:  INCF   43,F
15BC:  INCF   42,F
15BE:  MOVF   3E,W
15C0:  ADDWF  41,F
15C2:  MOVF   3F,W
15C4:  ADDWF  40,F
15C6:  BNC   15FA
15C8:  INCF   41,F
15CA:  BNZ   15FA
15CC:  INCF   42,F
15CE:  BNZ   15FA
15D0:  INCF   43,F
15D2:  BRA    15FA
15D4:  MOVF   3D,W
15D6:  IORLW  80
15D8:  SUBWF  42,F
15DA:  BC    15F8
15DC:  MOVLW  01
15DE:  SUBWF  43,F
15E0:  BC    15F8
15E2:  INCF   43,F
15E4:  MOVF   3D,W
15E6:  IORLW  80
15E8:  ADDWF  42,F
15EA:  MOVF   3E,W
15EC:  ADDWF  41,F
15EE:  BNC   15C2
15F0:  INCF   42,F
15F2:  BNZ   15C2
15F4:  INCF   43,F
15F6:  BRA    15C2
15F8:  BSF    03.0
15FA:  DECFSZ 44,F
15FC:  BRA    1600
15FE:  BRA    1616
1600:  BCF    FD8.0
1602:  RLCF   40,F
1604:  RLCF   41,F
1606:  RLCF   42,F
1608:  RLCF   43,F
160A:  BCF    FD8.0
160C:  RLCF   03,F
160E:  RLCF   02,F
1610:  RLCF   01,F
1612:  RLCF   45,F
1614:  BRA    158A
1616:  BTFSS  45.0
1618:  BRA    1626
161A:  BCF    FD8.0
161C:  RRCF   01,F
161E:  RRCF   02,F
1620:  RRCF   03,F
1622:  RRCF   45,F
1624:  BRA    162A
1626:  DECF   00,F
1628:  BZ    1694
162A:  BTFSC  45.7
162C:  BRA    166A
162E:  BCF    FD8.0
1630:  RLCF   40,F
1632:  RLCF   41,F
1634:  RLCF   42,F
1636:  RLCF   43,F
1638:  MOVF   3F,W
163A:  SUBWF  40,F
163C:  BC    164C
163E:  MOVLW  01
1640:  SUBWF  41,F
1642:  BC    164C
1644:  SUBWF  42,F
1646:  BC    164C
1648:  SUBWF  43,F
164A:  BNC   1680
164C:  MOVF   3E,W
164E:  SUBWF  41,F
1650:  BC    165C
1652:  MOVLW  01
1654:  SUBWF  42,F
1656:  BC    165C
1658:  SUBWF  43,F
165A:  BNC   1680
165C:  MOVF   3D,W
165E:  IORLW  80
1660:  SUBWF  42,F
1662:  BC    166A
1664:  MOVLW  01
1666:  SUBWF  43,F
1668:  BNC   1680
166A:  INCF   03,F
166C:  BNZ   1680
166E:  INCF   02,F
1670:  BNZ   1680
1672:  INCF   01,F
1674:  BNZ   1680
1676:  INCF   00,F
1678:  BZ    1694
167A:  RRCF   01,F
167C:  RRCF   02,F
167E:  RRCF   03,F
1680:  MOVFF  39,44
1684:  MOVF   3D,W
1686:  XORWF  44,F
1688:  BTFSS  44.7
168A:  BRA    1690
168C:  BSF    01.7
168E:  BRA    169C
1690:  BCF    01.7
1692:  BRA    169C
1694:  CLRF   00
1696:  CLRF   01
1698:  CLRF   02
169A:  CLRF   03
169C:  RETURN 0
169E:  MOVFF  35,3C
16A2:  MOVF   39,W
16A4:  XORWF  3C,F
16A6:  BTFSS  3C.7
16A8:  BRA    16B4
16AA:  BCF    FD8.2
16AC:  BCF    FD8.0
16AE:  BTFSC  35.7
16B0:  BSF    FD8.0
16B2:  BRA    1712
16B4:  MOVFF  35,3C
16B8:  MOVFF  38,3D
16BC:  MOVF   34,W
16BE:  SUBWF  3D,F
16C0:  BZ    16CE
16C2:  BTFSS  3C.7
16C4:  BRA    1712
16C6:  MOVF   FD8,W
16C8:  XORLW  01
16CA:  MOVWF  FD8
16CC:  BRA    1712
16CE:  MOVFF  39,3D
16D2:  MOVF   35,W
16D4:  SUBWF  3D,F
16D6:  BZ    16E4
16D8:  BTFSS  3C.7
16DA:  BRA    1712
16DC:  MOVF   FD8,W
16DE:  XORLW  01
16E0:  MOVWF  FD8
16E2:  BRA    1712
16E4:  MOVFF  3A,3D
16E8:  MOVF   36,W
16EA:  SUBWF  3D,F
16EC:  BZ    16FA
16EE:  BTFSS  3C.7
16F0:  BRA    1712
16F2:  MOVF   FD8,W
16F4:  XORLW  01
16F6:  MOVWF  FD8
16F8:  BRA    1712
16FA:  MOVFF  3B,3D
16FE:  MOVF   37,W
1700:  SUBWF  3D,F
1702:  BZ    1710
1704:  BTFSS  3C.7
1706:  BRA    1712
1708:  MOVF   FD8,W
170A:  XORLW  01
170C:  MOVWF  FD8
170E:  BRA    1712
1710:  BCF    FD8.0
1712:  RETURN 0
*
178A:  MOVF   34,W
178C:  BTFSC  FD8.2
178E:  BRA    1872
1790:  MOVWF  00
1792:  MOVF   38,W
1794:  BTFSC  FD8.2
1796:  BRA    1872
1798:  ADDWF  00,F
179A:  BNC   17A4
179C:  MOVLW  81
179E:  ADDWF  00,F
17A0:  BC    1872
17A2:  BRA    17AC
17A4:  MOVLW  7F
17A6:  SUBWF  00,F
17A8:  BNC   1872
17AA:  BZ    1872
17AC:  MOVFF  35,3C
17B0:  MOVF   39,W
17B2:  XORWF  3C,F
17B4:  BSF    35.7
17B6:  BSF    39.7
17B8:  MOVF   37,W
17BA:  MULWF  3B
17BC:  MOVFF  FF4,3E
17C0:  MOVF   36,W
17C2:  MULWF  3A
17C4:  MOVFF  FF4,03
17C8:  MOVFF  FF3,3D
17CC:  MULWF  3B
17CE:  MOVF   FF3,W
17D0:  ADDWF  3E,F
17D2:  MOVF   FF4,W
17D4:  ADDWFC 3D,F
17D6:  MOVLW  00
17D8:  ADDWFC 03,F
17DA:  MOVF   37,W
17DC:  MULWF  3A
17DE:  MOVF   FF3,W
17E0:  ADDWF  3E,F
17E2:  MOVF   FF4,W
17E4:  ADDWFC 3D,F
17E6:  MOVLW  00
17E8:  CLRF   02
17EA:  ADDWFC 03,F
17EC:  ADDWFC 02,F
17EE:  MOVF   35,W
17F0:  MULWF  3B
17F2:  MOVF   FF3,W
17F4:  ADDWF  3D,F
17F6:  MOVF   FF4,W
17F8:  ADDWFC 03,F
17FA:  MOVLW  00
17FC:  ADDWFC 02,F
17FE:  MOVF   35,W
1800:  MULWF  3A
1802:  MOVF   FF3,W
1804:  ADDWF  03,F
1806:  MOVF   FF4,W
1808:  ADDWFC 02,F
180A:  MOVLW  00
180C:  CLRF   01
180E:  ADDWFC 01,F
1810:  MOVF   37,W
1812:  MULWF  39
1814:  MOVF   FF3,W
1816:  ADDWF  3D,F
1818:  MOVF   FF4,W
181A:  ADDWFC 03,F
181C:  MOVLW  00
181E:  ADDWFC 02,F
1820:  ADDWFC 01,F
1822:  MOVF   36,W
1824:  MULWF  39
1826:  MOVF   FF3,W
1828:  ADDWF  03,F
182A:  MOVF   FF4,W
182C:  ADDWFC 02,F
182E:  MOVLW  00
1830:  ADDWFC 01,F
1832:  MOVF   35,W
1834:  MULWF  39
1836:  MOVF   FF3,W
1838:  ADDWF  02,F
183A:  MOVF   FF4,W
183C:  ADDWFC 01,F
183E:  INCF   00,F
1840:  BTFSC  01.7
1842:  BRA    184E
1844:  RLCF   3D,F
1846:  RLCF   03,F
1848:  RLCF   02,F
184A:  RLCF   01,F
184C:  DECF   00,F
184E:  MOVLW  00
1850:  BTFSS  3D.7
1852:  BRA    1868
1854:  INCF   03,F
1856:  ADDWFC 02,F
1858:  ADDWFC 01,F
185A:  MOVF   01,W
185C:  BNZ   1868
185E:  MOVF   02,W
1860:  BNZ   1868
1862:  MOVF   03,W
1864:  BNZ   1868
1866:  INCF   00,F
1868:  BTFSC  3C.7
186A:  BSF    01.7
186C:  BTFSS  3C.7
186E:  BCF    01.7
1870:  BRA    187A
1872:  CLRF   00
1874:  CLRF   01
1876:  CLRF   02
1878:  CLRF   03
187A:  RETURN 0
187C:  MOVLW  80
187E:  BTFSC  FD8.1
1880:  XORWF  3D,F
1882:  CLRF   42
1884:  CLRF   43
1886:  MOVFF  39,41
188A:  MOVF   3D,W
188C:  XORWF  41,F
188E:  MOVF   38,W
1890:  BTFSC  FD8.2
1892:  BRA    1A4C
1894:  MOVWF  40
1896:  MOVWF  00
1898:  MOVF   3C,W
189A:  BTFSC  FD8.2
189C:  BRA    1A5E
189E:  SUBWF  40,F
18A0:  BTFSC  FD8.2
18A2:  BRA    19A6
18A4:  BNC   1920
18A6:  MOVFF  3D,46
18AA:  BSF    46.7
18AC:  MOVFF  3E,45
18B0:  MOVFF  3F,44
18B4:  CLRF   43
18B6:  BCF    FD8.0
18B8:  RRCF   46,F
18BA:  RRCF   45,F
18BC:  RRCF   44,F
18BE:  RRCF   43,F
18C0:  DECFSZ 40,F
18C2:  BRA    18B4
18C4:  BTFSS  41.7
18C6:  BRA    18CE
18C8:  BSF    42.0
18CA:  BRA    1A86
18CC:  BCF    42.0
18CE:  BCF    40.0
18D0:  BSF    42.4
18D2:  CLRF   FEA
18D4:  MOVLW  3B
18D6:  MOVWF  FE9
18D8:  BRA    1AAC
18DA:  BCF    42.4
18DC:  BTFSC  41.7
18DE:  BRA    18F4
18E0:  BTFSS  40.0
18E2:  BRA    190A
18E4:  RRCF   46,F
18E6:  RRCF   45,F
18E8:  RRCF   44,F
18EA:  RRCF   43,F
18EC:  INCF   00,F
18EE:  BTFSC  FD8.2
18F0:  BRA    1A7C
18F2:  BRA    190A
18F4:  BTFSC  46.7
18F6:  BRA    1910
18F8:  BCF    FD8.0
18FA:  RLCF   43,F
18FC:  RLCF   44,F
18FE:  RLCF   45,F
1900:  RLCF   46,F
1902:  DECF   00,F
1904:  BTFSC  FD8.2
1906:  BRA    1A7C
1908:  BRA    18F4
190A:  BSF    42.6
190C:  BRA    19E4
190E:  BCF    42.6
1910:  MOVFF  39,41
1914:  BTFSS  39.7
1916:  BRA    191C
1918:  BSF    46.7
191A:  BRA    1A6E
191C:  BCF    46.7
191E:  BRA    1A6E
1920:  MOVFF  3C,40
1924:  MOVFF  3C,00
1928:  MOVF   38,W
192A:  SUBWF  40,F
192C:  MOVFF  39,46
1930:  BSF    46.7
1932:  MOVFF  3A,45
1936:  MOVFF  3B,44
193A:  CLRF   43
193C:  BCF    FD8.0
193E:  RRCF   46,F
1940:  RRCF   45,F
1942:  RRCF   44,F
1944:  RRCF   43,F
1946:  DECFSZ 40,F
1948:  BRA    193A
194A:  BTFSS  41.7
194C:  BRA    1954
194E:  BSF    42.1
1950:  BRA    1A86
1952:  BCF    42.1
1954:  BCF    40.0
1956:  BSF    42.5
1958:  CLRF   FEA
195A:  MOVLW  3F
195C:  MOVWF  FE9
195E:  BRA    1AAC
1960:  BCF    42.5
1962:  BTFSC  41.7
1964:  BRA    197A
1966:  BTFSS  40.0
1968:  BRA    1990
196A:  RRCF   46,F
196C:  RRCF   45,F
196E:  RRCF   44,F
1970:  RRCF   43,F
1972:  INCF   00,F
1974:  BTFSC  FD8.2
1976:  BRA    1A7C
1978:  BRA    1990
197A:  BTFSC  46.7
197C:  BRA    1996
197E:  BCF    FD8.0
1980:  RLCF   43,F
1982:  RLCF   44,F
1984:  RLCF   45,F
1986:  RLCF   46,F
1988:  DECF   00,F
198A:  BTFSC  FD8.2
198C:  BRA    1A7C
198E:  BRA    197A
1990:  BSF    42.7
1992:  BRA    19E4
1994:  BCF    42.7
1996:  MOVFF  3D,41
199A:  BTFSS  3D.7
199C:  BRA    19A2
199E:  BSF    46.7
19A0:  BRA    1A6E
19A2:  BCF    46.7
19A4:  BRA    1A6E
19A6:  MOVFF  3D,46
19AA:  BSF    46.7
19AC:  MOVFF  3E,45
19B0:  MOVFF  3F,44
19B4:  BTFSS  41.7
19B6:  BRA    19C0
19B8:  BCF    46.7
19BA:  BSF    42.2
19BC:  BRA    1A86
19BE:  BCF    42.2
19C0:  CLRF   43
19C2:  BCF    40.0
19C4:  CLRF   FEA
19C6:  MOVLW  3B
19C8:  MOVWF  FE9
19CA:  BRA    1AAC
19CC:  BTFSC  41.7
19CE:  BRA    1A08
19D0:  MOVFF  39,41
19D4:  BTFSS  40.0
19D6:  BRA    19E4
19D8:  RRCF   46,F
19DA:  RRCF   45,F
19DC:  RRCF   44,F
19DE:  RRCF   43,F
19E0:  INCF   00,F
19E2:  BZ    1A7C
19E4:  BTFSS  43.7
19E6:  BRA    19FE
19E8:  INCF   44,F
19EA:  BNZ   19FE
19EC:  INCF   45,F
19EE:  BNZ   19FE
19F0:  INCF   46,F
19F2:  BNZ   19FE
19F4:  RRCF   46,F
19F6:  RRCF   45,F
19F8:  RRCF   44,F
19FA:  INCF   00,F
19FC:  BZ    1A7C
19FE:  BTFSC  42.6
1A00:  BRA    190E
1A02:  BTFSC  42.7
1A04:  BRA    1994
1A06:  BRA    1A40
1A08:  MOVLW  80
1A0A:  XORWF  46,F
1A0C:  BTFSS  46.7
1A0E:  BRA    1A18
1A10:  BRA    1A86
1A12:  MOVFF  3D,41
1A16:  BRA    1A2C
1A18:  MOVFF  39,41
1A1C:  MOVF   46,F
1A1E:  BNZ   1A2C
1A20:  MOVF   45,F
1A22:  BNZ   1A2C
1A24:  MOVF   44,F
1A26:  BNZ   1A2C
1A28:  CLRF   00
1A2A:  BRA    1A6E
1A2C:  BTFSC  46.7
1A2E:  BRA    1A40
1A30:  BCF    FD8.0
1A32:  RLCF   43,F
1A34:  RLCF   44,F
1A36:  RLCF   45,F
1A38:  RLCF   46,F
1A3A:  DECFSZ 00,F
1A3C:  BRA    1A2C
1A3E:  BRA    1A7C
1A40:  BTFSS  41.7
1A42:  BRA    1A48
1A44:  BSF    46.7
1A46:  BRA    1A6E
1A48:  BCF    46.7
1A4A:  BRA    1A6E
1A4C:  MOVFF  3C,00
1A50:  MOVFF  3D,46
1A54:  MOVFF  3E,45
1A58:  MOVFF  3F,44
1A5C:  BRA    1A6E
1A5E:  MOVFF  38,00
1A62:  MOVFF  39,46
1A66:  MOVFF  3A,45
1A6A:  MOVFF  3B,44
1A6E:  MOVFF  46,01
1A72:  MOVFF  45,02
1A76:  MOVFF  44,03
1A7A:  BRA    1AE4
1A7C:  CLRF   00
1A7E:  CLRF   01
1A80:  CLRF   02
1A82:  CLRF   03
1A84:  BRA    1AE4
1A86:  CLRF   43
1A88:  COMF   44,F
1A8A:  COMF   45,F
1A8C:  COMF   46,F
1A8E:  COMF   43,F
1A90:  INCF   43,F
1A92:  BNZ   1A9E
1A94:  INCF   44,F
1A96:  BNZ   1A9E
1A98:  INCF   45,F
1A9A:  BNZ   1A9E
1A9C:  INCF   46,F
1A9E:  BTFSC  42.0
1AA0:  BRA    18CC
1AA2:  BTFSC  42.1
1AA4:  BRA    1952
1AA6:  BTFSC  42.2
1AA8:  BRA    19BE
1AAA:  BRA    1A12
1AAC:  MOVF   FEF,W
1AAE:  ADDWF  44,F
1AB0:  BNC   1ABC
1AB2:  INCF   45,F
1AB4:  BNZ   1ABC
1AB6:  INCF   46,F
1AB8:  BTFSC  FD8.2
1ABA:  BSF    40.0
1ABC:  MOVF   FED,F
1ABE:  MOVF   FEF,W
1AC0:  ADDWF  45,F
1AC2:  BNC   1ACA
1AC4:  INCF   46,F
1AC6:  BTFSC  FD8.2
1AC8:  BSF    40.0
1ACA:  MOVF   FED,F
1ACC:  MOVF   FEF,W
1ACE:  BTFSC  FEF.7
1AD0:  BRA    1AD4
1AD2:  XORLW  80
1AD4:  ADDWF  46,F
1AD6:  BTFSC  FD8.0
1AD8:  BSF    40.0
1ADA:  BTFSC  42.4
1ADC:  BRA    18DA
1ADE:  BTFSC  42.5
1AE0:  BRA    1960
1AE2:  BRA    19CC
1AE4:  RETURN 0
1AE6:  MOVLW  8E
1AE8:  MOVWF  00
1AEA:  MOVF   34,W
1AEC:  SUBWF  00,F
1AEE:  MOVFF  35,02
1AF2:  MOVFF  36,01
1AF6:  BSF    02.7
1AF8:  MOVF   00,F
1AFA:  BZ    1B0E
1AFC:  BCF    FD8.0
1AFE:  MOVF   02,F
1B00:  BNZ   1B06
1B02:  MOVF   01,F
1B04:  BZ    1B0E
1B06:  RRCF   02,F
1B08:  RRCF   01,F
1B0A:  DECFSZ 00,F
1B0C:  BRA    1AFC
1B0E:  BTFSS  35.7
1B10:  BRA    1B1C
1B12:  COMF   01,F
1B14:  COMF   02,F
1B16:  INCF   01,F
1B18:  BTFSC  FD8.2
1B1A:  INCF   02,F
1B1C:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=48MHz,crystal=20MHz) 
*
1220:  CLRF   FEA
1222:  MOVLW  37
1224:  MOVWF  FE9
1226:  MOVF   FEF,W
1228:  BZ    1246
122A:  MOVLW  0F
122C:  MOVWF  01
122E:  CLRF   00
1230:  DECFSZ 00,F
1232:  BRA    1230
1234:  DECFSZ 01,F
1236:  BRA    122E
1238:  MOVLW  8F
123A:  MOVWF  00
123C:  DECFSZ 00,F
123E:  BRA    123C
1240:  NOP   
1242:  DECFSZ FEF,F
1244:  BRA    122A
1246:  RETURN 0
*
1282:  MOVLW  01
1284:  SUBWF  3D,F
1286:  BNC   12A0
1288:  CLRF   FEA
128A:  MOVLW  3D
128C:  MOVWF  FE9
128E:  MOVF   FEF,W
1290:  BZ    12A0
1292:  MOVLW  02
1294:  MOVWF  00
1296:  DECFSZ 00,F
1298:  BRA    1296
129A:  BRA    129C
129C:  DECFSZ FEF,F
129E:  BRA    1292
12A0:  GOTO   12BA (RETURN)
....................  
.................... // #build(reset=0x1000, interrupt=0x1008) 
.................... // #org 0x000, 0xfff { } 
....................  
.................... #include <Motor.c> 
.................... #define m1p1 pin_e2 
.................... #define m1p2 pin_c0 
.................... #define m2p1 pin_d0 
.................... #define m2p2 pin_d1 
....................  
.................... void SetAllForward() 
.................... { 
....................       output_bit(m1p1, 1); 
*
1B72:  BSF    F8D.2
1B74:  BCF    F96.2
....................       output_bit(m1p2, 0); 
1B76:  BCF    F8B.0
1B78:  BCF    F94.0
....................       output_bit(m2p1, 0); 
1B7A:  BCF    F8C.0
1B7C:  BCF    F95.0
....................       output_bit(m2p2, 1); 
1B7E:  BSF    F8C.1
1B80:  BCF    F95.1
1B82:  GOTO   1DD0 (RETURN)
.................... } 
.................... void SetAllBackwards() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void SetLeftBackwardRightForward() 
.................... { 
....................       output_bit(m1p1, 1); 
*
1762:  BSF    F8D.2
1764:  BCF    F96.2
....................       output_bit(m1p2, 0); 
1766:  BCF    F8B.0
1768:  BCF    F94.0
....................       output_bit(m2p1, 1); 
176A:  BSF    F8C.0
176C:  BCF    F95.0
....................       output_bit(m2p2, 0); 
176E:  BCF    F8C.1
1770:  BCF    F95.1
1772:  GOTO   1CAA (RETURN)
.................... } 
.................... void SetRightBackwardLeftForward() 
.................... { 
....................       output_bit(m1p1, 0); 
1776:  BCF    F8D.2
1778:  BCF    F96.2
....................       output_bit(m1p2, 1); 
177A:  BSF    F8B.0
177C:  BCF    F94.0
....................       output_bit(m2p1, 0); 
177E:  BCF    F8C.0
1780:  BCF    F95.0
....................       output_bit(m2p2, 1); 
1782:  BSF    F8C.1
1784:  BCF    F95.1
1786:  GOTO   1CE8 (RETURN)
.................... } 
....................  
.................... void MotorInitialize() 
.................... { 
....................       setup_timer_2(T2_DIV_BY_16, 255, 1); //341 us overflow, 341 us interrupt 
*
133E:  MOVLW  00
1340:  IORLW  06
1342:  MOVWF  FCA
1344:  MOVLW  FF
1346:  MOVWF  FCB
....................  
....................       setup_ccp1(CCP_PWM | CCP_SHUTDOWN_AC_L | CCP_SHUTDOWN_BD_L); 
1348:  BCF    F94.2
134A:  BCF    F8B.2
134C:  MOVLW  0C
134E:  MOVWF  FBD
1350:  CLRF   FB7
1352:  CLRF   FB6
....................       setup_ccp2(CCP_PWM); 
1354:  BCF    F94.1
1356:  BCF    F8B.1
1358:  MOVWF  FBA
135A:  GOTO   1388 (RETURN)
.................... } 
....................  
.................... void SetBothPwm(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
1714:  MOVFF  35,02
1718:  MOVFF  34,01
171C:  RRCF   02,F
171E:  RRCF   01,F
1720:  RRCF   02,F
1722:  RRCF   01,F
1724:  RRCF   02,F
1726:  MOVFF  01,FBE
172A:  RRCF   02,F
172C:  RRCF   02,W
172E:  ANDLW  30
1730:  MOVWF  00
1732:  MOVF   FBD,W
1734:  ANDLW  CF
1736:  IORWF  00,W
1738:  MOVWF  FBD
....................       set_pwm2_duty((int16)vel); 
173A:  MOVFF  35,02
173E:  MOVFF  34,01
1742:  RRCF   02,F
1744:  RRCF   01,F
1746:  RRCF   02,F
1748:  RRCF   01,F
174A:  RRCF   02,F
174C:  MOVFF  01,FBB
1750:  RRCF   02,F
1752:  RRCF   02,W
1754:  ANDLW  30
1756:  MOVWF  00
1758:  MOVF   FBA,W
175A:  ANDLW  CF
175C:  IORWF  00,W
175E:  MOVWF  FBA
1760:  RETURN 0
.................... } 
....................  
.................... void SetRightPWM(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
1B48:  MOVFF  35,02
1B4C:  MOVFF  34,01
1B50:  RRCF   02,F
1B52:  RRCF   01,F
1B54:  RRCF   02,F
1B56:  RRCF   01,F
1B58:  RRCF   02,F
1B5A:  MOVFF  01,FBE
1B5E:  RRCF   02,F
1B60:  RRCF   02,W
1B62:  ANDLW  30
1B64:  MOVWF  00
1B66:  MOVF   FBD,W
1B68:  ANDLW  CF
1B6A:  IORWF  00,W
1B6C:  MOVWF  FBD
1B6E:  GOTO   1DCE (RETURN)
.................... } 
.................... void SetLeftPWM(int16 vel) 
.................... { 
....................       set_pwm2_duty((int16)vel); 
*
1B1E:  MOVFF  35,02
1B22:  MOVFF  34,01
1B26:  RRCF   02,F
1B28:  RRCF   01,F
1B2A:  RRCF   02,F
1B2C:  RRCF   01,F
1B2E:  RRCF   02,F
1B30:  MOVFF  01,FBB
1B34:  RRCF   02,F
1B36:  RRCF   02,W
1B38:  ANDLW  30
1B3A:  MOVWF  00
1B3C:  MOVF   FBA,W
1B3E:  ANDLW  CF
1B40:  IORWF  00,W
1B42:  MOVWF  FBA
1B44:  GOTO   1DC4 (RETURN)
.................... } 
....................  
.................... #include <Alignment.c> 
.................... #include <LCD_KIT.c> 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipula��o de m�dulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: F�bio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
.................... /* 
.................... lcd_cursor_on()                        fun��es LCD 
.................... lcd_cursor_pisca() 
.................... lcd_cursor_off() 
.................... lcd_corre_esquerda() 
.................... lcd_corre_direita() 
.................... lcd_envia_nibble( byte dado ) 
.................... lcd_le_byte() 
.................... lcd_ini() 
.................... lcd_pos_xy( byte x, byte y) 
.................... lcd_escreve( char c)                  \f  Clear display                            //// 
....................                                             \n  Go to start of second line               //// 
....................                                   \b  Move back one position                   //// 
....................  
.................... lcd_le( byte x, byte y) 
.................... lcd_apaga() 
.................... { 
....................  
.................... */ 
.................... // As defini��es a seguir s�o utilizadas para acesso aos pinos do display 
.................... // caso o pino RW n�o seja utilizado, comente a defini��o lcd_rw 
.................... #ifndef lcd_enable 
....................    #define lcd_rs         pin_d2      // pino rs do LCD 
....................    #define lcd_enable     pin_d3      // pino enable do LCD 
....................    #define lcd_d4         pin_d4      // pino de dados d4 do LCD 
....................    #define lcd_d5         pin_d5      // pino de dados d5 do LCD 
....................    #define lcd_d6         pin_d6      // pino de dados d6 do LCD 
....................    #define lcd_d7         pin_d7   // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endere�o da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seq��ncia de inicializa��o do m�dulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................  
.................... /*   O 0x20 eh p configurar o tipo do display e talz. 
....................    O Segundo numero configura o modo do cursor, sendo: 
....................                -> 0xf Cursor piscante 
....................                -> 0xe Cursor comum 
....................                -> 0xc Sem cursor 
....................    O terceiro (1) limpa o display 
....................    O Quarto volta com o cursor. 
.................... */ 
....................  
.................... byte lcd_le_byte() 
.................... // l� um byte do LCD (somente com pino RW) 
.................... { 
....................    byte dado; 
....................    // configura os pinos de dados como entradas 
....................    input(lcd_d4); 
....................    input(lcd_d5); 
....................    input(lcd_d6); 
....................    input(lcd_d7); 
....................    // se o pino rw for utilizado, coloca em 1 
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_high(lcd_enable); // habilita display 
....................    dado = 0;   // zera a vari�vel de leitura 
....................    // l� os quatro bits mais significativos 
....................    if (input(lcd_d7)) bit_set(dado,7); 
....................    if (input(lcd_d6)) bit_set(dado,6); 
....................    if (input(lcd_d5)) bit_set(dado,5); 
....................    if (input(lcd_d4)) bit_set(dado,4); 
....................    // d� um pulso na linha enable 
....................    output_low(lcd_enable); 
....................    output_high(lcd_enable); 
....................    // l� os quatro bits menos significativos 
....................    if (input(lcd_d7)) bit_set(dado,3); 
....................    if (input(lcd_d6)) bit_set(dado,2); 
....................    if (input(lcd_d5)) bit_set(dado,1); 
....................    if (input(lcd_d4)) bit_set(dado,0); 
....................    output_low(lcd_enable);   // desabilita o display 
....................    return dado;   // retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
....................    // coloca os quatro bits nas saidas 
....................    output_bit(lcd_d4,bit_test(dado,0)); 
*
1248:  BTFSC  3E.0
124A:  BRA    1250
124C:  BCF    F8C.4
124E:  BRA    1252
1250:  BSF    F8C.4
1252:  BCF    F95.4
....................    output_bit(lcd_d5,bit_test(dado,1)); 
1254:  BTFSC  3E.1
1256:  BRA    125C
1258:  BCF    F8C.5
125A:  BRA    125E
125C:  BSF    F8C.5
125E:  BCF    F95.5
....................    output_bit(lcd_d6,bit_test(dado,2)); 
1260:  BTFSC  3E.2
1262:  BRA    1268
1264:  BCF    F8C.6
1266:  BRA    126A
1268:  BSF    F8C.6
126A:  BCF    F95.6
....................    output_bit(lcd_d7,bit_test(dado,3)); 
126C:  BTFSC  3E.3
126E:  BRA    1274
1270:  BCF    F8C.7
1272:  BRA    1276
1274:  BSF    F8C.7
1276:  BCF    F95.7
....................    // d� um pulso na linha enable 
....................    output_high(lcd_enable); 
1278:  BCF    F95.3
127A:  BSF    F8C.3
....................    output_low(lcd_enable); 
127C:  BCF    F95.3
127E:  BCF    F8C.3
1280:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
....................    // coloca a linha rs em 0 
....................    output_low(lcd_rs); 
*
12A4:  BCF    F95.2
12A6:  BCF    F8C.2
....................    // aguarda o display ficar desocupado 
....................    //while ( bit_test(lcd_le_byte(),7) ) ; 
....................    // configura a linha rs dependendo do modo selecionado 
....................    output_bit(lcd_rs,endereco); 
12A8:  MOVF   3B,F
12AA:  BNZ   12B0
12AC:  BCF    F8C.2
12AE:  BRA    12B2
12B0:  BSF    F8C.2
12B2:  BCF    F95.2
....................    delay_us(100);   // aguarda 100 us 
12B4:  MOVLW  64
12B6:  MOVWF  3D
12B8:  BRA    1282
....................    // caso a linha rw esteja definida, coloca em 0 
....................    #ifdef lcd_rw 
....................       output_low(lcd_rw); 
....................    #endif 
....................    // desativa linha enable 
....................    output_low(lcd_enable); 
12BA:  BCF    F95.3
12BC:  BCF    F8C.3
....................    // envia a primeira parte do byte 
....................    lcd_envia_nibble(dado >> 4); 
12BE:  SWAPF  3C,W
12C0:  MOVWF  3D
12C2:  MOVLW  0F
12C4:  ANDWF  3D,F
12C6:  MOVFF  3D,3E
12CA:  RCALL  1248
....................    // envia a segunda parte do byte 
....................    lcd_envia_nibble(dado & 0x0f); 
12CC:  MOVF   3C,W
12CE:  ANDLW  0F
12D0:  MOVWF  3D
12D2:  MOVWF  3E
12D4:  RCALL  1248
12D6:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicializa��o do display 
.................... { 
....................    byte conta; 
....................    output_low(lcd_d4); 
12D8:  BCF    F95.4
12DA:  BCF    F8C.4
....................    output_low(lcd_d5); 
12DC:  BCF    F95.5
12DE:  BCF    F8C.5
....................    output_low(lcd_d6); 
12E0:  BCF    F95.6
12E2:  BCF    F8C.6
....................    output_low(lcd_d7); 
12E4:  BCF    F95.7
12E6:  BCF    F8C.7
....................    output_low(lcd_rs); 
12E8:  BCF    F95.2
12EA:  BCF    F8C.2
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_low(lcd_enable); 
12EC:  BCF    F95.3
12EE:  BCF    F8C.3
....................    delay_ms(15); 
12F0:  MOVLW  0F
12F2:  MOVWF  37
12F4:  RCALL  1220
....................    // envia uma seq��ncia de 3 vezes 0x03 
....................    // e depois 0x02 para configurar o m�dulo 
....................    // para modo de 4 bits 
....................    for(conta=1;conta<=3;++conta) 
12F6:  MOVLW  01
12F8:  MOVWF  28
12FA:  MOVF   28,W
12FC:  SUBLW  03
12FE:  BNC   1310
....................    { 
....................       lcd_envia_nibble(3); 
1300:  MOVLW  03
1302:  MOVWF  3E
1304:  RCALL  1248
....................       delay_ms(5); 
1306:  MOVLW  05
1308:  MOVWF  37
130A:  RCALL  1220
130C:  INCF   28,F
130E:  BRA    12FA
....................    } 
....................    lcd_envia_nibble(2); 
1310:  MOVLW  02
1312:  MOVWF  3E
1314:  RCALL  1248
....................    // envia string de inicializa��o do display 
....................    for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
1316:  CLRF   28
1318:  MOVF   28,W
131A:  SUBLW  03
131C:  BNC   133A
131E:  CLRF   03
1320:  MOVF   28,W
1322:  MOVFF  FF2,29
1326:  BCF    FF2.7
1328:  RCALL  1096
132A:  BTFSC  29.7
132C:  BSF    FF2.7
132E:  MOVWF  29
1330:  CLRF   3B
1332:  MOVWF  3C
1334:  RCALL  12A4
1336:  INCF   28,F
1338:  BRA    1318
133A:  GOTO   1386 (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
138C:  DECFSZ 38,W
138E:  BRA    1392
1390:  BRA    1398
....................       endereco = lcd_seg_lin; 
1392:  MOVLW  40
1394:  MOVWF  39
1396:  BRA    139A
....................    else 
....................       endereco = 0; 
1398:  CLRF   39
....................    endereco += x-1; 
139A:  MOVLW  01
139C:  SUBWF  37,W
139E:  ADDWF  39,F
....................    lcd_envia_byte(0,0x80|endereco); 
13A0:  MOVF   39,W
13A2:  IORLW  80
13A4:  MOVWF  3A
13A6:  CLRF   3B
13A8:  MOVWF  3C
13AA:  RCALL  12A4
13AC:  RETURN 0
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
13AE:  MOVF   36,W
13B0:  XORLW  0C
13B2:  BZ    13C2
13B4:  XORLW  06
13B6:  BZ    13D2
13B8:  XORLW  07
13BA:  BZ    13D2
13BC:  XORLW  05
13BE:  BZ    13DE
13C0:  BRA    13E8
....................    { 
....................      case '\f'    :   lcd_envia_byte(0,1); 
13C2:  CLRF   3B
13C4:  MOVLW  01
13C6:  MOVWF  3C
13C8:  RCALL  12A4
....................               delay_ms(2); 
13CA:  MOVLW  02
13CC:  MOVWF  37
13CE:  RCALL  1220
....................             break; 
13D0:  BRA    13F2
....................      case '\n'   : 
....................      case '\r'    :   lcd_pos_xy(1,2); 
13D2:  MOVLW  01
13D4:  MOVWF  37
13D6:  MOVLW  02
13D8:  MOVWF  38
13DA:  RCALL  138C
....................               break; 
13DC:  BRA    13F2
....................      case '\b'    :   lcd_envia_byte(0,0x10); 
13DE:  CLRF   3B
13E0:  MOVLW  10
13E2:  MOVWF  3C
13E4:  RCALL  12A4
....................               break; 
13E6:  BRA    13F2
....................      default   :   lcd_envia_byte(1,c); 
13E8:  MOVLW  01
13EA:  MOVWF  3B
13EC:  MOVFF  36,3C
13F0:  RCALL  12A4
....................               break; 
....................    } 
13F2:  RETURN 0
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
....................    char valor; 
....................    // seleciona a posi��o do caractere 
....................    lcd_pos_xy(x,y); 
....................    // ativa rs 
....................    output_high(lcd_rs); 
....................    // l� o caractere 
....................    valor = lcd_le_byte(); 
....................    // desativa rs 
....................    output_low(lcd_rs); 
....................    // retorna o valor do caractere 
....................    return valor; 
.................... } 
....................  
.................... void lcd_apaga() 
.................... { 
....................    lcd_envia_byte(0,1); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_cursor_on() 
....................     { 
.................... lcd_envia_byte(0,0x0E); 
....................     } 
....................  
.................... void lcd_cursor_pisca() 
....................     { 
.................... lcd_envia_byte(0,0x0F); 
....................     } 
....................  
.................... void lcd_cursor_off() 
....................     { 
....................  lcd_envia_byte(0,0x0C); 
....................     } 
....................  
.................... void lcd_corre_esquerda() 
....................     { 
....................  lcd_envia_byte(0,0x18); 
....................     } 
....................  
.................... void lcd_corre_direita() 
....................     { 
.................... lcd_envia_byte(0,0x1C); 
....................     } 
....................  
....................  
....................  
.................... //Quantos porcento pra um lado ele pode estar antes de ser considerado desalinhado 
.................... float alignRatio = 0.7f; 
....................  
.................... //extremo esquerda, centro esquerda, centro direita, extrema direita 
.................... int16 ad1, ad2, ad3, ad4; 
....................  
.................... void SetAds(int16 newAd1, int16 newAd2, int16 newAd3, int16 newAd4) 
.................... { 
....................     ad1 = newAd1; 
*
1108:  MOVFF  49,1B
110C:  MOVFF  48,1A
....................     ad2 = newAd2; 
1110:  MOVFF  4B,1D
1114:  MOVFF  4A,1C
....................     ad3 = newAd3; 
1118:  MOVFF  4D,1F
111C:  MOVFF  4C,1E
....................     ad4 = newAd4; 
1120:  MOVFF  4F,21
1124:  MOVFF  4E,20
1128:  GOTO   11DE (RETURN)
.................... } 
....................  
.................... int8 IsCenterAlign() 
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad1 + ad2); 
....................     float ad3Ratio = (float)ad3 / (float)(ad1 + ad2); 
....................  
....................     if (ad2 + ad3 > 300 && ad2Ratio < alignRatio && ad3Ratio < alignRatio) 
....................         return 1; 
....................     else 
....................         return 0; 
.................... } 
.................... int8 IsRight() 
.................... { 
....................     if (ad1 < 300 && ad2 >= 300 && ad3 >= 300 && ad4 >= 300) 
....................         return 1; 
....................     else 
....................         return 0; 
.................... } 
.................... int8 IsCenterAndNotMargins() 
.................... { 
....................     if (ad1 < 300 && ad2 >= 300 && ad3 >= 300 && ad4 < 300) 
....................         return 1; 
....................     else 
....................         return 0; 
.................... } 
.................... int8 IsCenterInside() 
.................... { 
....................     if (ad2 >= 300 && ad3 >= 300) 
....................         return 1; 
....................     else 
....................         return 0; 
.................... } 
.................... int8 IsMarginsInside() 
.................... { 
....................     if (ad1 >= 300 && ad4 >= 400) 
....................         return 1; 
....................     else 
....................         return 0; 
.................... } 
.................... int8 IsMarginsOutside() 
.................... { 
....................     if (ad1 < 300 && ad4 < 400) 
....................         return 1; 
....................     else 
....................         return 0; 
.................... } 
.................... int8 IsAllOutside() 
.................... { 
....................     if (ad1 < 300 && ad2 < 300 && ad3 < 300 && ad4 < 300) 
*
1E3C:  MOVF   1B,W
1E3E:  SUBLW  01
1E40:  BNC   1E7C
1E42:  BNZ   1E4A
1E44:  MOVF   1A,W
1E46:  SUBLW  2B
1E48:  BNC   1E7C
1E4A:  MOVF   1D,W
1E4C:  SUBLW  01
1E4E:  BNC   1E7C
1E50:  BNZ   1E58
1E52:  MOVF   1C,W
1E54:  SUBLW  2B
1E56:  BNC   1E7C
1E58:  MOVF   1F,W
1E5A:  SUBLW  01
1E5C:  BNC   1E7C
1E5E:  BNZ   1E66
1E60:  MOVF   1E,W
1E62:  SUBLW  2B
1E64:  BNC   1E7C
1E66:  MOVF   21,W
1E68:  SUBLW  01
1E6A:  BNC   1E7C
1E6C:  BNZ   1E74
1E6E:  MOVF   20,W
1E70:  SUBLW  2B
1E72:  BNC   1E7C
....................         return 1; 
1E74:  MOVLW  01
1E76:  MOVWF  01
1E78:  BRA    1E80
1E7A:  BRA    1E80
....................     else 
....................         return 0; 
1E7C:  MOVLW  00
1E7E:  MOVWF  01
1E80:  GOTO   1F4A (RETURN)
.................... } 
.................... int8 IsLeft() 
.................... { 
....................     if (ad1 >= 300 && ad2 >= 300 && ad3 >= 300 && ad4 < 300) 
....................         return 1; 
....................     else 
....................         return 0; 
.................... } 
.................... int8 IsAllAlign() 
.................... { 
....................     if (ad1 >= 300 && ad2 >= 300 && ad3 >= 300 && ad4 >= 300) 
*
1DEC:  MOVF   1B,W
1DEE:  SUBLW  00
1DF0:  BC    1E34
1DF2:  XORLW  FF
1DF4:  BNZ   1DFC
1DF6:  MOVF   1A,W
1DF8:  SUBLW  2B
1DFA:  BC    1E34
1DFC:  MOVF   1D,W
1DFE:  SUBLW  00
1E00:  BC    1E34
1E02:  XORLW  FF
1E04:  BNZ   1E0C
1E06:  MOVF   1C,W
1E08:  SUBLW  2B
1E0A:  BC    1E34
1E0C:  MOVF   1F,W
1E0E:  SUBLW  00
1E10:  BC    1E34
1E12:  XORLW  FF
1E14:  BNZ   1E1C
1E16:  MOVF   1E,W
1E18:  SUBLW  2B
1E1A:  BC    1E34
1E1C:  MOVF   21,W
1E1E:  SUBLW  00
1E20:  BC    1E34
1E22:  XORLW  FF
1E24:  BNZ   1E2C
1E26:  MOVF   20,W
1E28:  SUBLW  2B
1E2A:  BC    1E34
....................         return 1; 
1E2C:  MOVLW  01
1E2E:  MOVWF  01
1E30:  BRA    1E38
1E32:  BRA    1E38
....................     else 
....................         return 0; 
1E34:  MOVLW  00
1E36:  MOVWF  01
1E38:  GOTO   1F3A (RETURN)
.................... } 
.................... void Align() 
*
1B86:  MOVFF  1D,39
1B8A:  MOVFF  1C,38
1B8E:  RCALL  150E
1B90:  MOVFF  03,37
1B94:  MOVFF  02,36
1B98:  MOVFF  01,35
1B9C:  MOVFF  00,34
1BA0:  MOVF   1E,W
1BA2:  ADDWF  1C,W
1BA4:  MOVWF  01
1BA6:  MOVF   1F,W
1BA8:  ADDWFC 1D,W
1BAA:  MOVWF  03
1BAC:  MOVFF  01,38
1BB0:  MOVWF  39
1BB2:  RCALL  150E
1BB4:  MOVFF  37,3B
1BB8:  MOVFF  36,3A
1BBC:  MOVFF  35,39
1BC0:  MOVFF  34,38
1BC4:  MOVFF  03,3F
1BC8:  MOVFF  02,3E
1BCC:  MOVFF  01,3D
1BD0:  MOVFF  00,3C
1BD4:  RCALL  1544
1BD6:  MOVFF  03,2B
1BDA:  MOVFF  02,2A
1BDE:  MOVFF  01,29
1BE2:  MOVFF  00,28
1BE6:  MOVFF  1F,39
1BEA:  MOVFF  1E,38
1BEE:  RCALL  150E
1BF0:  MOVFF  03,37
1BF4:  MOVFF  02,36
1BF8:  MOVFF  01,35
1BFC:  MOVFF  00,34
1C00:  MOVF   1E,W
1C02:  ADDWF  1C,W
1C04:  MOVWF  01
1C06:  MOVF   1F,W
1C08:  ADDWFC 1D,W
1C0A:  MOVWF  03
1C0C:  MOVFF  01,38
1C10:  MOVWF  39
1C12:  RCALL  150E
1C14:  MOVFF  37,3B
1C18:  MOVFF  36,3A
1C1C:  MOVFF  35,39
1C20:  MOVFF  34,38
1C24:  MOVFF  03,3F
1C28:  MOVFF  02,3E
1C2C:  MOVFF  01,3D
1C30:  MOVFF  00,3C
1C34:  RCALL  1544
1C36:  MOVFF  03,2F
1C3A:  MOVFF  02,2E
1C3E:  MOVFF  01,2D
1C42:  MOVFF  00,2C
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad2 + ad3); 
....................     float ad3Ratio = (float)ad3 / (float)(ad2 + ad3); 
....................  
....................     ///alto significa escuro 
....................     if (ad2 + ad3 > 400) 
1C46:  MOVF   1E,W
1C48:  ADDWF  1C,W
1C4A:  MOVWF  34
1C4C:  MOVF   1F,W
1C4E:  ADDWFC 1D,W
1C50:  MOVWF  35
1C52:  SUBLW  00
1C54:  BTFSC  FD8.0
1C56:  BRA    1DD2
1C58:  XORLW  FF
1C5A:  BNZ   1C64
1C5C:  MOVF   34,W
1C5E:  SUBLW  90
1C60:  BTFSC  FD8.0
1C62:  BRA    1DD2
....................     { 
....................         //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................         //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................  
....................         lcd_pos_xy(1, 1); 
1C64:  MOVLW  01
1C66:  MOVWF  37
1C68:  MOVWF  38
1C6A:  CALL   138C
....................  
....................         //O ad2 é o da direita, se este esta maior, significa que o robo esta a direita 
....................         if (ad2Ratio > alignRatio) 
1C6E:  MOVFF  19,37
1C72:  MOVFF  18,36
1C76:  MOVFF  17,35
1C7A:  MOVFF  16,34
1C7E:  MOVFF  2B,3B
1C82:  MOVFF  2A,3A
1C86:  MOVFF  29,39
1C8A:  MOVFF  28,38
1C8E:  RCALL  169E
1C90:  BNC   1CAC
....................         { 
....................             printf(lcd_escreve, "Esta a direita"); 
1C92:  MOVLW  B4
1C94:  MOVWF  FF6
1C96:  MOVLW  10
1C98:  MOVWF  FF7
1C9A:  CALL   13F4
....................             SetBothPwm(950); 
1C9E:  MOVLW  03
1CA0:  MOVWF  35
1CA2:  MOVLW  B6
1CA4:  MOVWF  34
1CA6:  RCALL  1714
....................             SetLeftBackwardRightForward(); 
1CA8:  BRA    1762
....................         } 
1CAA:  BRA    1DD0
....................         else if (ad3Ratio > alignRatio) 
1CAC:  MOVFF  19,37
1CB0:  MOVFF  18,36
1CB4:  MOVFF  17,35
1CB8:  MOVFF  16,34
1CBC:  MOVFF  2F,3B
1CC0:  MOVFF  2E,3A
1CC4:  MOVFF  2D,39
1CC8:  MOVFF  2C,38
1CCC:  RCALL  169E
1CCE:  BNC   1CEA
....................         { 
....................             printf(lcd_escreve, "Esta a esquerda"); 
1CD0:  MOVLW  C4
1CD2:  MOVWF  FF6
1CD4:  MOVLW  10
1CD6:  MOVWF  FF7
1CD8:  CALL   13F4
....................             SetBothPwm(950); 
1CDC:  MOVLW  03
1CDE:  MOVWF  35
1CE0:  MOVLW  B6
1CE2:  MOVWF  34
1CE4:  RCALL  1714
....................             SetRightBackwardLeftForward(); 
1CE6:  BRA    1776
....................         } 
1CE8:  BRA    1DD0
....................         else 
....................         { 
....................  
....................             ///850 é o minimo que o motor vai ter (ele precisa de uns 800 pra não ficar travado) e vai somar no maximo 173 
....................             ///Por isso que o maximo dele é 1023 (850 + 173), é possivel fazer com que o valor de maior que 1023 e limitar 
....................             ///Com um if, da para testar isso 
....................             long pwm1 = ad2Ratio * 123 + 900; 
....................             long pwm2 = ad3Ratio * 123 + 900; 
1CEA:  MOVFF  2B,37
1CEE:  MOVFF  2A,36
1CF2:  MOVFF  29,35
1CF6:  MOVFF  28,34
1CFA:  CLRF   3B
1CFC:  CLRF   3A
1CFE:  MOVLW  76
1D00:  MOVWF  39
1D02:  MOVLW  85
1D04:  MOVWF  38
1D06:  RCALL  178A
1D08:  MOVFF  03,37
1D0C:  MOVFF  02,36
1D10:  MOVFF  01,35
1D14:  MOVFF  00,34
1D18:  BCF    FD8.1
1D1A:  MOVFF  03,3B
1D1E:  MOVFF  02,3A
1D22:  MOVFF  01,39
1D26:  MOVFF  00,38
1D2A:  CLRF   3F
1D2C:  CLRF   3E
1D2E:  MOVLW  61
1D30:  MOVWF  3D
1D32:  MOVLW  88
1D34:  MOVWF  3C
1D36:  RCALL  187C
1D38:  MOVFF  03,37
1D3C:  MOVFF  02,36
1D40:  MOVFF  01,35
1D44:  MOVFF  00,34
1D48:  RCALL  1AE6
1D4A:  MOVFF  02,31
1D4E:  MOVFF  01,30
1D52:  MOVFF  2F,37
1D56:  MOVFF  2E,36
1D5A:  MOVFF  2D,35
1D5E:  MOVFF  2C,34
1D62:  CLRF   3B
1D64:  CLRF   3A
1D66:  MOVLW  76
1D68:  MOVWF  39
1D6A:  MOVLW  85
1D6C:  MOVWF  38
1D6E:  RCALL  178A
1D70:  MOVFF  03,37
1D74:  MOVFF  02,36
1D78:  MOVFF  01,35
1D7C:  MOVFF  00,34
1D80:  BCF    FD8.1
1D82:  MOVFF  03,3B
1D86:  MOVFF  02,3A
1D8A:  MOVFF  01,39
1D8E:  MOVFF  00,38
1D92:  CLRF   3F
1D94:  CLRF   3E
1D96:  MOVLW  61
1D98:  MOVWF  3D
1D9A:  MOVLW  88
1D9C:  MOVWF  3C
1D9E:  RCALL  187C
1DA0:  MOVFF  03,37
1DA4:  MOVFF  02,36
1DA8:  MOVFF  01,35
1DAC:  MOVFF  00,34
1DB0:  RCALL  1AE6
1DB2:  MOVFF  02,33
1DB6:  MOVFF  01,32
....................             SetLeftPWM(pwm1); 
1DBA:  MOVFF  31,35
1DBE:  MOVFF  30,34
1DC2:  BRA    1B1E
....................             SetRightPWM(pwm2); 
1DC4:  MOVFF  33,35
1DC8:  MOVFF  32,34
1DCC:  BRA    1B48
....................             SetAllForward(); 
1DCE:  BRA    1B72
....................             // SetLeft((long)(ad2Ratio * 100) + 850); 
....................             // SetRight((long)(ad3Ratio * 100) + 850); 
....................         } 
....................     } 
1DD0:  BRA    1DEA
....................     else 
....................     { 
....................         ///Esta fora da pista, deve fazer algo 
....................         //SetBothPwm(0); 
....................         lcd_pos_xy(1, 2); 
1DD2:  MOVLW  01
1DD4:  MOVWF  37
1DD6:  MOVLW  02
1DD8:  MOVWF  38
1DDA:  CALL   138C
....................  
....................         printf(lcd_escreve, "Se perdeu"); 
1DDE:  MOVLW  D4
1DE0:  MOVWF  FF6
1DE2:  MOVLW  10
1DE4:  MOVWF  FF7
1DE6:  CALL   13F4
....................     } 
1DEA:  RETURN 0
.................... } 
....................  
.................... ///BASICAMENTE faz a mesma coisa que o algin, mas troca os sensores (coloca o da esquerda na direitea) 
.................... void InvertedAlign() 
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad2 + ad3); 
....................     float ad3Ratio = (float)ad3 / (float)(ad2 + ad3); 
....................  
....................     ///alto significa escuro 
....................     if (ad2 + ad3 <= 400) 
....................     { 
....................         //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................         //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................  
....................         lcd_pos_xy(1, 1); 
....................  
....................         //O ad2 é o da direita, se este esta maior, significa que o robo esta a direita 
....................         if (ad3Ratio > alignRatio) 
....................         { 
....................             printf(lcd_escreve, "Esta a direita"); 
....................             SetBothPwm(950); 
....................             SetLeftBackwardRightForward(); 
....................         } 
....................         else if (ad2Ratio > alignRatio) 
....................         { 
....................             printf(lcd_escreve, "Esta a esquerda"); 
....................             SetBothPwm(950); 
....................             SetRightBackwardLeftForward(); 
....................         } 
....................         else 
....................         { 
....................  
....................             ///850 é o minimo que o motor vai ter (ele precisa de uns 800 pra não ficar travado) e vai somar no maximo 173 
....................             ///Por isso que o maximo dele é 1023 (850 + 173), é possivel fazer com que o valor de maior que 1023 e limitar 
....................             ///Com um if, da para testar isso 
....................             long pwm1 = ad2Ratio * 173 + 850; 
....................             long pwm2 = ad3Ratio * 173 + 850; 
....................             SetLeftPWM(pwm2); 
....................             SetRightPWM(pwm1); 
....................             SetAllForward(); 
....................             // SetLeft((long)(ad2Ratio * 100) + 850); 
....................             // SetRight((long)(ad3Ratio * 100) + 850); 
....................         } 
....................     } 
....................     else 
....................     { 
....................         ///Esta fora da pista, deve fazer algo 
....................         //SetBothPwm(0); 
....................         lcd_pos_xy(1, 2); 
....................  
....................         printf(lcd_escreve, "Se perdeu"); 
....................     } 
.................... } 
....................  
.................... ///O lcd ta no aligment, se adicionar aqui vai dar duplicação de #define 
....................  
.................... #build(reset = 0x1000, interrupt = 0x1008) 
.................... #org 0x000, 0xfff {} 
....................  
.................... #define button1 pin_a4 
.................... #define button2 pin_a5 
.................... #define button3 pin_e0 
.................... #define button4 pin_e1 
....................  
.................... int running; 
....................  
.................... int16 timerBase = 1; 
.................... int8 adCounter; 
....................  
.................... ///Em qual decisão ele ta 
.................... int8 decisionCounter = 0; 
.................... ///Isso aqui serve para ele so contabilizar as tomadas de decisão a cadada 200ms (no timerBase) 
.................... int8 decisionInCoolDown = 0; 
....................  
.................... void ClearScreen(); 
.................... void Setup(); 
....................  
.................... #int_timer0 
.................... void timerTick() 
.................... { 
....................     set_adc_channel(0); 
*
112C:  MOVLW  00
112E:  MOVWF  01
1130:  MOVF   FC2,W
1132:  ANDLW  C3
1134:  IORWF  01,W
1136:  MOVWF  FC2
....................     delay_us(10); 
1138:  MOVLW  27
113A:  MOVWF  00
113C:  DECFSZ 00,F
113E:  BRA    113C
1140:  BRA    1142
....................     ad1 = read_adc(); 
1142:  BSF    FC2.1
1144:  BTFSC  FC2.1
1146:  BRA    1144
1148:  MOVFF  FC3,1A
114C:  MOVFF  FC4,1B
....................  
....................     set_adc_channel(1); 
1150:  MOVLW  04
1152:  MOVWF  01
1154:  MOVF   FC2,W
1156:  ANDLW  C3
1158:  IORWF  01,W
115A:  MOVWF  FC2
....................     delay_us(10); 
115C:  MOVLW  27
115E:  MOVWF  00
1160:  DECFSZ 00,F
1162:  BRA    1160
1164:  BRA    1166
....................     ad2 = read_adc(); 
1166:  BSF    FC2.1
1168:  BTFSC  FC2.1
116A:  BRA    1168
116C:  MOVFF  FC3,1C
1170:  MOVFF  FC4,1D
....................  
....................     set_adc_channel(2); 
1174:  MOVLW  08
1176:  MOVWF  01
1178:  MOVF   FC2,W
117A:  ANDLW  C3
117C:  IORWF  01,W
117E:  MOVWF  FC2
....................     delay_us(10); 
1180:  MOVLW  27
1182:  MOVWF  00
1184:  DECFSZ 00,F
1186:  BRA    1184
1188:  BRA    118A
....................     ad3 = read_adc(); 
118A:  BSF    FC2.1
118C:  BTFSC  FC2.1
118E:  BRA    118C
1190:  MOVFF  FC3,1E
1194:  MOVFF  FC4,1F
....................  
....................     set_adc_channel(3); 
1198:  MOVLW  0C
119A:  MOVWF  01
119C:  MOVF   FC2,W
119E:  ANDLW  C3
11A0:  IORWF  01,W
11A2:  MOVWF  FC2
....................     delay_us(10); 
11A4:  MOVLW  27
11A6:  MOVWF  00
11A8:  DECFSZ 00,F
11AA:  BRA    11A8
11AC:  BRA    11AE
....................     ad4 = read_adc(); 
11AE:  BSF    FC2.1
11B0:  BTFSC  FC2.1
11B2:  BRA    11B0
11B4:  MOVFF  FC3,20
11B8:  MOVFF  FC4,21
....................  
....................     SetAds(ad1, ad2, ad3, ad4); 
11BC:  MOVFF  1B,49
11C0:  MOVFF  1A,48
11C4:  MOVFF  1D,4B
11C8:  MOVFF  1C,4A
11CC:  MOVFF  1F,4D
11D0:  MOVFF  1E,4C
11D4:  MOVFF  21,4F
11D8:  MOVFF  20,4E
11DC:  BRA    1108
....................  
....................     if (timerBase == 2000) 
11DE:  MOVF   23,W
11E0:  SUBLW  D0
11E2:  BNZ   11F4
11E4:  MOVF   24,W
11E6:  SUBLW  07
11E8:  BNZ   11F4
....................     { 
....................         timerBase = 0; 
11EA:  CLRF   24
11EC:  CLRF   23
....................         if (decisionInCoolDown > 0) 
11EE:  MOVF   27,F
11F0:  BZ    11F4
....................             decisionInCoolDown--; 
11F2:  DECF   27,F
....................     } 
....................     timerBase++; 
11F4:  INCF   23,F
11F6:  BTFSC  FD8.2
11F8:  INCF   24,F
11FA:  BCF    FF2.2
11FC:  GOTO   1054
.................... } 
....................  
.................... void main() 
*
1E84:  CLRF   FF8
1E86:  BCF    FD0.7
1E88:  BSF    07.7
1E8A:  MOVLW  33
1E8C:  MOVWF  19
1E8E:  MOVWF  18
1E90:  MOVWF  17
1E92:  MOVLW  7E
1E94:  MOVWF  16
1E96:  CLRF   24
1E98:  MOVLW  01
1E9A:  MOVWF  23
1E9C:  CLRF   26
1E9E:  CLRF   27
1EA0:  MOVF   FC1,W
1EA2:  ANDLW  C0
1EA4:  IORLW  0F
1EA6:  MOVWF  FC1
1EA8:  MOVLW  07
1EAA:  MOVWF  FB4
.................... { 
....................     Setup(); 
1EAC:  GOTO   135E
....................     lcd_pos_xy(1, 1); 
1EB0:  MOVLW  01
1EB2:  MOVWF  37
1EB4:  MOVWF  38
1EB6:  CALL   138C
....................     printf(lcd_escreve, " Inicializando"); 
1EBA:  MOVLW  00
1EBC:  MOVWF  FF6
1EBE:  MOVLW  12
1EC0:  MOVWF  FF7
1EC2:  CALL   13F4
....................     delay_ms(50); 
1EC6:  MOVLW  32
1EC8:  MOVWF  37
1ECA:  CALL   1220
....................     do 
....................     { 
....................         if (input(button1) == 0) 
1ECE:  BSF    F92.4
1ED0:  BTFSC  F80.4
1ED2:  BRA    1ED8
....................             running = 1; 
1ED4:  MOVLW  01
1ED6:  MOVWF  22
....................         if (input(button2) == 0) 
1ED8:  BSF    F92.5
1EDA:  BTFSC  F80.5
1EDC:  BRA    1EE0
....................             running = 0; 
1EDE:  CLRF   22
....................         if (input(button3) == 0) 
1EE0:  BSF    F96.0
1EE2:  BTFSC  F84.0
1EE4:  BRA    1EE8
....................             decisionCounter = 0; 
1EE6:  CLRF   26
....................  
....................         ClearScreen(); 
1EE8:  GOTO   1414
....................         lcd_pos_xy(1, 1); 
1EEC:  MOVLW  01
1EEE:  MOVWF  37
1EF0:  MOVWF  38
1EF2:  CALL   138C
....................         printf(lcd_escreve, " d: %d", decisionCounter); 
1EF6:  MOVLW  10
1EF8:  MOVWF  FF6
1EFA:  MOVLW  12
1EFC:  MOVWF  FF7
1EFE:  MOVLW  04
1F00:  MOVWF  28
1F02:  CALL   141E
1F06:  MOVFF  26,28
1F0A:  MOVLW  18
1F0C:  MOVWF  29
1F0E:  CALL   1464
....................         printf(lcd_escreve, " c: %d", decisionInCoolDown); 
1F12:  MOVLW  18
1F14:  MOVWF  FF6
1F16:  MOVLW  12
1F18:  MOVWF  FF7
1F1A:  MOVLW  04
1F1C:  MOVWF  28
1F1E:  CALL   141E
1F22:  MOVFF  27,28
1F26:  MOVLW  18
1F28:  MOVWF  29
1F2A:  CALL   1464
....................  
....................         if (running == 1) 
1F2E:  DECFSZ 22,W
1F30:  BRA    1F5C
....................         { 
....................             ///Esperando uma pista com uma cruz no inicio da pista 
....................             ///e termina quando estiver com todos os sensores fora 
....................             if (decisionCounter == 0) 
1F32:  MOVF   26,F
1F34:  BNZ   1F42
....................             { 
....................                 Align(); 
1F36:  RCALL  1B86
....................                 if(IsAllAlign()) 
1F38:  BRA    1DEC
1F3A:  MOVF   01,F
1F3C:  BZ    1F40
....................                     decisionCounter++; 
1F3E:  INCF   26,F
....................             } 
1F40:  BRA    1F5A
....................  
....................             else if (decisionCounter == 1) 
1F42:  DECFSZ 26,W
1F44:  BRA    1F52
....................             { 
....................                 Align(); 
1F46:  RCALL  1B86
....................                 if(IsAllOutside()) 
1F48:  BRA    1E3C
1F4A:  MOVF   01,F
1F4C:  BZ    1F50
....................                 { 
....................                     decisionCounter++; 
1F4E:  INCF   26,F
....................                 } 
....................             } 
1F50:  BRA    1F5A
....................  
....................             else 
....................             { 
....................                 ///Se ja passou por todas as decisões 
....................                 SetBothPwm(0); 
1F52:  CLRF   35
1F54:  CLRF   34
1F56:  CALL   1714
....................             } 
....................         } 
1F5A:  BRA    1F6C
....................  
....................         else 
....................         { 
....................             SetBothPwm(0); 
1F5C:  CLRF   35
1F5E:  CLRF   34
1F60:  CALL   1714
....................             SetBothPwm(0); 
1F64:  CLRF   35
1F66:  CLRF   34
1F68:  CALL   1714
....................         } 
....................     } while (1); 
1F6C:  BRA    1ECE
.................... } 
....................  
1F6E:  SLEEP 
.................... void Setup() 
.................... { 
....................     adCounter = 1; 
*
135E:  MOVLW  01
1360:  MOVWF  25
....................     running = 0; 
1362:  CLRF   22
....................  
....................     setup_adc_ports(AN0_TO_AN3); 
1364:  MOVF   FC1,W
1366:  ANDLW  C0
1368:  IORLW  0B
136A:  MOVWF  FC1
....................     setup_adc(ADC_CLOCK_DIV_4); 
136C:  MOVF   FC0,W
136E:  ANDLW  C0
1370:  IORLW  04
1372:  MOVWF  FC0
1374:  BSF    FC0.7
1376:  BSF    FC2.0
....................  
....................     setup_timer_0(RTCC_INTERNAL | RTCC_DIV_2 | RTCC_8_BIT); 
1378:  MOVLW  C0
137A:  MOVWF  FD5
....................     set_timer0(0); 
137C:  CLRF   FD7
137E:  CLRF   FD6
....................     enable_interrupts(INT_TIMER0); 
1380:  BSF    FF2.5
....................     enable_interrupts(GLOBAL); 
1382:  IORWF  FF2,F
....................  
....................     lcd_ini(); 
1384:  BRA    12D8
....................     MotorInitialize(); 
1386:  BRA    133E
1388:  GOTO   1EB0 (RETURN)
....................     // SetBothPwm(0); 
....................     // frente(); 
.................... } 
....................  
.................... void ClearScreen() 
.................... { 
....................     lcd_escreve('\f'); 
*
1414:  MOVLW  0C
1416:  MOVWF  36
1418:  RCALL  13AE
141A:  GOTO   1EEC (RETURN)
.................... } 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
