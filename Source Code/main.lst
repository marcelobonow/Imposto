CCS PCH C Compiler, Version 5.015, 5967               26-ago-18 22:28

               Filename:   D:\Projetos\Imposto\Source Code\main.lst

               ROM used:   3818 bytes (12%)
                           Largest free fragment is 24850
               RAM used:   36 (2%) at main() level
                           82 (4%) worst case
               Stack used: 11 locations (5 in main + 6 for interrupts)
               Stack size: 31

*
1000:  GOTO   1E7A
*
1008:  MOVWF  04
100A:  MOVFF  FD8,05
100E:  MOVFF  FE0,06
1012:  MOVLB  0
1014:  MOVFF  FE9,0C
1018:  MOVFF  FEA,07
101C:  MOVFF  FE1,08
1020:  MOVFF  FE2,09
1024:  MOVFF  FD9,0A
1028:  MOVFF  FDA,0B
102C:  MOVFF  FF3,12
1030:  MOVFF  FF4,13
1034:  MOVFF  FFA,14
1038:  MOVFF  00,0E
103C:  MOVFF  01,0F
1040:  MOVFF  02,10
1044:  MOVFF  03,11
1048:  BTFSS  FF2.5
104A:  GOTO   1054
104E:  BTFSC  FF2.2
1050:  GOTO   1944
1054:  MOVFF  0E,00
1058:  MOVFF  0F,01
105C:  MOVFF  10,02
1060:  MOVFF  11,03
1064:  MOVFF  0C,FE9
1068:  MOVFF  07,FEA
106C:  BSF    07.7
106E:  MOVFF  08,FE1
1072:  MOVFF  09,FE2
1076:  MOVFF  0A,FD9
107A:  MOVFF  0B,FDA
107E:  MOVFF  12,FF3
1082:  MOVFF  13,FF4
1086:  MOVFF  14,FFA
108A:  MOVF   04,W
108C:  MOVFF  06,FE0
1090:  MOVFF  05,FD8
1094:  RETFIE 0
.................... //#DEFINE DEBUG 
.................... #include <main.h> 
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
1096:  MOVFF  FF2,0D
109A:  BCF    FF2.7
109C:  CLRF   FF7
109E:  ADDLW  B0
10A0:  MOVWF  FF6
10A2:  MOVLW  10
10A4:  ADDWFC FF7,F
10A6:  TBLRD*+
10A8:  MOVF   FF5,W
10AA:  BTFSC  0D.7
10AC:  BSF    FF2.7
10AE:  RETURN 0
10B0:  DATA 28,0C
10B2:  DATA 01,06
*
11DC:  TBLRD*+
11DE:  MOVF   FF5,F
11E0:  BZ    11FA
11E2:  MOVFF  FF6,3E
11E6:  MOVFF  FF7,3F
11EA:  MOVFF  FF5,49
11EE:  RCALL  118C
11F0:  MOVFF  3E,FF6
11F4:  MOVFF  3F,FF7
11F8:  BRA    11DC
11FA:  RETURN 0
11FC:  MOVFF  FEA,48
1200:  MOVFF  FE9,47
1204:  BTFSS  41.7
1206:  BRA    1218
1208:  BSF    47.7
120A:  BTFSS  47.4
120C:  INCF   47,F
120E:  COMF   40,F
1210:  COMF   41,F
1212:  INCF   40,F
1214:  BTFSC  FD8.2
1216:  INCF   41,F
1218:  SWAPF  41,W
121A:  IORLW  F0
121C:  MOVWF  43
121E:  ADDWF  43,F
1220:  ADDLW  E2
1222:  MOVWF  44
1224:  ADDLW  32
1226:  MOVWF  46
1228:  MOVF   41,W
122A:  ANDLW  0F
122C:  ADDWF  44,F
122E:  ADDWF  44,F
1230:  ADDWF  46,F
1232:  ADDLW  E9
1234:  MOVWF  45
1236:  ADDWF  45,F
1238:  ADDWF  45,F
123A:  SWAPF  40,W
123C:  ANDLW  0F
123E:  ADDWF  45,F
1240:  ADDWF  46,F
1242:  RLCF   45,F
1244:  RLCF   46,F
1246:  COMF   46,F
1248:  RLCF   46,F
124A:  MOVF   40,W
124C:  ANDLW  0F
124E:  ADDWF  46,F
1250:  RLCF   43,F
1252:  MOVLW  07
1254:  MOVWF  42
1256:  MOVLW  0A
1258:  DECF   45,F
125A:  ADDWF  46,F
125C:  BNC   1258
125E:  DECF   44,F
1260:  ADDWF  45,F
1262:  BNC   125E
1264:  DECF   43,F
1266:  ADDWF  44,F
1268:  BNC   1264
126A:  DECF   42,F
126C:  ADDWF  43,F
126E:  BNC   126A
1270:  CLRF   FEA
1272:  MOVLW  42
1274:  MOVWF  FE9
1276:  MOVLW  07
1278:  ANDWF  47,W
127A:  BCF    47.6
127C:  MOVF   FED,F
127E:  ANDWF  47,W
1280:  BNZ   1290
1282:  BTFSC  47.4
1284:  MOVF   FEE,F
1286:  BTFSC  47.4
1288:  BRA    1290
128A:  MOVLW  20
128C:  MOVWF  00
128E:  BRA    12D0
1290:  ADDWF  FE9,F
1292:  MOVLW  00
1294:  ADDWFC FEA,F
1296:  MOVF   FE9,W
1298:  SUBLW  46
129A:  BNZ   12A2
129C:  MOVF   FEA,F
129E:  BNZ   12A2
12A0:  BSF    47.6
12A2:  MOVF   FEF,W
12A4:  MOVWF  00
12A6:  BNZ   12B8
12A8:  BTFSC  47.6
12AA:  BRA    12B8
12AC:  BTFSC  47.4
12AE:  BRA    12E6
12B0:  BTFSC  47.3
12B2:  BRA    12B8
12B4:  MOVLW  20
12B6:  BRA    12CE
12B8:  BTFSS  47.7
12BA:  BRA    12C8
12BC:  MOVLW  2D
12BE:  MOVWF  00
12C0:  MOVF   FED,W
12C2:  BCF    47.6
12C4:  BCF    47.7
12C6:  BRA    12D0
12C8:  BSF    47.3
12CA:  BCF    47.4
12CC:  MOVLW  30
12CE:  ADDWF  00,F
12D0:  MOVFF  FEA,41
12D4:  MOVFF  FE9,40
12D8:  MOVFF  00,49
12DC:  RCALL  118C
12DE:  MOVFF  41,FEA
12E2:  MOVFF  40,FE9
12E6:  MOVF   FEE,W
12E8:  BTFSS  47.6
12EA:  BRA    1296
12EC:  RETURN 0
12EE:  MOVLW  8E
12F0:  MOVWF  00
12F2:  MOVFF  43,01
12F6:  MOVFF  42,02
12FA:  CLRF   03
12FC:  MOVF   01,F
12FE:  BNZ   1312
1300:  MOVFF  02,01
1304:  CLRF   02
1306:  MOVLW  08
1308:  SUBWF  00,F
130A:  MOVF   01,F
130C:  BNZ   1312
130E:  CLRF   00
1310:  BRA    1322
1312:  BCF    FD8.0
1314:  BTFSC  01.7
1316:  BRA    1320
1318:  RLCF   02,F
131A:  RLCF   01,F
131C:  DECF   00,F
131E:  BRA    1312
1320:  BCF    01.7
1322:  RETURN 0
1324:  MOVF   42,W
1326:  BTFSC  FD8.2
1328:  BRA    1474
132A:  MOVWF  4E
132C:  MOVF   46,W
132E:  BTFSC  FD8.2
1330:  BRA    1474
1332:  SUBWF  4E,F
1334:  BNC   1340
1336:  MOVLW  7F
1338:  ADDWF  4E,F
133A:  BTFSC  FD8.0
133C:  BRA    1474
133E:  BRA    134C
1340:  MOVLW  81
1342:  SUBWF  4E,F
1344:  BTFSS  FD8.0
1346:  BRA    1474
1348:  BTFSC  FD8.2
134A:  BRA    1474
134C:  MOVFF  4E,00
1350:  CLRF   01
1352:  CLRF   02
1354:  CLRF   03
1356:  CLRF   4D
1358:  MOVFF  43,4C
135C:  BSF    4C.7
135E:  MOVFF  44,4B
1362:  MOVFF  45,4A
1366:  MOVLW  19
1368:  MOVWF  4E
136A:  MOVF   49,W
136C:  SUBWF  4A,F
136E:  BC    138A
1370:  MOVLW  01
1372:  SUBWF  4B,F
1374:  BC    138A
1376:  SUBWF  4C,F
1378:  BC    138A
137A:  SUBWF  4D,F
137C:  BC    138A
137E:  INCF   4D,F
1380:  INCF   4C,F
1382:  INCF   4B,F
1384:  MOVF   49,W
1386:  ADDWF  4A,F
1388:  BRA    13DA
138A:  MOVF   48,W
138C:  SUBWF  4B,F
138E:  BC    13B4
1390:  MOVLW  01
1392:  SUBWF  4C,F
1394:  BC    13B4
1396:  SUBWF  4D,F
1398:  BC    13B4
139A:  INCF   4D,F
139C:  INCF   4C,F
139E:  MOVF   48,W
13A0:  ADDWF  4B,F
13A2:  MOVF   49,W
13A4:  ADDWF  4A,F
13A6:  BNC   13DA
13A8:  INCF   4B,F
13AA:  BNZ   13DA
13AC:  INCF   4C,F
13AE:  BNZ   13DA
13B0:  INCF   4D,F
13B2:  BRA    13DA
13B4:  MOVF   47,W
13B6:  IORLW  80
13B8:  SUBWF  4C,F
13BA:  BC    13D8
13BC:  MOVLW  01
13BE:  SUBWF  4D,F
13C0:  BC    13D8
13C2:  INCF   4D,F
13C4:  MOVF   47,W
13C6:  IORLW  80
13C8:  ADDWF  4C,F
13CA:  MOVF   48,W
13CC:  ADDWF  4B,F
13CE:  BNC   13A2
13D0:  INCF   4C,F
13D2:  BNZ   13A2
13D4:  INCF   4D,F
13D6:  BRA    13A2
13D8:  BSF    03.0
13DA:  DECFSZ 4E,F
13DC:  BRA    13E0
13DE:  BRA    13F6
13E0:  BCF    FD8.0
13E2:  RLCF   4A,F
13E4:  RLCF   4B,F
13E6:  RLCF   4C,F
13E8:  RLCF   4D,F
13EA:  BCF    FD8.0
13EC:  RLCF   03,F
13EE:  RLCF   02,F
13F0:  RLCF   01,F
13F2:  RLCF   4F,F
13F4:  BRA    136A
13F6:  BTFSS  4F.0
13F8:  BRA    1406
13FA:  BCF    FD8.0
13FC:  RRCF   01,F
13FE:  RRCF   02,F
1400:  RRCF   03,F
1402:  RRCF   4F,F
1404:  BRA    140A
1406:  DECF   00,F
1408:  BZ    1474
140A:  BTFSC  4F.7
140C:  BRA    144A
140E:  BCF    FD8.0
1410:  RLCF   4A,F
1412:  RLCF   4B,F
1414:  RLCF   4C,F
1416:  RLCF   4D,F
1418:  MOVF   49,W
141A:  SUBWF  4A,F
141C:  BC    142C
141E:  MOVLW  01
1420:  SUBWF  4B,F
1422:  BC    142C
1424:  SUBWF  4C,F
1426:  BC    142C
1428:  SUBWF  4D,F
142A:  BNC   1460
142C:  MOVF   48,W
142E:  SUBWF  4B,F
1430:  BC    143C
1432:  MOVLW  01
1434:  SUBWF  4C,F
1436:  BC    143C
1438:  SUBWF  4D,F
143A:  BNC   1460
143C:  MOVF   47,W
143E:  IORLW  80
1440:  SUBWF  4C,F
1442:  BC    144A
1444:  MOVLW  01
1446:  SUBWF  4D,F
1448:  BNC   1460
144A:  INCF   03,F
144C:  BNZ   1460
144E:  INCF   02,F
1450:  BNZ   1460
1452:  INCF   01,F
1454:  BNZ   1460
1456:  INCF   00,F
1458:  BZ    1474
145A:  RRCF   01,F
145C:  RRCF   02,F
145E:  RRCF   03,F
1460:  MOVFF  43,4E
1464:  MOVF   47,W
1466:  XORWF  4E,F
1468:  BTFSS  4E.7
146A:  BRA    1470
146C:  BSF    01.7
146E:  BRA    147C
1470:  BCF    01.7
1472:  BRA    147C
1474:  CLRF   00
1476:  CLRF   01
1478:  CLRF   02
147A:  CLRF   03
147C:  RETURN 0
147E:  MOVF   3E,W
1480:  BTFSC  FD8.2
1482:  BRA    1566
1484:  MOVWF  00
1486:  MOVF   42,W
1488:  BTFSC  FD8.2
148A:  BRA    1566
148C:  ADDWF  00,F
148E:  BNC   1498
1490:  MOVLW  81
1492:  ADDWF  00,F
1494:  BC    1566
1496:  BRA    14A0
1498:  MOVLW  7F
149A:  SUBWF  00,F
149C:  BNC   1566
149E:  BZ    1566
14A0:  MOVFF  3F,46
14A4:  MOVF   43,W
14A6:  XORWF  46,F
14A8:  BSF    3F.7
14AA:  BSF    43.7
14AC:  MOVF   41,W
14AE:  MULWF  45
14B0:  MOVFF  FF4,48
14B4:  MOVF   40,W
14B6:  MULWF  44
14B8:  MOVFF  FF4,03
14BC:  MOVFF  FF3,47
14C0:  MULWF  45
14C2:  MOVF   FF3,W
14C4:  ADDWF  48,F
14C6:  MOVF   FF4,W
14C8:  ADDWFC 47,F
14CA:  MOVLW  00
14CC:  ADDWFC 03,F
14CE:  MOVF   41,W
14D0:  MULWF  44
14D2:  MOVF   FF3,W
14D4:  ADDWF  48,F
14D6:  MOVF   FF4,W
14D8:  ADDWFC 47,F
14DA:  MOVLW  00
14DC:  CLRF   02
14DE:  ADDWFC 03,F
14E0:  ADDWFC 02,F
14E2:  MOVF   3F,W
14E4:  MULWF  45
14E6:  MOVF   FF3,W
14E8:  ADDWF  47,F
14EA:  MOVF   FF4,W
14EC:  ADDWFC 03,F
14EE:  MOVLW  00
14F0:  ADDWFC 02,F
14F2:  MOVF   3F,W
14F4:  MULWF  44
14F6:  MOVF   FF3,W
14F8:  ADDWF  03,F
14FA:  MOVF   FF4,W
14FC:  ADDWFC 02,F
14FE:  MOVLW  00
1500:  CLRF   01
1502:  ADDWFC 01,F
1504:  MOVF   41,W
1506:  MULWF  43
1508:  MOVF   FF3,W
150A:  ADDWF  47,F
150C:  MOVF   FF4,W
150E:  ADDWFC 03,F
1510:  MOVLW  00
1512:  ADDWFC 02,F
1514:  ADDWFC 01,F
1516:  MOVF   40,W
1518:  MULWF  43
151A:  MOVF   FF3,W
151C:  ADDWF  03,F
151E:  MOVF   FF4,W
1520:  ADDWFC 02,F
1522:  MOVLW  00
1524:  ADDWFC 01,F
1526:  MOVF   3F,W
1528:  MULWF  43
152A:  MOVF   FF3,W
152C:  ADDWF  02,F
152E:  MOVF   FF4,W
1530:  ADDWFC 01,F
1532:  INCF   00,F
1534:  BTFSC  01.7
1536:  BRA    1542
1538:  RLCF   47,F
153A:  RLCF   03,F
153C:  RLCF   02,F
153E:  RLCF   01,F
1540:  DECF   00,F
1542:  MOVLW  00
1544:  BTFSS  47.7
1546:  BRA    155C
1548:  INCF   03,F
154A:  ADDWFC 02,F
154C:  ADDWFC 01,F
154E:  MOVF   01,W
1550:  BNZ   155C
1552:  MOVF   02,W
1554:  BNZ   155C
1556:  MOVF   03,W
1558:  BNZ   155C
155A:  INCF   00,F
155C:  BTFSC  46.7
155E:  BSF    01.7
1560:  BTFSS  46.7
1562:  BCF    01.7
1564:  BRA    156E
1566:  CLRF   00
1568:  CLRF   01
156A:  CLRF   02
156C:  CLRF   03
156E:  RETURN 0
1570:  MOVLW  80
1572:  BTFSC  FD8.1
1574:  XORWF  47,F
1576:  CLRF   4C
1578:  CLRF   4D
157A:  MOVFF  43,4B
157E:  MOVF   47,W
1580:  XORWF  4B,F
1582:  MOVF   42,W
1584:  BTFSC  FD8.2
1586:  BRA    1740
1588:  MOVWF  4A
158A:  MOVWF  00
158C:  MOVF   46,W
158E:  BTFSC  FD8.2
1590:  BRA    1752
1592:  SUBWF  4A,F
1594:  BTFSC  FD8.2
1596:  BRA    169A
1598:  BNC   1614
159A:  MOVFF  47,50
159E:  BSF    50.7
15A0:  MOVFF  48,4F
15A4:  MOVFF  49,4E
15A8:  CLRF   4D
15AA:  BCF    FD8.0
15AC:  RRCF   50,F
15AE:  RRCF   4F,F
15B0:  RRCF   4E,F
15B2:  RRCF   4D,F
15B4:  DECFSZ 4A,F
15B6:  BRA    15A8
15B8:  BTFSS  4B.7
15BA:  BRA    15C2
15BC:  BSF    4C.0
15BE:  BRA    177A
15C0:  BCF    4C.0
15C2:  BCF    4A.0
15C4:  BSF    4C.4
15C6:  CLRF   FEA
15C8:  MOVLW  45
15CA:  MOVWF  FE9
15CC:  BRA    17A0
15CE:  BCF    4C.4
15D0:  BTFSC  4B.7
15D2:  BRA    15E8
15D4:  BTFSS  4A.0
15D6:  BRA    15FE
15D8:  RRCF   50,F
15DA:  RRCF   4F,F
15DC:  RRCF   4E,F
15DE:  RRCF   4D,F
15E0:  INCF   00,F
15E2:  BTFSC  FD8.2
15E4:  BRA    1770
15E6:  BRA    15FE
15E8:  BTFSC  50.7
15EA:  BRA    1604
15EC:  BCF    FD8.0
15EE:  RLCF   4D,F
15F0:  RLCF   4E,F
15F2:  RLCF   4F,F
15F4:  RLCF   50,F
15F6:  DECF   00,F
15F8:  BTFSC  FD8.2
15FA:  BRA    1770
15FC:  BRA    15E8
15FE:  BSF    4C.6
1600:  BRA    16D8
1602:  BCF    4C.6
1604:  MOVFF  43,4B
1608:  BTFSS  43.7
160A:  BRA    1610
160C:  BSF    50.7
160E:  BRA    1762
1610:  BCF    50.7
1612:  BRA    1762
1614:  MOVFF  46,4A
1618:  MOVFF  46,00
161C:  MOVF   42,W
161E:  SUBWF  4A,F
1620:  MOVFF  43,50
1624:  BSF    50.7
1626:  MOVFF  44,4F
162A:  MOVFF  45,4E
162E:  CLRF   4D
1630:  BCF    FD8.0
1632:  RRCF   50,F
1634:  RRCF   4F,F
1636:  RRCF   4E,F
1638:  RRCF   4D,F
163A:  DECFSZ 4A,F
163C:  BRA    162E
163E:  BTFSS  4B.7
1640:  BRA    1648
1642:  BSF    4C.1
1644:  BRA    177A
1646:  BCF    4C.1
1648:  BCF    4A.0
164A:  BSF    4C.5
164C:  CLRF   FEA
164E:  MOVLW  49
1650:  MOVWF  FE9
1652:  BRA    17A0
1654:  BCF    4C.5
1656:  BTFSC  4B.7
1658:  BRA    166E
165A:  BTFSS  4A.0
165C:  BRA    1684
165E:  RRCF   50,F
1660:  RRCF   4F,F
1662:  RRCF   4E,F
1664:  RRCF   4D,F
1666:  INCF   00,F
1668:  BTFSC  FD8.2
166A:  BRA    1770
166C:  BRA    1684
166E:  BTFSC  50.7
1670:  BRA    168A
1672:  BCF    FD8.0
1674:  RLCF   4D,F
1676:  RLCF   4E,F
1678:  RLCF   4F,F
167A:  RLCF   50,F
167C:  DECF   00,F
167E:  BTFSC  FD8.2
1680:  BRA    1770
1682:  BRA    166E
1684:  BSF    4C.7
1686:  BRA    16D8
1688:  BCF    4C.7
168A:  MOVFF  47,4B
168E:  BTFSS  47.7
1690:  BRA    1696
1692:  BSF    50.7
1694:  BRA    1762
1696:  BCF    50.7
1698:  BRA    1762
169A:  MOVFF  47,50
169E:  BSF    50.7
16A0:  MOVFF  48,4F
16A4:  MOVFF  49,4E
16A8:  BTFSS  4B.7
16AA:  BRA    16B4
16AC:  BCF    50.7
16AE:  BSF    4C.2
16B0:  BRA    177A
16B2:  BCF    4C.2
16B4:  CLRF   4D
16B6:  BCF    4A.0
16B8:  CLRF   FEA
16BA:  MOVLW  45
16BC:  MOVWF  FE9
16BE:  BRA    17A0
16C0:  BTFSC  4B.7
16C2:  BRA    16FC
16C4:  MOVFF  43,4B
16C8:  BTFSS  4A.0
16CA:  BRA    16D8
16CC:  RRCF   50,F
16CE:  RRCF   4F,F
16D0:  RRCF   4E,F
16D2:  RRCF   4D,F
16D4:  INCF   00,F
16D6:  BZ    1770
16D8:  BTFSS  4D.7
16DA:  BRA    16F2
16DC:  INCF   4E,F
16DE:  BNZ   16F2
16E0:  INCF   4F,F
16E2:  BNZ   16F2
16E4:  INCF   50,F
16E6:  BNZ   16F2
16E8:  RRCF   50,F
16EA:  RRCF   4F,F
16EC:  RRCF   4E,F
16EE:  INCF   00,F
16F0:  BZ    1770
16F2:  BTFSC  4C.6
16F4:  BRA    1602
16F6:  BTFSC  4C.7
16F8:  BRA    1688
16FA:  BRA    1734
16FC:  MOVLW  80
16FE:  XORWF  50,F
1700:  BTFSS  50.7
1702:  BRA    170C
1704:  BRA    177A
1706:  MOVFF  47,4B
170A:  BRA    1720
170C:  MOVFF  43,4B
1710:  MOVF   50,F
1712:  BNZ   1720
1714:  MOVF   4F,F
1716:  BNZ   1720
1718:  MOVF   4E,F
171A:  BNZ   1720
171C:  CLRF   00
171E:  BRA    1762
1720:  BTFSC  50.7
1722:  BRA    1734
1724:  BCF    FD8.0
1726:  RLCF   4D,F
1728:  RLCF   4E,F
172A:  RLCF   4F,F
172C:  RLCF   50,F
172E:  DECFSZ 00,F
1730:  BRA    1720
1732:  BRA    1770
1734:  BTFSS  4B.7
1736:  BRA    173C
1738:  BSF    50.7
173A:  BRA    1762
173C:  BCF    50.7
173E:  BRA    1762
1740:  MOVFF  46,00
1744:  MOVFF  47,50
1748:  MOVFF  48,4F
174C:  MOVFF  49,4E
1750:  BRA    1762
1752:  MOVFF  42,00
1756:  MOVFF  43,50
175A:  MOVFF  44,4F
175E:  MOVFF  45,4E
1762:  MOVFF  50,01
1766:  MOVFF  4F,02
176A:  MOVFF  4E,03
176E:  BRA    17D8
1770:  CLRF   00
1772:  CLRF   01
1774:  CLRF   02
1776:  CLRF   03
1778:  BRA    17D8
177A:  CLRF   4D
177C:  COMF   4E,F
177E:  COMF   4F,F
1780:  COMF   50,F
1782:  COMF   4D,F
1784:  INCF   4D,F
1786:  BNZ   1792
1788:  INCF   4E,F
178A:  BNZ   1792
178C:  INCF   4F,F
178E:  BNZ   1792
1790:  INCF   50,F
1792:  BTFSC  4C.0
1794:  BRA    15C0
1796:  BTFSC  4C.1
1798:  BRA    1646
179A:  BTFSC  4C.2
179C:  BRA    16B2
179E:  BRA    1706
17A0:  MOVF   FEF,W
17A2:  ADDWF  4E,F
17A4:  BNC   17B0
17A6:  INCF   4F,F
17A8:  BNZ   17B0
17AA:  INCF   50,F
17AC:  BTFSC  FD8.2
17AE:  BSF    4A.0
17B0:  MOVF   FED,F
17B2:  MOVF   FEF,W
17B4:  ADDWF  4F,F
17B6:  BNC   17BE
17B8:  INCF   50,F
17BA:  BTFSC  FD8.2
17BC:  BSF    4A.0
17BE:  MOVF   FED,F
17C0:  MOVF   FEF,W
17C2:  BTFSC  FEF.7
17C4:  BRA    17C8
17C6:  XORLW  80
17C8:  ADDWF  50,F
17CA:  BTFSC  FD8.0
17CC:  BSF    4A.0
17CE:  BTFSC  4C.4
17D0:  BRA    15CE
17D2:  BTFSC  4C.5
17D4:  BRA    1654
17D6:  BRA    16C0
17D8:  RETURN 0
17DA:  MOVFF  3F,46
17DE:  MOVF   43,W
17E0:  XORWF  46,F
17E2:  BTFSS  46.7
17E4:  BRA    17F0
17E6:  BCF    FD8.2
17E8:  BCF    FD8.0
17EA:  BTFSC  3F.7
17EC:  BSF    FD8.0
17EE:  BRA    184E
17F0:  MOVFF  3F,46
17F4:  MOVFF  42,47
17F8:  MOVF   3E,W
17FA:  SUBWF  47,F
17FC:  BZ    180A
17FE:  BTFSS  46.7
1800:  BRA    184E
1802:  MOVF   FD8,W
1804:  XORLW  01
1806:  MOVWF  FD8
1808:  BRA    184E
180A:  MOVFF  43,47
180E:  MOVF   3F,W
1810:  SUBWF  47,F
1812:  BZ    1820
1814:  BTFSS  46.7
1816:  BRA    184E
1818:  MOVF   FD8,W
181A:  XORLW  01
181C:  MOVWF  FD8
181E:  BRA    184E
1820:  MOVFF  44,47
1824:  MOVF   40,W
1826:  SUBWF  47,F
1828:  BZ    1836
182A:  BTFSS  46.7
182C:  BRA    184E
182E:  MOVF   FD8,W
1830:  XORLW  01
1832:  MOVWF  FD8
1834:  BRA    184E
1836:  MOVFF  45,47
183A:  MOVF   41,W
183C:  SUBWF  47,F
183E:  BZ    184C
1840:  BTFSS  46.7
1842:  BRA    184E
1844:  MOVF   FD8,W
1846:  XORLW  01
1848:  MOVWF  FD8
184A:  BRA    184E
184C:  BCF    FD8.0
184E:  RETURN 0
*
18A0:  MOVLW  8E
18A2:  MOVWF  00
18A4:  MOVF   3E,W
18A6:  SUBWF  00,F
18A8:  MOVFF  3F,02
18AC:  MOVFF  40,01
18B0:  BSF    02.7
18B2:  MOVF   00,F
18B4:  BZ    18C8
18B6:  BCF    FD8.0
18B8:  MOVF   02,F
18BA:  BNZ   18C0
18BC:  MOVF   01,F
18BE:  BZ    18C8
18C0:  RRCF   02,F
18C2:  RRCF   01,F
18C4:  DECFSZ 00,F
18C6:  BRA    18B6
18C8:  BTFSS  3F.7
18CA:  BRA    18D6
18CC:  COMF   01,F
18CE:  COMF   02,F
18D0:  INCF   01,F
18D2:  BTFSC  FD8.2
18D4:  INCF   02,F
18D6:  RETURN 0
18D8:  TBLRD*+
18DA:  MOVFF  FF6,41
18DE:  MOVFF  FF7,42
18E2:  MOVFF  FF5,49
18E6:  RCALL  118C
18E8:  MOVFF  41,FF6
18EC:  MOVFF  42,FF7
18F0:  DECFSZ 40,F
18F2:  BRA    18D8
18F4:  RETURN 0
*
1CFC:  DATA 31,3A
1CFE:  DATA 20,00
1D00:  DATA 20,32
1D02:  DATA 3A,20
1D04:  DATA 00,00
1D06:  DATA 45,73
1D08:  DATA 74,61
1D0A:  DATA 20,61
1D0C:  DATA 20,64
1D0E:  DATA 69,72
1D10:  DATA 65,69
1D12:  DATA 74,61
1D14:  DATA 00,00
1D16:  DATA 45,73
1D18:  DATA 74,61
1D1A:  DATA 20,61
1D1C:  DATA 20,65
1D1E:  DATA 73,71
1D20:  DATA 75,65
1D22:  DATA 72,64
1D24:  DATA 61,00
1D26:  DATA 70,31
1D28:  DATA 3A,20
1D2A:  DATA 25,34
1D2C:  DATA 6C,64
1D2E:  DATA 00,00
1D30:  DATA 70,32
1D32:  DATA 3A,20
1D34:  DATA 25,34
1D36:  DATA 6C,64
1D38:  DATA 00,00
1D3A:  DATA 53,65
1D3C:  DATA 20,70
1D3E:  DATA 65,72
1D40:  DATA 64,65
1D42:  DATA 75,00
1D44:  DATA 20,49
1D46:  DATA 6E,69
1D48:  DATA 63,69
1D4A:  DATA 61,6C
1D4C:  DATA 69,7A
1D4E:  DATA 61,6E
1D50:  DATA 64,6F
1D52:  DATA 00,00
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=48MHz,crystal=20MHz) 
*
10B4:  MOVLW  01
10B6:  SUBWF  50,F
10B8:  BNC   10D2
10BA:  CLRF   FEA
10BC:  MOVLW  50
10BE:  MOVWF  FE9
10C0:  MOVF   FEF,W
10C2:  BZ    10D2
10C4:  MOVLW  02
10C6:  MOVWF  00
10C8:  DECFSZ 00,F
10CA:  BRA    10C8
10CC:  BRA    10CE
10CE:  DECFSZ FEF,F
10D0:  BRA    10C4
10D2:  RETURN 0
*
1142:  CLRF   FEA
1144:  MOVLW  4A
1146:  MOVWF  FE9
1148:  MOVF   FEF,W
114A:  BZ    1168
114C:  MOVLW  0F
114E:  MOVWF  01
1150:  CLRF   00
1152:  DECFSZ 00,F
1154:  BRA    1152
1156:  DECFSZ 01,F
1158:  BRA    1150
115A:  MOVLW  8F
115C:  MOVWF  00
115E:  DECFSZ 00,F
1160:  BRA    115E
1162:  NOP   
1164:  DECFSZ FEF,F
1166:  BRA    114C
1168:  RETURN 0
....................  
.................... // #build(reset=0x1000, interrupt=0x1008) 
.................... // #org 0x000, 0xfff { } 
....................  
.................... #include <Motor1.c> 
.................... #build(reset = 0x1000, interrupt = 0x1008) 
.................... #org 0x000, 0xfff {} 
....................  
.................... #define m1p1 pin_e2 
.................... #define m1p2 pin_c0 
.................... #define m2p1 pin_d0 
.................... #define m2p2 pin_d1 
....................  
.................... void tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void frente() 
.................... { 
....................       output_bit(m1p1, 1); 
*
1E22:  BSF    F8D.2
1E24:  BCF    F96.2
....................       output_bit(m1p2, 0); 
1E26:  BCF    F8B.0
1E28:  BCF    F94.0
....................       output_bit(m2p1, 0); 
1E2A:  BCF    F8C.0
1E2C:  BCF    F95.0
....................       output_bit(m2p2, 1); 
1E2E:  BSF    F8C.1
1E30:  BCF    F95.1
1E32:  GOTO   1E76 (RETURN)
.................... } 
....................  
.................... void gira_esquerda() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void gira_direita() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_frente() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_frente() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void para() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void MotorInitialize() 
.................... { 
....................       setup_timer_2(T2_DIV_BY_16, 255, 1); //341 us overflow, 341 us interrupt 
*
1E02:  MOVLW  00
1E04:  IORLW  06
1E06:  MOVWF  FCA
1E08:  MOVLW  FF
1E0A:  MOVWF  FCB
....................  
....................       setup_ccp1(CCP_PWM | CCP_SHUTDOWN_AC_L | CCP_SHUTDOWN_BD_L); 
1E0C:  BCF    F94.2
1E0E:  BCF    F8B.2
1E10:  MOVLW  0C
1E12:  MOVWF  FBD
1E14:  CLRF   FB7
1E16:  CLRF   FB6
....................       setup_ccp2(CCP_PWM); 
1E18:  BCF    F94.1
1E1A:  BCF    F8B.1
1E1C:  MOVWF  FBA
1E1E:  GOTO   1E60 (RETURN)
.................... } 
....................  
.................... void SetBothPwm(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
18F6:  MOVFF  3F,02
18FA:  MOVFF  3E,01
18FE:  RRCF   02,F
1900:  RRCF   01,F
1902:  RRCF   02,F
1904:  RRCF   01,F
1906:  RRCF   02,F
1908:  MOVFF  01,FBE
190C:  RRCF   02,F
190E:  RRCF   02,W
1910:  ANDLW  30
1912:  MOVWF  00
1914:  MOVF   FBD,W
1916:  ANDLW  CF
1918:  IORWF  00,W
191A:  MOVWF  FBD
....................       set_pwm2_duty((int16)vel); //-50); 
191C:  MOVFF  3F,02
1920:  MOVFF  3E,01
1924:  RRCF   02,F
1926:  RRCF   01,F
1928:  RRCF   02,F
192A:  RRCF   01,F
192C:  RRCF   02,F
192E:  MOVFF  01,FBB
1932:  RRCF   02,F
1934:  RRCF   02,W
1936:  ANDLW  30
1938:  MOVWF  00
193A:  MOVF   FBA,W
193C:  ANDLW  CF
193E:  IORWF  00,W
1940:  MOVWF  FBA
1942:  RETURN 0
.................... } 
....................  
.................... void SetRight(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
1850:  MOVFF  41,02
1854:  MOVFF  40,01
1858:  RRCF   02,F
185A:  RRCF   01,F
185C:  RRCF   02,F
185E:  RRCF   01,F
1860:  RRCF   02,F
1862:  MOVFF  01,FBE
1866:  RRCF   02,F
1868:  RRCF   02,W
186A:  ANDLW  30
186C:  MOVWF  00
186E:  MOVF   FBD,W
1870:  ANDLW  CF
1872:  IORWF  00,W
1874:  MOVWF  FBD
1876:  RETURN 0
.................... } 
.................... void SetLeft(int16 vel) 
.................... { 
....................       set_pwm2_duty((int16)vel); 
1878:  MOVFF  41,02
187C:  MOVFF  40,01
1880:  RRCF   02,F
1882:  RRCF   01,F
1884:  RRCF   02,F
1886:  RRCF   01,F
1888:  RRCF   02,F
188A:  MOVFF  01,FBB
188E:  RRCF   02,F
1890:  RRCF   02,W
1892:  ANDLW  30
1894:  MOVWF  00
1896:  MOVF   FBA,W
1898:  ANDLW  CF
189A:  IORWF  00,W
189C:  MOVWF  FBA
189E:  RETURN 0
.................... } 
....................  
.................... #include <LCD_KIT.c> 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipula��o de m�dulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: F�bio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
.................... /* 
.................... lcd_cursor_on()                        fun��es LCD 
.................... lcd_cursor_pisca() 
.................... lcd_cursor_off() 
.................... lcd_corre_esquerda() 
.................... lcd_corre_direita() 
.................... lcd_envia_nibble( byte dado ) 
.................... lcd_le_byte() 
.................... lcd_ini() 
.................... lcd_pos_xy( byte x, byte y) 
.................... lcd_escreve( char c)                  \f  Clear display                            //// 
....................                                             \n  Go to start of second line               //// 
....................                                   \b  Move back one position                   //// 
....................  
.................... lcd_le( byte x, byte y) 
.................... lcd_apaga() 
.................... { 
....................  
.................... */ 
.................... // As defini��es a seguir s�o utilizadas para acesso aos pinos do display 
.................... // caso o pino RW n�o seja utilizado, comente a defini��o lcd_rw 
.................... #ifndef lcd_enable 
....................    #define lcd_rs         pin_d2      // pino rs do LCD 
....................    #define lcd_enable     pin_d3      // pino enable do LCD 
....................    #define lcd_d4         pin_d4      // pino de dados d4 do LCD 
....................    #define lcd_d5         pin_d5      // pino de dados d5 do LCD 
....................    #define lcd_d6         pin_d6      // pino de dados d6 do LCD 
....................    #define lcd_d7         pin_d7   // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endere�o da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seq��ncia de inicializa��o do m�dulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................  
.................... /*   O 0x20 eh p configurar o tipo do display e talz. 
....................    O Segundo numero configura o modo do cursor, sendo: 
....................                -> 0xf Cursor piscante 
....................                -> 0xe Cursor comum 
....................                -> 0xc Sem cursor 
....................    O terceiro (1) limpa o display 
....................    O Quarto volta com o cursor. 
.................... */ 
....................  
.................... byte lcd_le_byte() 
.................... // l� um byte do LCD (somente com pino RW) 
.................... { 
....................    byte dado; 
....................    // configura os pinos de dados como entradas 
....................    input(lcd_d4); 
....................    input(lcd_d5); 
....................    input(lcd_d6); 
....................    input(lcd_d7); 
....................    // se o pino rw for utilizado, coloca em 1 
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_high(lcd_enable); // habilita display 
....................    dado = 0;   // zera a vari�vel de leitura 
....................    // l� os quatro bits mais significativos 
....................    if (input(lcd_d7)) bit_set(dado,7); 
....................    if (input(lcd_d6)) bit_set(dado,6); 
....................    if (input(lcd_d5)) bit_set(dado,5); 
....................    if (input(lcd_d4)) bit_set(dado,4); 
....................    // d� um pulso na linha enable 
....................    output_low(lcd_enable); 
....................    output_high(lcd_enable); 
....................    // l� os quatro bits menos significativos 
....................    if (input(lcd_d7)) bit_set(dado,3); 
....................    if (input(lcd_d6)) bit_set(dado,2); 
....................    if (input(lcd_d5)) bit_set(dado,1); 
....................    if (input(lcd_d4)) bit_set(dado,0); 
....................    output_low(lcd_enable);   // desabilita o display 
....................    return dado;   // retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
....................    // coloca os quatro bits nas saidas 
....................    output_bit(lcd_d4,bit_test(dado,0)); 
*
10D4:  BTFSC  51.0
10D6:  BRA    10DC
10D8:  BCF    F8C.4
10DA:  BRA    10DE
10DC:  BSF    F8C.4
10DE:  BCF    F95.4
....................    output_bit(lcd_d5,bit_test(dado,1)); 
10E0:  BTFSC  51.1
10E2:  BRA    10E8
10E4:  BCF    F8C.5
10E6:  BRA    10EA
10E8:  BSF    F8C.5
10EA:  BCF    F95.5
....................    output_bit(lcd_d6,bit_test(dado,2)); 
10EC:  BTFSC  51.2
10EE:  BRA    10F4
10F0:  BCF    F8C.6
10F2:  BRA    10F6
10F4:  BSF    F8C.6
10F6:  BCF    F95.6
....................    output_bit(lcd_d7,bit_test(dado,3)); 
10F8:  BTFSC  51.3
10FA:  BRA    1100
10FC:  BCF    F8C.7
10FE:  BRA    1102
1100:  BSF    F8C.7
1102:  BCF    F95.7
....................    // d� um pulso na linha enable 
....................    output_high(lcd_enable); 
1104:  BCF    F95.3
1106:  BSF    F8C.3
....................    output_low(lcd_enable); 
1108:  BCF    F95.3
110A:  BCF    F8C.3
110C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
....................    // coloca a linha rs em 0 
....................    output_low(lcd_rs); 
110E:  BCF    F95.2
1110:  BCF    F8C.2
....................    // aguarda o display ficar desocupado 
....................    //while ( bit_test(lcd_le_byte(),7) ) ; 
....................    // configura a linha rs dependendo do modo selecionado 
....................    output_bit(lcd_rs,endereco); 
1112:  MOVF   4E,F
1114:  BNZ   111A
1116:  BCF    F8C.2
1118:  BRA    111C
111A:  BSF    F8C.2
111C:  BCF    F95.2
....................    delay_us(100);   // aguarda 100 us 
111E:  MOVLW  64
1120:  MOVWF  50
1122:  RCALL  10B4
....................    // caso a linha rw esteja definida, coloca em 0 
....................    #ifdef lcd_rw 
....................       output_low(lcd_rw); 
....................    #endif 
....................    // desativa linha enable 
....................    output_low(lcd_enable); 
1124:  BCF    F95.3
1126:  BCF    F8C.3
....................    // envia a primeira parte do byte 
....................    lcd_envia_nibble(dado >> 4); 
1128:  SWAPF  4F,W
112A:  MOVWF  50
112C:  MOVLW  0F
112E:  ANDWF  50,F
1130:  MOVFF  50,51
1134:  RCALL  10D4
....................    // envia a segunda parte do byte 
....................    lcd_envia_nibble(dado & 0x0f); 
1136:  MOVF   4F,W
1138:  ANDLW  0F
113A:  MOVWF  50
113C:  MOVWF  51
113E:  RCALL  10D4
1140:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicializa��o do display 
.................... { 
....................    byte conta; 
....................    output_low(lcd_d4); 
*
1D54:  BCF    F95.4
1D56:  BCF    F8C.4
....................    output_low(lcd_d5); 
1D58:  BCF    F95.5
1D5A:  BCF    F8C.5
....................    output_low(lcd_d6); 
1D5C:  BCF    F95.6
1D5E:  BCF    F8C.6
....................    output_low(lcd_d7); 
1D60:  BCF    F95.7
1D62:  BCF    F8C.7
....................    output_low(lcd_rs); 
1D64:  BCF    F95.2
1D66:  BCF    F8C.2
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_low(lcd_enable); 
1D68:  BCF    F95.3
1D6A:  BCF    F8C.3
1D6C:  CLRF   16
1D6E:  BTFSC  FF2.7
1D70:  BSF    16.7
1D72:  BCF    FF2.7
....................    delay_ms(15); 
1D74:  MOVLW  0F
1D76:  MOVWF  4A
1D78:  CALL   1142
1D7C:  BTFSC  16.7
1D7E:  BSF    FF2.7
....................    // envia uma seq��ncia de 3 vezes 0x03 
....................    // e depois 0x02 para configurar o m�dulo 
....................    // para modo de 4 bits 
....................    for(conta=1;conta<=3;++conta) 
1D80:  MOVLW  01
1D82:  MOVWF  23
1D84:  MOVF   23,W
1D86:  SUBLW  03
1D88:  BNC   1DB6
1D8A:  CLRF   16
1D8C:  BTFSC  FF2.7
1D8E:  BSF    16.7
1D90:  BCF    FF2.7
....................    { 
....................       lcd_envia_nibble(3); 
1D92:  MOVLW  03
1D94:  MOVWF  51
1D96:  CALL   10D4
1D9A:  BTFSC  16.7
1D9C:  BSF    FF2.7
1D9E:  CLRF   16
1DA0:  BTFSC  FF2.7
1DA2:  BSF    16.7
1DA4:  BCF    FF2.7
....................       delay_ms(5); 
1DA6:  MOVLW  05
1DA8:  MOVWF  4A
1DAA:  CALL   1142
1DAE:  BTFSC  16.7
1DB0:  BSF    FF2.7
1DB2:  INCF   23,F
1DB4:  BRA    1D84
1DB6:  CLRF   16
1DB8:  BTFSC  FF2.7
1DBA:  BSF    16.7
1DBC:  BCF    FF2.7
....................    } 
....................    lcd_envia_nibble(2); 
1DBE:  MOVLW  02
1DC0:  MOVWF  51
1DC2:  CALL   10D4
1DC6:  BTFSC  16.7
1DC8:  BSF    FF2.7
....................    // envia string de inicializa��o do display 
....................    for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
1DCA:  CLRF   23
1DCC:  MOVF   23,W
1DCE:  SUBLW  03
1DD0:  BNC   1DFE
1DD2:  CLRF   03
1DD4:  MOVF   23,W
1DD6:  MOVFF  FF2,24
1DDA:  BCF    FF2.7
1DDC:  CALL   1096
1DE0:  BTFSC  24.7
1DE2:  BSF    FF2.7
1DE4:  MOVWF  24
1DE6:  CLRF   16
1DE8:  BTFSC  FF2.7
1DEA:  BSF    16.7
1DEC:  BCF    FF2.7
1DEE:  CLRF   4E
1DF0:  MOVWF  4F
1DF2:  CALL   110E
1DF6:  BTFSC  16.7
1DF8:  BSF    FF2.7
1DFA:  INCF   23,F
1DFC:  BRA    1DCC
1DFE:  GOTO   1E5E (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
116A:  DECFSZ 4B,W
116C:  BRA    1170
116E:  BRA    1176
....................       endereco = lcd_seg_lin; 
1170:  MOVLW  40
1172:  MOVWF  4C
1174:  BRA    1178
....................    else 
....................       endereco = 0; 
1176:  CLRF   4C
....................    endereco += x-1; 
1178:  MOVLW  01
117A:  SUBWF  4A,W
117C:  ADDWF  4C,F
....................    lcd_envia_byte(0,0x80|endereco); 
117E:  MOVF   4C,W
1180:  IORLW  80
1182:  MOVWF  4D
1184:  CLRF   4E
1186:  MOVWF  4F
1188:  RCALL  110E
118A:  RETURN 0
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
118C:  MOVF   49,W
118E:  XORLW  0C
1190:  BZ    11A0
1192:  XORLW  06
1194:  BZ    11B0
1196:  XORLW  07
1198:  BZ    11B0
119A:  XORLW  05
119C:  BZ    11BC
119E:  BRA    11C6
....................    { 
....................      case '\f'    :   lcd_envia_byte(0,1); 
11A0:  CLRF   4E
11A2:  MOVLW  01
11A4:  MOVWF  4F
11A6:  RCALL  110E
....................               delay_ms(2); 
11A8:  MOVLW  02
11AA:  MOVWF  4A
11AC:  RCALL  1142
....................             break; 
11AE:  BRA    11D0
....................      case '\n'   : 
....................      case '\r'    :   lcd_pos_xy(1,2); 
11B0:  MOVLW  01
11B2:  MOVWF  4A
11B4:  MOVLW  02
11B6:  MOVWF  4B
11B8:  RCALL  116A
....................               break; 
11BA:  BRA    11D0
....................      case '\b'    :   lcd_envia_byte(0,0x10); 
11BC:  CLRF   4E
11BE:  MOVLW  10
11C0:  MOVWF  4F
11C2:  RCALL  110E
....................               break; 
11C4:  BRA    11D0
....................      default   :   lcd_envia_byte(1,c); 
11C6:  MOVLW  01
11C8:  MOVWF  4E
11CA:  MOVFF  49,4F
11CE:  RCALL  110E
....................               break; 
....................    } 
11D0:  RETURN 0
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
....................    char valor; 
....................    // seleciona a posi��o do caractere 
....................    lcd_pos_xy(x,y); 
....................    // ativa rs 
....................    output_high(lcd_rs); 
....................    // l� o caractere 
....................    valor = lcd_le_byte(); 
....................    // desativa rs 
....................    output_low(lcd_rs); 
....................    // retorna o valor do caractere 
....................    return valor; 
.................... } 
....................  
.................... void lcd_apaga() 
.................... { 
....................    lcd_envia_byte(0,1); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_cursor_on() 
....................     { 
.................... lcd_envia_byte(0,0x0E); 
....................     } 
....................  
.................... void lcd_cursor_pisca() 
....................     { 
.................... lcd_envia_byte(0,0x0F); 
....................     } 
....................  
.................... void lcd_cursor_off() 
....................     { 
....................  lcd_envia_byte(0,0x0C); 
....................     } 
....................  
.................... void lcd_corre_esquerda() 
....................     { 
....................  lcd_envia_byte(0,0x18); 
....................     } 
....................  
.................... void lcd_corre_direita() 
....................     { 
.................... lcd_envia_byte(0,0x1C); 
....................     } 
....................  
....................  
....................  
.................... #define button1 pin_a4 
.................... #define button2 pin_a5 
.................... #define button3 pin_e0 
.................... #define button4 pin_e1 
....................  
.................... int running; 
....................  
.................... int16 ad1, ad2, ad3, ad4; 
.................... int16 timerBase; 
.................... int8 adCounter; 
....................  
.................... void ClearScreen(); 
.................... void Setup(); 
....................  
.................... #int_timer0 
.................... void timerTick() 
.................... { 
....................     if (adCounter == 1) 
*
1944:  DECFSZ 22,W
1946:  BRA    1958
....................     { 
....................         ad1 = read_adc(); 
1948:  BSF    FC2.1
194A:  BTFSC  FC2.1
194C:  BRA    194A
194E:  MOVFF  FC3,18
1952:  MOVFF  FC4,19
....................     } 
1956:  BRA    1994
....................     else if (adCounter == 2) 
1958:  MOVF   22,W
195A:  SUBLW  02
195C:  BNZ   196E
....................     { 
....................         ad2 = read_adc(); 
195E:  BSF    FC2.1
1960:  BTFSC  FC2.1
1962:  BRA    1960
1964:  MOVFF  FC3,1A
1968:  MOVFF  FC4,1B
....................     } 
196C:  BRA    1994
....................     else if (adCounter == 3) 
196E:  MOVF   22,W
1970:  SUBLW  03
1972:  BNZ   1984
....................     { 
....................         ad3 = read_adc(); 
1974:  BSF    FC2.1
1976:  BTFSC  FC2.1
1978:  BRA    1976
197A:  MOVFF  FC3,1C
197E:  MOVFF  FC4,1D
....................     } 
1982:  BRA    1994
....................     else 
....................     { 
....................         adCounter = 0; 
1984:  CLRF   22
....................         ad4 = read_adc(); 
1986:  BSF    FC2.1
1988:  BTFSC  FC2.1
198A:  BRA    1988
198C:  MOVFF  FC3,1E
1990:  MOVFF  FC4,1F
....................     } 
....................     if (timerBase == 2000) 
1994:  MOVF   20,W
1996:  SUBLW  D0
1998:  BNZ   19D6
199A:  MOVF   21,W
199C:  SUBLW  07
199E:  BNZ   19D6
....................     { 
....................         timerBase = 0; 
19A0:  CLRF   21
19A2:  CLRF   20
....................         ClearScreen(); 
19A4:  BRA    11D2
....................         printf(lcd_escreve, "1: "); 
19A6:  MOVLW  FC
19A8:  MOVWF  FF6
19AA:  MOVLW  1C
19AC:  MOVWF  FF7
19AE:  RCALL  11DC
....................         printf(lcd_escreve, "%04ld", ad1); 
19B0:  MOVLW  0A
19B2:  MOVWF  FE9
19B4:  MOVFF  19,41
19B8:  MOVFF  18,40
19BC:  RCALL  11FC
....................         printf(lcd_escreve, " 2: "); 
19BE:  MOVLW  00
19C0:  MOVWF  FF6
19C2:  MOVLW  1D
19C4:  MOVWF  FF7
19C6:  RCALL  11DC
....................         printf(lcd_escreve, "%04ld", ad2); 
19C8:  MOVLW  0A
19CA:  MOVWF  FE9
19CC:  MOVFF  1B,41
19D0:  MOVFF  1A,40
19D4:  RCALL  11FC
....................         // lcd_pos_xy(1, 2); 
....................         // printf(lcd_escreve, "3: "); 
....................         // printf(lcd_escreve, "%04ld", ad3); 
....................         // printf(lcd_escreve, " 4: "); 
....................         // printf(lcd_escreve, "%04ld", ad4); 
....................     } 
....................     timerBase++; 
19D6:  INCF   20,F
19D8:  BTFSC  FD8.2
19DA:  INCF   21,F
....................     adCounter++; 
19DC:  INCF   22,F
....................  
....................     set_adc_channel(adCounter); 
19DE:  RLCF   22,W
19E0:  MOVWF  00
19E2:  RLCF   00,F
19E4:  MOVLW  FC
19E6:  ANDWF  00,F
19E8:  MOVF   FC2,W
19EA:  ANDLW  C3
19EC:  IORWF  00,W
19EE:  MOVWF  FC2
.................... #ifdef DEBUG 
....................     SetLeft(0); 
....................     SetRight(1023); 
.................... #else 
....................     if (running == 1) 
19F0:  DECFSZ 17,W
19F2:  BRA    1CF0
....................     { 
....................         float ad1Ratio = (float)ad1 / (float)(ad1 + ad2); 
....................         float ad2Ratio = (float)ad2 / (float)(ad1 + ad2); 
....................  
....................         float pwm1 = ad1Ratio * 246 + 777; 
....................         float pwm2 = ad2Ratio * 246 + 777; 
19F4:  MOVFF  19,43
19F8:  MOVFF  18,42
19FC:  RCALL  12EE
19FE:  MOVFF  03,41
1A02:  MOVFF  02,40
1A06:  MOVFF  01,3F
1A0A:  MOVFF  00,3E
1A0E:  MOVF   1A,W
1A10:  ADDWF  18,W
1A12:  MOVWF  01
1A14:  MOVF   1B,W
1A16:  ADDWFC 19,W
1A18:  MOVWF  03
1A1A:  MOVFF  01,42
1A1E:  MOVWF  43
1A20:  RCALL  12EE
1A22:  MOVFF  41,45
1A26:  MOVFF  40,44
1A2A:  MOVFF  3F,43
1A2E:  MOVFF  3E,42
1A32:  MOVFF  03,49
1A36:  MOVFF  02,48
1A3A:  MOVFF  01,47
1A3E:  MOVFF  00,46
1A42:  RCALL  1324
1A44:  MOVFF  03,31
1A48:  MOVFF  02,30
1A4C:  MOVFF  01,2F
1A50:  MOVFF  00,2E
1A54:  MOVFF  1B,43
1A58:  MOVFF  1A,42
1A5C:  RCALL  12EE
1A5E:  MOVFF  03,41
1A62:  MOVFF  02,40
1A66:  MOVFF  01,3F
1A6A:  MOVFF  00,3E
1A6E:  MOVF   1A,W
1A70:  ADDWF  18,W
1A72:  MOVWF  01
1A74:  MOVF   1B,W
1A76:  ADDWFC 19,W
1A78:  MOVWF  03
1A7A:  MOVFF  01,42
1A7E:  MOVWF  43
1A80:  RCALL  12EE
1A82:  MOVFF  41,45
1A86:  MOVFF  40,44
1A8A:  MOVFF  3F,43
1A8E:  MOVFF  3E,42
1A92:  MOVFF  03,49
1A96:  MOVFF  02,48
1A9A:  MOVFF  01,47
1A9E:  MOVFF  00,46
1AA2:  RCALL  1324
1AA4:  MOVFF  03,35
1AA8:  MOVFF  02,34
1AAC:  MOVFF  01,33
1AB0:  MOVFF  00,32
1AB4:  MOVFF  31,41
1AB8:  MOVFF  30,40
1ABC:  MOVFF  2F,3F
1AC0:  MOVFF  2E,3E
1AC4:  CLRF   45
1AC6:  CLRF   44
1AC8:  MOVLW  76
1ACA:  MOVWF  43
1ACC:  MOVLW  86
1ACE:  MOVWF  42
1AD0:  RCALL  147E
1AD2:  MOVFF  03,41
1AD6:  MOVFF  02,40
1ADA:  MOVFF  01,3F
1ADE:  MOVFF  00,3E
1AE2:  BCF    FD8.1
1AE4:  MOVFF  03,45
1AE8:  MOVFF  02,44
1AEC:  MOVFF  01,43
1AF0:  MOVFF  00,42
1AF4:  CLRF   49
1AF6:  MOVLW  40
1AF8:  MOVWF  48
1AFA:  MOVLW  42
1AFC:  MOVWF  47
1AFE:  MOVLW  88
1B00:  MOVWF  46
1B02:  RCALL  1570
1B04:  MOVFF  03,39
1B08:  MOVFF  02,38
1B0C:  MOVFF  01,37
1B10:  MOVFF  00,36
1B14:  MOVFF  35,41
1B18:  MOVFF  34,40
1B1C:  MOVFF  33,3F
1B20:  MOVFF  32,3E
1B24:  CLRF   45
1B26:  CLRF   44
1B28:  MOVLW  76
1B2A:  MOVWF  43
1B2C:  MOVLW  86
1B2E:  MOVWF  42
1B30:  RCALL  147E
1B32:  MOVFF  03,41
1B36:  MOVFF  02,40
1B3A:  MOVFF  01,3F
1B3E:  MOVFF  00,3E
1B42:  BCF    FD8.1
1B44:  MOVFF  03,45
1B48:  MOVFF  02,44
1B4C:  MOVFF  01,43
1B50:  MOVFF  00,42
1B54:  CLRF   49
1B56:  MOVLW  40
1B58:  MOVWF  48
1B5A:  MOVLW  42
1B5C:  MOVWF  47
1B5E:  MOVLW  88
1B60:  MOVWF  46
1B62:  RCALL  1570
1B64:  MOVFF  03,3D
1B68:  MOVFF  02,3C
1B6C:  MOVFF  01,3B
1B70:  MOVFF  00,3A
....................  
....................         ///alto significa escuro 
....................         if (ad1 + ad2 > 300) 
1B74:  MOVF   1A,W
1B76:  ADDWF  18,W
1B78:  MOVWF  3E
1B7A:  MOVF   1B,W
1B7C:  ADDWFC 19,W
1B7E:  MOVWF  3F
1B80:  SUBLW  00
1B82:  BTFSC  FD8.0
1B84:  BRA    1CD0
1B86:  XORLW  FF
1B88:  BNZ   1B92
1B8A:  MOVF   3E,W
1B8C:  SUBLW  2C
1B8E:  BTFSC  FD8.0
1B90:  BRA    1CD0
....................         { 
....................             //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................             //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................  
....................             lcd_pos_xy(1, 2); 
1B92:  MOVLW  01
1B94:  MOVWF  4A
1B96:  MOVLW  02
1B98:  MOVWF  4B
1B9A:  CALL   116A
....................  
....................             //O ad1 é o da direita, se este esta maior, significa que o robo esta a direit 
....................             if (ad1Ratio > 0.7f) 
1B9E:  MOVLW  33
1BA0:  MOVWF  41
1BA2:  MOVWF  40
1BA4:  MOVWF  3F
1BA6:  MOVLW  7E
1BA8:  MOVWF  3E
1BAA:  MOVFF  31,45
1BAE:  MOVFF  30,44
1BB2:  MOVFF  2F,43
1BB6:  MOVFF  2E,42
1BBA:  RCALL  17DA
1BBC:  BNC   1BDA
....................             { 
....................                 printf(lcd_escreve, "Esta a direita"); 
1BBE:  MOVLW  06
1BC0:  MOVWF  FF6
1BC2:  MOVLW  1D
1BC4:  MOVWF  FF7
1BC6:  CALL   11DC
....................                 SetRight(1023); 
1BCA:  MOVLW  03
1BCC:  MOVWF  41
1BCE:  SETF   40
1BD0:  RCALL  1850
....................                 SetLeft(0); 
1BD2:  CLRF   41
1BD4:  CLRF   40
1BD6:  RCALL  1878
....................             } 
1BD8:  BRA    1CCE
....................             else if (ad2Ratio > 0.7f) 
1BDA:  MOVLW  33
1BDC:  MOVWF  41
1BDE:  MOVWF  40
1BE0:  MOVWF  3F
1BE2:  MOVLW  7E
1BE4:  MOVWF  3E
1BE6:  MOVFF  35,45
1BEA:  MOVFF  34,44
1BEE:  MOVFF  33,43
1BF2:  MOVFF  32,42
1BF6:  RCALL  17DA
1BF8:  BNC   1C16
....................             { 
....................                 printf(lcd_escreve, "Esta a esquerda"); 
1BFA:  MOVLW  16
1BFC:  MOVWF  FF6
1BFE:  MOVLW  1D
1C00:  MOVWF  FF7
1C02:  CALL   11DC
....................                 SetRight(0); 
1C06:  CLRF   41
1C08:  CLRF   40
1C0A:  RCALL  1850
....................                 SetLeft(1023); 
1C0C:  MOVLW  03
1C0E:  MOVWF  41
1C10:  SETF   40
1C12:  RCALL  1878
....................             } 
1C14:  BRA    1CCE
....................             else 
....................             { 
....................                 printf(lcd_escreve, "p1: %4ld", (long)pwm1); 
1C16:  MOVFF  39,41
1C1A:  MOVFF  38,40
1C1E:  MOVFF  37,3F
1C22:  MOVFF  36,3E
1C26:  RCALL  18A0
1C28:  MOVFF  02,3F
1C2C:  MOVFF  01,3E
1C30:  MOVLW  26
1C32:  MOVWF  FF6
1C34:  MOVLW  1D
1C36:  MOVWF  FF7
1C38:  MOVLW  04
1C3A:  MOVWF  40
1C3C:  RCALL  18D8
1C3E:  MOVLW  02
1C40:  MOVWF  FE9
1C42:  MOVFF  3F,41
1C46:  MOVFF  3E,40
1C4A:  CALL   11FC
....................                 printf(lcd_escreve, "p2: %4ld", (long)pwm2); 
1C4E:  MOVFF  3D,41
1C52:  MOVFF  3C,40
1C56:  MOVFF  3B,3F
1C5A:  MOVFF  3A,3E
1C5E:  RCALL  18A0
1C60:  MOVFF  02,3F
1C64:  MOVFF  01,3E
1C68:  MOVLW  30
1C6A:  MOVWF  FF6
1C6C:  MOVLW  1D
1C6E:  MOVWF  FF7
1C70:  MOVLW  04
1C72:  MOVWF  40
1C74:  RCALL  18D8
1C76:  MOVLW  02
1C78:  MOVWF  FE9
1C7A:  MOVFF  3F,41
1C7E:  MOVFF  3E,40
1C82:  CALL   11FC
....................  
....................                 SetLeft(pwm1); 
1C86:  MOVFF  39,41
1C8A:  MOVFF  38,40
1C8E:  MOVFF  37,3F
1C92:  MOVFF  36,3E
1C96:  RCALL  18A0
1C98:  MOVFF  02,3F
1C9C:  MOVFF  01,3E
1CA0:  MOVFF  02,41
1CA4:  MOVFF  01,40
1CA8:  RCALL  1878
....................                 SetRight(pwm2); 
1CAA:  MOVFF  3D,41
1CAE:  MOVFF  3C,40
1CB2:  MOVFF  3B,3F
1CB6:  MOVFF  3A,3E
1CBA:  RCALL  18A0
1CBC:  MOVFF  02,3F
1CC0:  MOVFF  01,3E
1CC4:  MOVFF  02,41
1CC8:  MOVFF  01,40
1CCC:  RCALL  1850
....................             } 
....................         } 
1CCE:  BRA    1CEE
....................         else 
....................         { 
....................             ///Esta fora da pista, deve fazer algo 
....................             SetBothPwm(0); 
1CD0:  CLRF   3F
1CD2:  CLRF   3E
1CD4:  RCALL  18F6
....................             lcd_pos_xy(1, 2); 
1CD6:  MOVLW  01
1CD8:  MOVWF  4A
1CDA:  MOVLW  02
1CDC:  MOVWF  4B
1CDE:  CALL   116A
....................  
....................             printf(lcd_escreve, "Se perdeu"); 
1CE2:  MOVLW  3A
1CE4:  MOVWF  FF6
1CE6:  MOVLW  1D
1CE8:  MOVWF  FF7
1CEA:  CALL   11DC
....................              
....................         } 
....................     } 
1CEE:  BRA    1CF6
....................  
....................     else 
....................     { 
....................         SetBothPwm(0); 
1CF0:  CLRF   3F
1CF2:  CLRF   3E
1CF4:  RCALL  18F6
....................     } 
.................... #endif 
1CF6:  BCF    FF2.2
1CF8:  GOTO   1054
.................... } 
....................  
.................... void main() 
*
1E7A:  CLRF   FF8
1E7C:  BCF    FD0.7
1E7E:  BSF    07.7
1E80:  MOVF   FC1,W
1E82:  ANDLW  C0
1E84:  IORLW  0F
1E86:  MOVWF  FC1
1E88:  MOVLW  07
1E8A:  MOVWF  FB4
.................... { 
....................     Setup(); 
1E8C:  BRA    1E36
1E8E:  CLRF   16
1E90:  BTFSC  FF2.7
1E92:  BSF    16.7
1E94:  BCF    FF2.7
....................     lcd_pos_xy(1, 1); 
1E96:  MOVLW  01
1E98:  MOVWF  4A
1E9A:  MOVWF  4B
1E9C:  CALL   116A
1EA0:  BTFSC  16.7
1EA2:  BSF    FF2.7
....................     printf(lcd_escreve, " Inicializando"); 
1EA4:  MOVLW  44
1EA6:  MOVWF  FF6
1EA8:  MOVLW  1D
1EAA:  MOVWF  FF7
1EAC:  CLRF   16
1EAE:  BTFSC  FF2.7
1EB0:  BSF    16.7
1EB2:  BCF    FF2.7
1EB4:  CALL   11DC
1EB8:  BTFSC  16.7
1EBA:  BSF    FF2.7
....................     delay_ms(1000); 
1EBC:  MOVLW  04
1EBE:  MOVWF  23
1EC0:  CLRF   16
1EC2:  BTFSC  FF2.7
1EC4:  BSF    16.7
1EC6:  BCF    FF2.7
1EC8:  MOVLW  FA
1ECA:  MOVWF  4A
1ECC:  CALL   1142
1ED0:  BTFSC  16.7
1ED2:  BSF    FF2.7
1ED4:  DECFSZ 23,F
1ED6:  BRA    1EC0
....................     do 
....................     { 
....................         if (input(button1) == 0) 
1ED8:  BSF    F92.4
1EDA:  BTFSC  F80.4
1EDC:  BRA    1EE2
....................         { 
....................             running = 1; 
1EDE:  MOVLW  01
1EE0:  MOVWF  17
....................         } 
....................         if (input(button2) == 0) 
1EE2:  BSF    F92.5
1EE4:  BTFSC  F80.5
1EE6:  BRA    1EEA
....................         { 
....................             running = 0; 
1EE8:  CLRF   17
....................         } 
....................     } while (1); 
1EEA:  BRA    1ED8
.................... } 
....................  
1EEC:  SLEEP 
.................... void Setup() 
.................... { 
....................     adCounter = 1; 
*
1E36:  MOVLW  01
1E38:  MOVWF  22
....................     running = 0; 
1E3A:  CLRF   17
....................  
....................     setup_adc_ports(AN0_TO_AN3); 
1E3C:  MOVF   FC1,W
1E3E:  ANDLW  C0
1E40:  IORLW  0B
1E42:  MOVWF  FC1
....................     setup_adc(ADC_CLOCK_DIV_4); 
1E44:  MOVF   FC0,W
1E46:  ANDLW  C0
1E48:  IORLW  04
1E4A:  MOVWF  FC0
1E4C:  BSF    FC0.7
1E4E:  BSF    FC2.0
....................  
....................     setup_timer_0(RTCC_INTERNAL | RTCC_DIV_2 | RTCC_8_BIT); 
1E50:  MOVLW  C0
1E52:  MOVWF  FD5
....................     set_timer0(0); 
1E54:  CLRF   FD7
1E56:  CLRF   FD6
....................     enable_interrupts(INT_TIMER0); 
1E58:  BSF    FF2.5
....................     enable_interrupts(GLOBAL); 
1E5A:  IORWF  FF2,F
....................  
....................     lcd_ini(); 
1E5C:  BRA    1D54
....................     MotorInitialize(); 
1E5E:  BRA    1E02
1E60:  CLRF   16
1E62:  BTFSC  FF2.7
1E64:  BSF    16.7
1E66:  BCF    FF2.7
....................     SetBothPwm(1023); 
1E68:  MOVLW  03
1E6A:  MOVWF  3F
1E6C:  SETF   3E
1E6E:  RCALL  18F6
1E70:  BTFSC  16.7
1E72:  BSF    FF2.7
....................     frente(); 
1E74:  BRA    1E22
1E76:  GOTO   1E8E (RETURN)
.................... } 
....................  
.................... void ClearScreen() 
.................... { 
....................     lcd_escreve('\f'); 
*
11D2:  MOVLW  0C
11D4:  MOVWF  49
11D6:  RCALL  118C
11D8:  GOTO   19A6 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
