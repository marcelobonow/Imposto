CCS PCH C Compiler, Version 5.015, 5967               28-ago-18 07:48

               Filename:   D:\Projetos\Imposto\Source Code\main.lst

               ROM used:   3510 bytes (11%)
                           Largest free fragment is 25158
               RAM used:   42 (2%) at main() level
                           85 (4%) worst case
               Stack used: 12 locations (6 in main + 6 for interrupts)
               Stack size: 31

*
1000:  GOTO   1CB0
*
1008:  MOVWF  04
100A:  MOVFF  FD8,05
100E:  MOVFF  FE0,06
1012:  MOVLB  0
1014:  MOVFF  FE9,0C
1018:  MOVFF  FEA,07
101C:  MOVFF  FE1,08
1020:  MOVFF  FE2,09
1024:  MOVFF  FD9,0A
1028:  MOVFF  FDA,0B
102C:  MOVFF  FF3,12
1030:  MOVFF  FF4,13
1034:  MOVFF  FFA,14
1038:  MOVFF  00,0E
103C:  MOVFF  01,0F
1040:  MOVFF  02,10
1044:  MOVFF  03,11
1048:  BTFSS  FF2.5
104A:  GOTO   1054
104E:  BTFSC  FF2.2
1050:  GOTO   13D8
1054:  MOVFF  0E,00
1058:  MOVFF  0F,01
105C:  MOVFF  10,02
1060:  MOVFF  11,03
1064:  MOVFF  0C,FE9
1068:  MOVFF  07,FEA
106C:  BSF    07.7
106E:  MOVFF  08,FE1
1072:  MOVFF  09,FE2
1076:  MOVFF  0A,FD9
107A:  MOVFF  0B,FDA
107E:  MOVFF  12,FF3
1082:  MOVFF  13,FF4
1086:  MOVFF  14,FFA
108A:  MOVF   04,W
108C:  MOVFF  06,FE0
1090:  MOVFF  05,FD8
1094:  RETFIE 0
.................... #include <main.h> 
.................... #include "18F4550.h" 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
1096:  MOVFF  FF2,0D
109A:  BCF    FF2.7
109C:  CLRF   FF7
109E:  ADDLW  B0
10A0:  MOVWF  FF6
10A2:  MOVLW  10
10A4:  ADDWFC FF7,F
10A6:  TBLRD*+
10A8:  MOVF   FF5,W
10AA:  BTFSC  0D.7
10AC:  BSF    FF2.7
10AE:  RETURN 0
10B0:  DATA 28,0C
10B2:  DATA 01,06
*
11D2:  TBLRD*+
11D4:  MOVF   FF5,F
11D6:  BZ    11F0
11D8:  MOVFF  FF6,43
11DC:  MOVFF  FF7,44
11E0:  MOVFF  FF5,4C
11E4:  RCALL  118C
11E6:  MOVFF  43,FF6
11EA:  MOVFF  44,FF7
11EE:  BRA    11D2
11F0:  RETURN 0
11F2:  MOVFF  FEA,4B
11F6:  MOVFF  FE9,4A
11FA:  BTFSS  44.7
11FC:  BRA    120E
11FE:  BSF    4A.7
1200:  BTFSS  4A.4
1202:  INCF   4A,F
1204:  COMF   43,F
1206:  COMF   44,F
1208:  INCF   43,F
120A:  BTFSC  FD8.2
120C:  INCF   44,F
120E:  SWAPF  44,W
1210:  IORLW  F0
1212:  MOVWF  46
1214:  ADDWF  46,F
1216:  ADDLW  E2
1218:  MOVWF  47
121A:  ADDLW  32
121C:  MOVWF  49
121E:  MOVF   44,W
1220:  ANDLW  0F
1222:  ADDWF  47,F
1224:  ADDWF  47,F
1226:  ADDWF  49,F
1228:  ADDLW  E9
122A:  MOVWF  48
122C:  ADDWF  48,F
122E:  ADDWF  48,F
1230:  SWAPF  43,W
1232:  ANDLW  0F
1234:  ADDWF  48,F
1236:  ADDWF  49,F
1238:  RLCF   48,F
123A:  RLCF   49,F
123C:  COMF   49,F
123E:  RLCF   49,F
1240:  MOVF   43,W
1242:  ANDLW  0F
1244:  ADDWF  49,F
1246:  RLCF   46,F
1248:  MOVLW  07
124A:  MOVWF  45
124C:  MOVLW  0A
124E:  DECF   48,F
1250:  ADDWF  49,F
1252:  BNC   124E
1254:  DECF   47,F
1256:  ADDWF  48,F
1258:  BNC   1254
125A:  DECF   46,F
125C:  ADDWF  47,F
125E:  BNC   125A
1260:  DECF   45,F
1262:  ADDWF  46,F
1264:  BNC   1260
1266:  CLRF   FEA
1268:  MOVLW  45
126A:  MOVWF  FE9
126C:  MOVLW  07
126E:  ANDWF  4A,W
1270:  BCF    4A.6
1272:  MOVF   FED,F
1274:  ANDWF  4A,W
1276:  BNZ   1286
1278:  BTFSC  4A.4
127A:  MOVF   FEE,F
127C:  BTFSC  4A.4
127E:  BRA    1286
1280:  MOVLW  20
1282:  MOVWF  00
1284:  BRA    12C6
1286:  ADDWF  FE9,F
1288:  MOVLW  00
128A:  ADDWFC FEA,F
128C:  MOVF   FE9,W
128E:  SUBLW  49
1290:  BNZ   1298
1292:  MOVF   FEA,F
1294:  BNZ   1298
1296:  BSF    4A.6
1298:  MOVF   FEF,W
129A:  MOVWF  00
129C:  BNZ   12AE
129E:  BTFSC  4A.6
12A0:  BRA    12AE
12A2:  BTFSC  4A.4
12A4:  BRA    12DC
12A6:  BTFSC  4A.3
12A8:  BRA    12AE
12AA:  MOVLW  20
12AC:  BRA    12C4
12AE:  BTFSS  4A.7
12B0:  BRA    12BE
12B2:  MOVLW  2D
12B4:  MOVWF  00
12B6:  MOVF   FED,W
12B8:  BCF    4A.6
12BA:  BCF    4A.7
12BC:  BRA    12C6
12BE:  BSF    4A.3
12C0:  BCF    4A.4
12C2:  MOVLW  30
12C4:  ADDWF  00,F
12C6:  MOVFF  FEA,44
12CA:  MOVFF  FE9,43
12CE:  MOVFF  00,4C
12D2:  RCALL  118C
12D4:  MOVFF  44,FEA
12D8:  MOVFF  43,FE9
12DC:  MOVF   FEE,W
12DE:  BTFSS  4A.6
12E0:  BRA    128C
12E2:  RETURN 0
12E4:  TBLRD*+
12E6:  MOVFF  FF6,44
12EA:  MOVFF  FF7,45
12EE:  MOVFF  FF5,4C
12F2:  RCALL  118C
12F4:  MOVFF  44,FF6
12F8:  MOVFF  45,FF7
12FC:  DECFSZ 43,F
12FE:  BRA    12E4
1300:  GOTO   14A2 (RETURN)
1304:  MOVF   4A,W
1306:  CLRF   01
1308:  SUBWF  49,W
130A:  BC    1312
130C:  MOVFF  49,00
1310:  BRA    132A
1312:  CLRF   00
1314:  MOVLW  08
1316:  MOVWF  4B
1318:  RLCF   49,F
131A:  RLCF   00,F
131C:  MOVF   4A,W
131E:  SUBWF  00,W
1320:  BTFSC  FD8.0
1322:  MOVWF  00
1324:  RLCF   01,F
1326:  DECFSZ 4B,F
1328:  BRA    1318
132A:  RETURN 0
132C:  MOVLW  20
132E:  BTFSS  44.4
1330:  MOVLW  30
1332:  MOVWF  45
1334:  MOVFF  43,00
1338:  BTFSS  43.7
133A:  BRA    134C
133C:  COMF   00,F
133E:  INCF   00,F
1340:  MOVFF  00,43
1344:  MOVLW  2D
1346:  MOVWF  45
1348:  BSF    44.7
134A:  BSF    44.0
134C:  MOVF   01,W
134E:  MOVFF  43,49
1352:  MOVLW  64
1354:  MOVWF  4A
1356:  RCALL  1304
1358:  MOVFF  00,43
135C:  MOVLW  30
135E:  ADDWF  01,W
1360:  MOVWF  46
1362:  MOVFF  43,49
1366:  MOVLW  0A
1368:  MOVWF  4A
136A:  RCALL  1304
136C:  MOVLW  30
136E:  ADDWF  00,W
1370:  MOVWF  48
1372:  MOVLW  30
1374:  ADDWF  01,W
1376:  MOVWF  47
1378:  MOVFF  45,00
137C:  MOVLW  30
137E:  SUBWF  46,W
1380:  BZ    138A
1382:  BSF    44.1
1384:  BTFSC  44.7
1386:  BSF    44.2
1388:  BRA    13AE
138A:  MOVFF  45,46
138E:  MOVLW  20
1390:  MOVWF  45
1392:  MOVLW  30
1394:  SUBWF  47,W
1396:  BZ    13A0
1398:  BSF    44.0
139A:  BTFSC  44.7
139C:  BSF    44.1
139E:  BRA    13AE
13A0:  BTFSS  FD8.2
13A2:  BSF    44.0
13A4:  BNZ   13AE
13A6:  MOVFF  46,47
13AA:  MOVLW  20
13AC:  MOVWF  46
13AE:  BTFSC  44.2
13B0:  BRA    13BC
13B2:  BTFSC  44.1
13B4:  BRA    13C2
13B6:  BTFSC  44.0
13B8:  BRA    13C8
13BA:  BRA    13CE
13BC:  MOVFF  45,4C
13C0:  RCALL  118C
13C2:  MOVFF  46,4C
13C6:  RCALL  118C
13C8:  MOVFF  47,4C
13CC:  RCALL  118C
13CE:  MOVFF  48,4C
13D2:  RCALL  118C
13D4:  GOTO   14AC (RETURN)
*
14DA:  DATA 31,3A
14DC:  DATA 20,00
14DE:  DATA 20,32
14E0:  DATA 3A,20
14E2:  DATA 00,00
14E4:  DATA 33,3A
14E6:  DATA 20,00
14E8:  DATA 20,64
14EA:  DATA 3A,20
14EC:  DATA 25,64
14EE:  DATA 00,00
14F0:  DATA 20,49
14F2:  DATA 6E,69
14F4:  DATA 63,69
14F6:  DATA 61,6C
14F8:  DATA 69,7A
14FA:  DATA 61,6E
14FC:  DATA 64,6F
14FE:  DATA 00,00
1500:  DATA 45,73
1502:  DATA 74,61
1504:  DATA 20,61
1506:  DATA 20,64
1508:  DATA 69,72
150A:  DATA 65,69
150C:  DATA 74,61
150E:  DATA 00,00
1510:  DATA 45,73
1512:  DATA 74,61
1514:  DATA 20,61
1516:  DATA 20,65
1518:  DATA 73,71
151A:  DATA 75,65
151C:  DATA 72,64
151E:  DATA 61,00
1520:  DATA 53,65
1522:  DATA 20,70
1524:  DATA 65,72
1526:  DATA 64,65
1528:  DATA 75,00
*
16D4:  MOVLW  8E
16D6:  MOVWF  00
16D8:  MOVFF  36,01
16DC:  MOVFF  35,02
16E0:  CLRF   03
16E2:  MOVF   01,F
16E4:  BNZ   16F8
16E6:  MOVFF  02,01
16EA:  CLRF   02
16EC:  MOVLW  08
16EE:  SUBWF  00,F
16F0:  MOVF   01,F
16F2:  BNZ   16F8
16F4:  CLRF   00
16F6:  BRA    1708
16F8:  BCF    FD8.0
16FA:  BTFSC  01.7
16FC:  BRA    1706
16FE:  RLCF   02,F
1700:  RLCF   01,F
1702:  DECF   00,F
1704:  BRA    16F8
1706:  BCF    01.7
1708:  RETURN 0
170A:  MOVF   35,W
170C:  BTFSC  FD8.2
170E:  BRA    185A
1710:  MOVWF  41
1712:  MOVF   39,W
1714:  BTFSC  FD8.2
1716:  BRA    185A
1718:  SUBWF  41,F
171A:  BNC   1726
171C:  MOVLW  7F
171E:  ADDWF  41,F
1720:  BTFSC  FD8.0
1722:  BRA    185A
1724:  BRA    1732
1726:  MOVLW  81
1728:  SUBWF  41,F
172A:  BTFSS  FD8.0
172C:  BRA    185A
172E:  BTFSC  FD8.2
1730:  BRA    185A
1732:  MOVFF  41,00
1736:  CLRF   01
1738:  CLRF   02
173A:  CLRF   03
173C:  CLRF   40
173E:  MOVFF  36,3F
1742:  BSF    3F.7
1744:  MOVFF  37,3E
1748:  MOVFF  38,3D
174C:  MOVLW  19
174E:  MOVWF  41
1750:  MOVF   3C,W
1752:  SUBWF  3D,F
1754:  BC    1770
1756:  MOVLW  01
1758:  SUBWF  3E,F
175A:  BC    1770
175C:  SUBWF  3F,F
175E:  BC    1770
1760:  SUBWF  40,F
1762:  BC    1770
1764:  INCF   40,F
1766:  INCF   3F,F
1768:  INCF   3E,F
176A:  MOVF   3C,W
176C:  ADDWF  3D,F
176E:  BRA    17C0
1770:  MOVF   3B,W
1772:  SUBWF  3E,F
1774:  BC    179A
1776:  MOVLW  01
1778:  SUBWF  3F,F
177A:  BC    179A
177C:  SUBWF  40,F
177E:  BC    179A
1780:  INCF   40,F
1782:  INCF   3F,F
1784:  MOVF   3B,W
1786:  ADDWF  3E,F
1788:  MOVF   3C,W
178A:  ADDWF  3D,F
178C:  BNC   17C0
178E:  INCF   3E,F
1790:  BNZ   17C0
1792:  INCF   3F,F
1794:  BNZ   17C0
1796:  INCF   40,F
1798:  BRA    17C0
179A:  MOVF   3A,W
179C:  IORLW  80
179E:  SUBWF  3F,F
17A0:  BC    17BE
17A2:  MOVLW  01
17A4:  SUBWF  40,F
17A6:  BC    17BE
17A8:  INCF   40,F
17AA:  MOVF   3A,W
17AC:  IORLW  80
17AE:  ADDWF  3F,F
17B0:  MOVF   3B,W
17B2:  ADDWF  3E,F
17B4:  BNC   1788
17B6:  INCF   3F,F
17B8:  BNZ   1788
17BA:  INCF   40,F
17BC:  BRA    1788
17BE:  BSF    03.0
17C0:  DECFSZ 41,F
17C2:  BRA    17C6
17C4:  BRA    17DC
17C6:  BCF    FD8.0
17C8:  RLCF   3D,F
17CA:  RLCF   3E,F
17CC:  RLCF   3F,F
17CE:  RLCF   40,F
17D0:  BCF    FD8.0
17D2:  RLCF   03,F
17D4:  RLCF   02,F
17D6:  RLCF   01,F
17D8:  RLCF   42,F
17DA:  BRA    1750
17DC:  BTFSS  42.0
17DE:  BRA    17EC
17E0:  BCF    FD8.0
17E2:  RRCF   01,F
17E4:  RRCF   02,F
17E6:  RRCF   03,F
17E8:  RRCF   42,F
17EA:  BRA    17F0
17EC:  DECF   00,F
17EE:  BZ    185A
17F0:  BTFSC  42.7
17F2:  BRA    1830
17F4:  BCF    FD8.0
17F6:  RLCF   3D,F
17F8:  RLCF   3E,F
17FA:  RLCF   3F,F
17FC:  RLCF   40,F
17FE:  MOVF   3C,W
1800:  SUBWF  3D,F
1802:  BC    1812
1804:  MOVLW  01
1806:  SUBWF  3E,F
1808:  BC    1812
180A:  SUBWF  3F,F
180C:  BC    1812
180E:  SUBWF  40,F
1810:  BNC   1846
1812:  MOVF   3B,W
1814:  SUBWF  3E,F
1816:  BC    1822
1818:  MOVLW  01
181A:  SUBWF  3F,F
181C:  BC    1822
181E:  SUBWF  40,F
1820:  BNC   1846
1822:  MOVF   3A,W
1824:  IORLW  80
1826:  SUBWF  3F,F
1828:  BC    1830
182A:  MOVLW  01
182C:  SUBWF  40,F
182E:  BNC   1846
1830:  INCF   03,F
1832:  BNZ   1846
1834:  INCF   02,F
1836:  BNZ   1846
1838:  INCF   01,F
183A:  BNZ   1846
183C:  INCF   00,F
183E:  BZ    185A
1840:  RRCF   01,F
1842:  RRCF   02,F
1844:  RRCF   03,F
1846:  MOVFF  36,41
184A:  MOVF   3A,W
184C:  XORWF  41,F
184E:  BTFSS  41.7
1850:  BRA    1856
1852:  BSF    01.7
1854:  BRA    1862
1856:  BCF    01.7
1858:  BRA    1862
185A:  CLRF   00
185C:  CLRF   01
185E:  CLRF   02
1860:  CLRF   03
1862:  RETURN 0
1864:  MOVFF  32,39
1868:  MOVF   36,W
186A:  XORWF  39,F
186C:  BTFSS  39.7
186E:  BRA    187A
1870:  BCF    FD8.2
1872:  BCF    FD8.0
1874:  BTFSC  32.7
1876:  BSF    FD8.0
1878:  BRA    18D8
187A:  MOVFF  32,39
187E:  MOVFF  35,3A
1882:  MOVF   31,W
1884:  SUBWF  3A,F
1886:  BZ    1894
1888:  BTFSS  39.7
188A:  BRA    18D8
188C:  MOVF   FD8,W
188E:  XORLW  01
1890:  MOVWF  FD8
1892:  BRA    18D8
1894:  MOVFF  36,3A
1898:  MOVF   32,W
189A:  SUBWF  3A,F
189C:  BZ    18AA
189E:  BTFSS  39.7
18A0:  BRA    18D8
18A2:  MOVF   FD8,W
18A4:  XORLW  01
18A6:  MOVWF  FD8
18A8:  BRA    18D8
18AA:  MOVFF  37,3A
18AE:  MOVF   33,W
18B0:  SUBWF  3A,F
18B2:  BZ    18C0
18B4:  BTFSS  39.7
18B6:  BRA    18D8
18B8:  MOVF   FD8,W
18BA:  XORLW  01
18BC:  MOVWF  FD8
18BE:  BRA    18D8
18C0:  MOVFF  38,3A
18C4:  MOVF   34,W
18C6:  SUBWF  3A,F
18C8:  BZ    18D6
18CA:  BTFSS  39.7
18CC:  BRA    18D8
18CE:  MOVF   FD8,W
18D0:  XORLW  01
18D2:  MOVWF  FD8
18D4:  BRA    18D8
18D6:  BCF    FD8.0
18D8:  RETURN 0
*
192A:  MOVF   31,W
192C:  BTFSC  FD8.2
192E:  BRA    1A12
1930:  MOVWF  00
1932:  MOVF   35,W
1934:  BTFSC  FD8.2
1936:  BRA    1A12
1938:  ADDWF  00,F
193A:  BNC   1944
193C:  MOVLW  81
193E:  ADDWF  00,F
1940:  BC    1A12
1942:  BRA    194C
1944:  MOVLW  7F
1946:  SUBWF  00,F
1948:  BNC   1A12
194A:  BZ    1A12
194C:  MOVFF  32,39
1950:  MOVF   36,W
1952:  XORWF  39,F
1954:  BSF    32.7
1956:  BSF    36.7
1958:  MOVF   34,W
195A:  MULWF  38
195C:  MOVFF  FF4,3B
1960:  MOVF   33,W
1962:  MULWF  37
1964:  MOVFF  FF4,03
1968:  MOVFF  FF3,3A
196C:  MULWF  38
196E:  MOVF   FF3,W
1970:  ADDWF  3B,F
1972:  MOVF   FF4,W
1974:  ADDWFC 3A,F
1976:  MOVLW  00
1978:  ADDWFC 03,F
197A:  MOVF   34,W
197C:  MULWF  37
197E:  MOVF   FF3,W
1980:  ADDWF  3B,F
1982:  MOVF   FF4,W
1984:  ADDWFC 3A,F
1986:  MOVLW  00
1988:  CLRF   02
198A:  ADDWFC 03,F
198C:  ADDWFC 02,F
198E:  MOVF   32,W
1990:  MULWF  38
1992:  MOVF   FF3,W
1994:  ADDWF  3A,F
1996:  MOVF   FF4,W
1998:  ADDWFC 03,F
199A:  MOVLW  00
199C:  ADDWFC 02,F
199E:  MOVF   32,W
19A0:  MULWF  37
19A2:  MOVF   FF3,W
19A4:  ADDWF  03,F
19A6:  MOVF   FF4,W
19A8:  ADDWFC 02,F
19AA:  MOVLW  00
19AC:  CLRF   01
19AE:  ADDWFC 01,F
19B0:  MOVF   34,W
19B2:  MULWF  36
19B4:  MOVF   FF3,W
19B6:  ADDWF  3A,F
19B8:  MOVF   FF4,W
19BA:  ADDWFC 03,F
19BC:  MOVLW  00
19BE:  ADDWFC 02,F
19C0:  ADDWFC 01,F
19C2:  MOVF   33,W
19C4:  MULWF  36
19C6:  MOVF   FF3,W
19C8:  ADDWF  03,F
19CA:  MOVF   FF4,W
19CC:  ADDWFC 02,F
19CE:  MOVLW  00
19D0:  ADDWFC 01,F
19D2:  MOVF   32,W
19D4:  MULWF  36
19D6:  MOVF   FF3,W
19D8:  ADDWF  02,F
19DA:  MOVF   FF4,W
19DC:  ADDWFC 01,F
19DE:  INCF   00,F
19E0:  BTFSC  01.7
19E2:  BRA    19EE
19E4:  RLCF   3A,F
19E6:  RLCF   03,F
19E8:  RLCF   02,F
19EA:  RLCF   01,F
19EC:  DECF   00,F
19EE:  MOVLW  00
19F0:  BTFSS  3A.7
19F2:  BRA    1A08
19F4:  INCF   03,F
19F6:  ADDWFC 02,F
19F8:  ADDWFC 01,F
19FA:  MOVF   01,W
19FC:  BNZ   1A08
19FE:  MOVF   02,W
1A00:  BNZ   1A08
1A02:  MOVF   03,W
1A04:  BNZ   1A08
1A06:  INCF   00,F
1A08:  BTFSC  39.7
1A0A:  BSF    01.7
1A0C:  BTFSS  39.7
1A0E:  BCF    01.7
1A10:  BRA    1A1A
1A12:  CLRF   00
1A14:  CLRF   01
1A16:  CLRF   02
1A18:  CLRF   03
1A1A:  RETURN 0
1A1C:  MOVLW  8E
1A1E:  MOVWF  00
1A20:  MOVF   31,W
1A22:  SUBWF  00,F
1A24:  MOVFF  32,02
1A28:  MOVFF  33,01
1A2C:  BSF    02.7
1A2E:  MOVF   00,F
1A30:  BZ    1A44
1A32:  BCF    FD8.0
1A34:  MOVF   02,F
1A36:  BNZ   1A3C
1A38:  MOVF   01,F
1A3A:  BZ    1A44
1A3C:  RRCF   02,F
1A3E:  RRCF   01,F
1A40:  DECFSZ 00,F
1A42:  BRA    1A32
1A44:  BTFSS  32.7
1A46:  BRA    1A52
1A48:  COMF   01,F
1A4A:  COMF   02,F
1A4C:  INCF   01,F
1A4E:  BTFSC  FD8.2
1A50:  INCF   02,F
1A52:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=48MHz,crystal=20MHz) 
*
10B4:  MOVLW  01
10B6:  SUBWF  53,F
10B8:  BNC   10D2
10BA:  CLRF   FEA
10BC:  MOVLW  53
10BE:  MOVWF  FE9
10C0:  MOVF   FEF,W
10C2:  BZ    10D2
10C4:  MOVLW  02
10C6:  MOVWF  00
10C8:  DECFSZ 00,F
10CA:  BRA    10C8
10CC:  BRA    10CE
10CE:  DECFSZ FEF,F
10D0:  BRA    10C4
10D2:  RETURN 0
*
1164:  CLRF   FEA
1166:  MOVLW  4D
1168:  MOVWF  FE9
116A:  MOVF   FEF,W
116C:  BZ    118A
116E:  MOVLW  0F
1170:  MOVWF  01
1172:  CLRF   00
1174:  DECFSZ 00,F
1176:  BRA    1174
1178:  DECFSZ 01,F
117A:  BRA    1172
117C:  MOVLW  8F
117E:  MOVWF  00
1180:  DECFSZ 00,F
1182:  BRA    1180
1184:  NOP   
1186:  DECFSZ FEF,F
1188:  BRA    116E
118A:  RETURN 0
....................  
.................... // #build(reset=0x1000, interrupt=0x1008) 
.................... // #org 0x000, 0xfff { } 
....................  
.................... #include <Motor1.c> 
.................... #build(reset = 0x1000, interrupt = 0x1008) 
.................... #org 0x000, 0xfff {} 
....................  
.................... #define m1p1 pin_e2 
.................... #define m1p2 pin_c0 
.................... #define m2p1 pin_d0 
.................... #define m2p2 pin_d1 
....................  
.................... void tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void frente() 
.................... { 
....................       output_bit(m1p1, 1); 
*
163A:  BSF    F8D.2
163C:  BCF    F96.2
....................       output_bit(m1p2, 0); 
163E:  BCF    F8B.0
1640:  BCF    F94.0
....................       output_bit(m2p1, 0); 
1642:  BCF    F8C.0
1644:  BCF    F95.0
....................       output_bit(m2p2, 1); 
1646:  BSF    F8C.1
1648:  BCF    F95.1
164A:  GOTO   1682 (RETURN)
.................... } 
....................  
.................... void gira_esquerda() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void gira_direita() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 1); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_tras() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 1); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void direita_frente() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 1); 
.................... } 
....................  
.................... void esquerda_frente() 
.................... { 
....................       output_bit(m1p1, 1); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void para() 
.................... { 
....................       output_bit(m1p1, 0); 
....................       output_bit(m1p2, 0); 
....................       output_bit(m2p1, 0); 
....................       output_bit(m2p2, 0); 
.................... } 
....................  
.................... void MotorInitialize() 
.................... { 
....................       setup_timer_2(T2_DIV_BY_16, 255, 1); //341 us overflow, 341 us interrupt 
*
15CC:  MOVLW  00
15CE:  IORLW  06
15D0:  MOVWF  FCA
15D2:  MOVLW  FF
15D4:  MOVWF  FCB
....................  
....................       setup_ccp1(CCP_PWM | CCP_SHUTDOWN_AC_L | CCP_SHUTDOWN_BD_L); 
15D6:  BCF    F94.2
15D8:  BCF    F8B.2
15DA:  MOVLW  0C
15DC:  MOVWF  FBD
15DE:  CLRF   FB7
15E0:  CLRF   FB6
....................       setup_ccp2(CCP_PWM); 
15E2:  BCF    F94.1
15E4:  BCF    F8B.1
15E6:  MOVWF  FBA
15E8:  GOTO   1678 (RETURN)
.................... } 
....................  
.................... void SetBothPwm(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
15EC:  MOVFF  2A,02
15F0:  MOVFF  29,01
15F4:  RRCF   02,F
15F6:  RRCF   01,F
15F8:  RRCF   02,F
15FA:  RRCF   01,F
15FC:  RRCF   02,F
15FE:  MOVFF  01,FBE
1602:  RRCF   02,F
1604:  RRCF   02,W
1606:  ANDLW  30
1608:  MOVWF  00
160A:  MOVF   FBD,W
160C:  ANDLW  CF
160E:  IORWF  00,W
1610:  MOVWF  FBD
....................       set_pwm2_duty((int16)vel); //-50); 
1612:  MOVFF  2A,02
1616:  MOVFF  29,01
161A:  RRCF   02,F
161C:  RRCF   01,F
161E:  RRCF   02,F
1620:  RRCF   01,F
1622:  RRCF   02,F
1624:  MOVFF  01,FBB
1628:  RRCF   02,F
162A:  RRCF   02,W
162C:  ANDLW  30
162E:  MOVWF  00
1630:  MOVF   FBA,W
1632:  ANDLW  CF
1634:  IORWF  00,W
1636:  MOVWF  FBA
1638:  RETURN 0
.................... } 
....................  
.................... void SetRight(int16 vel) 
.................... { 
....................       set_pwm1_duty((int16)vel); 
*
18DA:  MOVFF  34,02
18DE:  MOVFF  33,01
18E2:  RRCF   02,F
18E4:  RRCF   01,F
18E6:  RRCF   02,F
18E8:  RRCF   01,F
18EA:  RRCF   02,F
18EC:  MOVFF  01,FBE
18F0:  RRCF   02,F
18F2:  RRCF   02,W
18F4:  ANDLW  30
18F6:  MOVWF  00
18F8:  MOVF   FBD,W
18FA:  ANDLW  CF
18FC:  IORWF  00,W
18FE:  MOVWF  FBD
1900:  RETURN 0
.................... } 
.................... void SetLeft(int16 vel) 
.................... { 
....................       set_pwm2_duty((int16)vel); 
1902:  MOVFF  34,02
1906:  MOVFF  33,01
190A:  RRCF   02,F
190C:  RRCF   01,F
190E:  RRCF   02,F
1910:  RRCF   01,F
1912:  RRCF   02,F
1914:  MOVFF  01,FBB
1918:  RRCF   02,F
191A:  RRCF   02,W
191C:  ANDLW  30
191E:  MOVWF  00
1920:  MOVF   FBA,W
1922:  ANDLW  CF
1924:  IORWF  00,W
1926:  MOVWF  FBA
1928:  RETURN 0
.................... } 
....................  
.................... #include <LCD_KIT.c> 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipula��o de m�dulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: F�bio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
.................... /* 
.................... lcd_cursor_on()                        fun��es LCD 
.................... lcd_cursor_pisca() 
.................... lcd_cursor_off() 
.................... lcd_corre_esquerda() 
.................... lcd_corre_direita() 
.................... lcd_envia_nibble( byte dado ) 
.................... lcd_le_byte() 
.................... lcd_ini() 
.................... lcd_pos_xy( byte x, byte y) 
.................... lcd_escreve( char c)                  \f  Clear display                            //// 
....................                                             \n  Go to start of second line               //// 
....................                                   \b  Move back one position                   //// 
....................  
.................... lcd_le( byte x, byte y) 
.................... lcd_apaga() 
.................... { 
....................  
.................... */ 
.................... // As defini��es a seguir s�o utilizadas para acesso aos pinos do display 
.................... // caso o pino RW n�o seja utilizado, comente a defini��o lcd_rw 
.................... #ifndef lcd_enable 
....................    #define lcd_rs         pin_d2      // pino rs do LCD 
....................    #define lcd_enable     pin_d3      // pino enable do LCD 
....................    #define lcd_d4         pin_d4      // pino de dados d4 do LCD 
....................    #define lcd_d5         pin_d5      // pino de dados d5 do LCD 
....................    #define lcd_d6         pin_d6      // pino de dados d6 do LCD 
....................    #define lcd_d7         pin_d7   // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endere�o da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seq��ncia de inicializa��o do m�dulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................  
.................... /*   O 0x20 eh p configurar o tipo do display e talz. 
....................    O Segundo numero configura o modo do cursor, sendo: 
....................                -> 0xf Cursor piscante 
....................                -> 0xe Cursor comum 
....................                -> 0xc Sem cursor 
....................    O terceiro (1) limpa o display 
....................    O Quarto volta com o cursor. 
.................... */ 
....................  
.................... byte lcd_le_byte() 
.................... // l� um byte do LCD (somente com pino RW) 
.................... { 
....................    byte dado; 
....................    // configura os pinos de dados como entradas 
....................    input(lcd_d4); 
....................    input(lcd_d5); 
....................    input(lcd_d6); 
....................    input(lcd_d7); 
....................    // se o pino rw for utilizado, coloca em 1 
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_high(lcd_enable); // habilita display 
....................    dado = 0;   // zera a vari�vel de leitura 
....................    // l� os quatro bits mais significativos 
....................    if (input(lcd_d7)) bit_set(dado,7); 
....................    if (input(lcd_d6)) bit_set(dado,6); 
....................    if (input(lcd_d5)) bit_set(dado,5); 
....................    if (input(lcd_d4)) bit_set(dado,4); 
....................    // d� um pulso na linha enable 
....................    output_low(lcd_enable); 
....................    output_high(lcd_enable); 
....................    // l� os quatro bits menos significativos 
....................    if (input(lcd_d7)) bit_set(dado,3); 
....................    if (input(lcd_d6)) bit_set(dado,2); 
....................    if (input(lcd_d5)) bit_set(dado,1); 
....................    if (input(lcd_d4)) bit_set(dado,0); 
....................    output_low(lcd_enable);   // desabilita o display 
....................    return dado;   // retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
....................    // coloca os quatro bits nas saidas 
....................    output_bit(lcd_d4,bit_test(dado,0)); 
*
10D4:  BTFSC  54.0
10D6:  BRA    10DC
10D8:  BCF    F8C.4
10DA:  BRA    10DE
10DC:  BSF    F8C.4
10DE:  BCF    F95.4
....................    output_bit(lcd_d5,bit_test(dado,1)); 
10E0:  BTFSC  54.1
10E2:  BRA    10E8
10E4:  BCF    F8C.5
10E6:  BRA    10EA
10E8:  BSF    F8C.5
10EA:  BCF    F95.5
....................    output_bit(lcd_d6,bit_test(dado,2)); 
10EC:  BTFSC  54.2
10EE:  BRA    10F4
10F0:  BCF    F8C.6
10F2:  BRA    10F6
10F4:  BSF    F8C.6
10F6:  BCF    F95.6
....................    output_bit(lcd_d7,bit_test(dado,3)); 
10F8:  BTFSC  54.3
10FA:  BRA    1100
10FC:  BCF    F8C.7
10FE:  BRA    1102
1100:  BSF    F8C.7
1102:  BCF    F95.7
....................    // d� um pulso na linha enable 
....................    output_high(lcd_enable); 
1104:  BCF    F95.3
1106:  BSF    F8C.3
....................    output_low(lcd_enable); 
1108:  BCF    F95.3
110A:  BCF    F8C.3
110C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
....................    // coloca a linha rs em 0 
....................    output_low(lcd_rs); 
110E:  BCF    F95.2
1110:  BCF    F8C.2
....................    // aguarda o display ficar desocupado 
....................    //while ( bit_test(lcd_le_byte(),7) ) ; 
....................    // configura a linha rs dependendo do modo selecionado 
....................    output_bit(lcd_rs,endereco); 
1112:  MOVF   51,F
1114:  BNZ   111A
1116:  BCF    F8C.2
1118:  BRA    111C
111A:  BSF    F8C.2
111C:  BCF    F95.2
....................    delay_us(100);   // aguarda 100 us 
111E:  MOVLW  64
1120:  MOVWF  53
1122:  RCALL  10B4
....................    // caso a linha rw esteja definida, coloca em 0 
....................    #ifdef lcd_rw 
....................       output_low(lcd_rw); 
....................    #endif 
....................    // desativa linha enable 
....................    output_low(lcd_enable); 
1124:  BCF    F95.3
1126:  BCF    F8C.3
....................    // envia a primeira parte do byte 
....................    lcd_envia_nibble(dado >> 4); 
1128:  SWAPF  52,W
112A:  MOVWF  53
112C:  MOVLW  0F
112E:  ANDWF  53,F
1130:  MOVFF  53,54
1134:  RCALL  10D4
....................    // envia a segunda parte do byte 
....................    lcd_envia_nibble(dado & 0x0f); 
1136:  MOVF   52,W
1138:  ANDLW  0F
113A:  MOVWF  53
113C:  MOVWF  54
113E:  RCALL  10D4
1140:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicializa��o do display 
.................... { 
....................    byte conta; 
....................    output_low(lcd_d4); 
*
152A:  BCF    F95.4
152C:  BCF    F8C.4
....................    output_low(lcd_d5); 
152E:  BCF    F95.5
1530:  BCF    F8C.5
....................    output_low(lcd_d6); 
1532:  BCF    F95.6
1534:  BCF    F8C.6
....................    output_low(lcd_d7); 
1536:  BCF    F95.7
1538:  BCF    F8C.7
....................    output_low(lcd_rs); 
153A:  BCF    F95.2
153C:  BCF    F8C.2
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_low(lcd_enable); 
153E:  BCF    F95.3
1540:  BCF    F8C.3
1542:  CLRF   16
1544:  BTFSC  FF2.7
1546:  BSF    16.7
1548:  BCF    FF2.7
....................    delay_ms(15); 
154A:  MOVLW  0F
154C:  MOVWF  4D
154E:  RCALL  1164
1550:  BTFSC  16.7
1552:  BSF    FF2.7
....................    // envia uma seq��ncia de 3 vezes 0x03 
....................    // e depois 0x02 para configurar o m�dulo 
....................    // para modo de 4 bits 
....................    for(conta=1;conta<=3;++conta) 
1554:  MOVLW  01
1556:  MOVWF  29
1558:  MOVF   29,W
155A:  SUBLW  03
155C:  BNC   1586
155E:  CLRF   16
1560:  BTFSC  FF2.7
1562:  BSF    16.7
1564:  BCF    FF2.7
....................    { 
....................       lcd_envia_nibble(3); 
1566:  MOVLW  03
1568:  MOVWF  54
156A:  RCALL  10D4
156C:  BTFSC  16.7
156E:  BSF    FF2.7
1570:  CLRF   16
1572:  BTFSC  FF2.7
1574:  BSF    16.7
1576:  BCF    FF2.7
....................       delay_ms(5); 
1578:  MOVLW  05
157A:  MOVWF  4D
157C:  RCALL  1164
157E:  BTFSC  16.7
1580:  BSF    FF2.7
1582:  INCF   29,F
1584:  BRA    1558
1586:  CLRF   16
1588:  BTFSC  FF2.7
158A:  BSF    16.7
158C:  BCF    FF2.7
....................    } 
....................    lcd_envia_nibble(2); 
158E:  MOVLW  02
1590:  MOVWF  54
1592:  RCALL  10D4
1594:  BTFSC  16.7
1596:  BSF    FF2.7
....................    // envia string de inicializa��o do display 
....................    for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
1598:  CLRF   29
159A:  MOVF   29,W
159C:  SUBLW  03
159E:  BNC   15C8
15A0:  CLRF   03
15A2:  MOVF   29,W
15A4:  MOVFF  FF2,2A
15A8:  BCF    FF2.7
15AA:  RCALL  1096
15AC:  BTFSC  2A.7
15AE:  BSF    FF2.7
15B0:  MOVWF  2A
15B2:  CLRF   16
15B4:  BTFSC  FF2.7
15B6:  BSF    16.7
15B8:  BCF    FF2.7
15BA:  CLRF   51
15BC:  MOVWF  52
15BE:  RCALL  110E
15C0:  BTFSC  16.7
15C2:  BSF    FF2.7
15C4:  INCF   29,F
15C6:  BRA    159A
15C8:  GOTO   1676 (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
1142:  DECFSZ 4E,W
1144:  BRA    1148
1146:  BRA    114E
....................       endereco = lcd_seg_lin; 
1148:  MOVLW  40
114A:  MOVWF  4F
114C:  BRA    1150
....................    else 
....................       endereco = 0; 
114E:  CLRF   4F
....................    endereco += x-1; 
1150:  MOVLW  01
1152:  SUBWF  4D,W
1154:  ADDWF  4F,F
....................    lcd_envia_byte(0,0x80|endereco); 
1156:  MOVF   4F,W
1158:  IORLW  80
115A:  MOVWF  50
115C:  CLRF   51
115E:  MOVWF  52
1160:  RCALL  110E
1162:  RETURN 0
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
*
118C:  MOVF   4C,W
118E:  XORLW  0C
1190:  BZ    11A0
1192:  XORLW  06
1194:  BZ    11B0
1196:  XORLW  07
1198:  BZ    11B0
119A:  XORLW  05
119C:  BZ    11BC
119E:  BRA    11C6
....................    { 
....................      case '\f'    :   lcd_envia_byte(0,1); 
11A0:  CLRF   51
11A2:  MOVLW  01
11A4:  MOVWF  52
11A6:  RCALL  110E
....................               delay_ms(2); 
11A8:  MOVLW  02
11AA:  MOVWF  4D
11AC:  RCALL  1164
....................             break; 
11AE:  BRA    11D0
....................      case '\n'   : 
....................      case '\r'    :   lcd_pos_xy(1,2); 
11B0:  MOVLW  01
11B2:  MOVWF  4D
11B4:  MOVLW  02
11B6:  MOVWF  4E
11B8:  RCALL  1142
....................               break; 
11BA:  BRA    11D0
....................      case '\b'    :   lcd_envia_byte(0,0x10); 
11BC:  CLRF   51
11BE:  MOVLW  10
11C0:  MOVWF  52
11C2:  RCALL  110E
....................               break; 
11C4:  BRA    11D0
....................      default   :   lcd_envia_byte(1,c); 
11C6:  MOVLW  01
11C8:  MOVWF  51
11CA:  MOVFF  4C,52
11CE:  RCALL  110E
....................               break; 
....................    } 
11D0:  RETURN 0
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
....................    char valor; 
....................    // seleciona a posi��o do caractere 
....................    lcd_pos_xy(x,y); 
....................    // ativa rs 
....................    output_high(lcd_rs); 
....................    // l� o caractere 
....................    valor = lcd_le_byte(); 
....................    // desativa rs 
....................    output_low(lcd_rs); 
....................    // retorna o valor do caractere 
....................    return valor; 
.................... } 
....................  
.................... void lcd_apaga() 
.................... { 
....................    lcd_envia_byte(0,1); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_cursor_on() 
....................     { 
.................... lcd_envia_byte(0,0x0E); 
....................     } 
....................  
.................... void lcd_cursor_pisca() 
....................     { 
.................... lcd_envia_byte(0,0x0F); 
....................     } 
....................  
.................... void lcd_cursor_off() 
....................     { 
....................  lcd_envia_byte(0,0x0C); 
....................     } 
....................  
.................... void lcd_corre_esquerda() 
....................     { 
....................  lcd_envia_byte(0,0x18); 
....................     } 
....................  
.................... void lcd_corre_direita() 
....................     { 
.................... lcd_envia_byte(0,0x1C); 
....................     } 
....................  
....................  
....................  
.................... #define button1 pin_a4 
.................... #define button2 pin_a5 
.................... #define button3 pin_e0 
.................... #define button4 pin_e1 
....................  
.................... int running; 
....................  
.................... //extremo esquerda, centro esquerda, centro direita, extrema direita 
.................... int16 ad1, ad2, ad3, ad4; 
.................... int16 timerBase = 1; 
.................... int8 adCounter; 
....................  
.................... ///Em qual decisão ele ta 
.................... int8 decisionCounter = 0; 
.................... ///Isso aqui serve para ele so contabilizar as tomadas de decisão a cadada 200ms (no timerBase) 
.................... int8 decisionInCoolDown = 0; 
....................  
.................... //Quantos porcento pra um lado ele pode estar antes de ser considerado desalinhado 
.................... float alignRatio = 0.7f; 
....................  
.................... void ClearScreen(); 
.................... void Setup(); 
.................... void AndarReto(); 
.................... ///Se tiver retorna 1 
.................... int8 IsCenterAlign(); 
.................... ///Curva a direita 
.................... int8 IsRight(); 
.................... int8 IsLeft(); 
.................... int8 IsAllAlign(); 
.................... ///uma linha preta sobre todos 
.................... void Align(); 
....................  
.................... #int_timer0 
.................... void timerTick() 
.................... { 
....................     if (adCounter == 0) 
*
13D8:  MOVF   22,F
13DA:  BNZ   13EC
....................     { 
....................         ad1 = read_adc(); 
13DC:  BSF    FC2.1
13DE:  BTFSC  FC2.1
13E0:  BRA    13DE
13E2:  MOVFF  FC3,18
13E6:  MOVFF  FC4,19
....................     } 
13EA:  BRA    142A
....................     else if (adCounter == 1) 
13EC:  DECFSZ 22,W
13EE:  BRA    1400
....................     { 
....................         ad2 = read_adc(); 
13F0:  BSF    FC2.1
13F2:  BTFSC  FC2.1
13F4:  BRA    13F2
13F6:  MOVFF  FC3,1A
13FA:  MOVFF  FC4,1B
....................     } 
13FE:  BRA    142A
....................     else if (adCounter == 2) 
1400:  MOVF   22,W
1402:  SUBLW  02
1404:  BNZ   1416
....................     { 
....................         ad3 = read_adc(); 
1406:  BSF    FC2.1
1408:  BTFSC  FC2.1
140A:  BRA    1408
140C:  MOVFF  FC3,1C
1410:  MOVFF  FC4,1D
....................     } 
1414:  BRA    142A
....................     else if (adCounter == 3) 
1416:  MOVF   22,W
1418:  SUBLW  03
141A:  BNZ   142A
....................     { 
....................         ad4 = read_adc(); 
141C:  BSF    FC2.1
141E:  BTFSC  FC2.1
1420:  BRA    141E
1422:  MOVFF  FC3,1E
1426:  MOVFF  FC4,1F
....................     } 
....................     if (timerBase == 2000) 
142A:  MOVF   20,W
142C:  SUBLW  D0
142E:  BNZ   14B2
1430:  MOVF   21,W
1432:  SUBLW  07
1434:  BNZ   14B2
....................     { 
....................         timerBase = 0; 
1436:  CLRF   21
1438:  CLRF   20
....................         //ClearScreen(); 
....................         lcd_pos_xy(1, 1); 
143A:  MOVLW  01
143C:  MOVWF  4D
143E:  MOVWF  4E
1440:  RCALL  1142
....................         printf(lcd_escreve, "1: "); 
1442:  MOVLW  DA
1444:  MOVWF  FF6
1446:  MOVLW  14
1448:  MOVWF  FF7
144A:  RCALL  11D2
....................         printf(lcd_escreve, "%04ld", ad1); 
144C:  MOVLW  0A
144E:  MOVWF  FE9
1450:  MOVFF  19,44
1454:  MOVFF  18,43
1458:  RCALL  11F2
....................         printf(lcd_escreve, " 2: "); 
145A:  MOVLW  DE
145C:  MOVWF  FF6
145E:  MOVLW  14
1460:  MOVWF  FF7
1462:  RCALL  11D2
....................         printf(lcd_escreve, "%04ld", ad2); 
1464:  MOVLW  0A
1466:  MOVWF  FE9
1468:  MOVFF  1B,44
146C:  MOVFF  1A,43
1470:  RCALL  11F2
....................         lcd_pos_xy(1, 2); 
1472:  MOVLW  01
1474:  MOVWF  4D
1476:  MOVLW  02
1478:  MOVWF  4E
147A:  RCALL  1142
....................         printf(lcd_escreve, "3: "); 
147C:  MOVLW  E4
147E:  MOVWF  FF6
1480:  MOVLW  14
1482:  MOVWF  FF7
1484:  RCALL  11D2
....................         printf(lcd_escreve, "%04ld", ad3); 
1486:  MOVLW  0A
1488:  MOVWF  FE9
148A:  MOVFF  1D,44
148E:  MOVFF  1C,43
1492:  RCALL  11F2
....................         // printf(lcd_escreve, " 4: "); 
....................         // printf(lcd_escreve, "%04ld", ad3); 
....................         printf(lcd_escreve, " d: %d", decisionCounter); 
1494:  MOVLW  E8
1496:  MOVWF  FF6
1498:  MOVLW  14
149A:  MOVWF  FF7
149C:  MOVLW  04
149E:  MOVWF  43
14A0:  BRA    12E4
14A2:  MOVFF  23,43
14A6:  MOVLW  18
14A8:  MOVWF  44
14AA:  BRA    132C
....................  
....................         if (decisionInCoolDown) 
14AC:  MOVF   24,F
14AE:  BZ    14B2
....................         { 
....................             decisionInCoolDown = 0; 
14B0:  CLRF   24
....................         } 
....................     } 
....................     timerBase++; 
14B2:  INCF   20,F
14B4:  BTFSC  FD8.2
14B6:  INCF   21,F
....................     adCounter++; 
14B8:  INCF   22,F
....................  
....................     if (adCounter > 4) 
14BA:  MOVF   22,W
14BC:  SUBLW  04
14BE:  BC    14C2
....................     { 
....................         adCounter = 0; 
14C0:  CLRF   22
....................     } 
....................  
....................     set_adc_channel(adCounter); 
14C2:  RLCF   22,W
14C4:  MOVWF  00
14C6:  RLCF   00,F
14C8:  MOVLW  FC
14CA:  ANDWF  00,F
14CC:  MOVF   FC2,W
14CE:  ANDLW  C3
14D0:  IORWF  00,W
14D2:  MOVWF  FC2
14D4:  BCF    FF2.2
14D6:  GOTO   1054
.................... } 
....................  
.................... void main() 
*
1CB0:  CLRF   FF8
1CB2:  BCF    FD0.7
1CB4:  BSF    07.7
1CB6:  CLRF   21
1CB8:  MOVLW  01
1CBA:  MOVWF  20
1CBC:  CLRF   23
1CBE:  CLRF   24
1CC0:  MOVLW  33
1CC2:  MOVWF  28
1CC4:  MOVWF  27
1CC6:  MOVWF  26
1CC8:  MOVLW  7E
1CCA:  MOVWF  25
1CCC:  MOVF   FC1,W
1CCE:  ANDLW  C0
1CD0:  IORLW  0F
1CD2:  MOVWF  FC1
1CD4:  MOVLW  07
1CD6:  MOVWF  FB4
.................... { 
....................     Setup(); 
1CD8:  BRA    164E
1CDA:  CLRF   16
1CDC:  BTFSC  FF2.7
1CDE:  BSF    16.7
1CE0:  BCF    FF2.7
....................     lcd_pos_xy(1, 1); 
1CE2:  MOVLW  01
1CE4:  MOVWF  4D
1CE6:  MOVWF  4E
1CE8:  CALL   1142
1CEC:  BTFSC  16.7
1CEE:  BSF    FF2.7
1CF0:  CLRF   16
1CF2:  BTFSC  FF2.7
1CF4:  BSF    16.7
1CF6:  BCF    FF2.7
....................     delay_ms(5); 
1CF8:  MOVLW  05
1CFA:  MOVWF  4D
1CFC:  CALL   1164
1D00:  BTFSC  16.7
1D02:  BSF    FF2.7
....................     printf(lcd_escreve, " Inicializando"); 
1D04:  MOVLW  F0
1D06:  MOVWF  FF6
1D08:  MOVLW  14
1D0A:  MOVWF  FF7
1D0C:  CLRF   16
1D0E:  BTFSC  FF2.7
1D10:  BSF    16.7
1D12:  BCF    FF2.7
1D14:  CALL   11D2
1D18:  BTFSC  16.7
1D1A:  BSF    FF2.7
....................     delay_ms(1000); 
1D1C:  MOVLW  04
1D1E:  MOVWF  29
1D20:  CLRF   16
1D22:  BTFSC  FF2.7
1D24:  BSF    16.7
1D26:  BCF    FF2.7
1D28:  MOVLW  FA
1D2A:  MOVWF  4D
1D2C:  CALL   1164
1D30:  BTFSC  16.7
1D32:  BSF    FF2.7
1D34:  DECFSZ 29,F
1D36:  BRA    1D20
....................     do 
....................     { 
....................         if (input(button1) == 0) 
1D38:  BSF    F92.4
1D3A:  BTFSC  F80.4
1D3C:  BRA    1D42
....................         { 
....................             running = 1; 
1D3E:  MOVLW  01
1D40:  MOVWF  17
....................         } 
....................         if (input(button2) == 0) 
1D42:  BSF    F92.5
1D44:  BTFSC  F80.5
1D46:  BRA    1D4A
....................         { 
....................             running = 0; 
1D48:  CLRF   17
....................         } 
....................         if (decisionCounter == 0) 
1D4A:  MOVF   23,F
1D4C:  BNZ   1D5C
....................         { 
....................             ///Esperar até ser colocado na linha de partida 
....................             if (IsAllAlign()) 
1D4E:  RCALL  1686
1D50:  MOVF   01,F
1D52:  BZ    1D5A
....................             { 
....................                 decisionCounter++; 
1D54:  INCF   23,F
....................                 decisionInCoolDown = 1; 
1D56:  MOVLW  01
1D58:  MOVWF  24
....................             } 
....................         } 
1D5A:  BRA    1DB6
....................         else if (decisionCounter == 1 && !decisionInCoolDown) 
1D5C:  DECFSZ 23,W
1D5E:  BRA    1D80
1D60:  MOVF   24,F
1D62:  BNZ   1D80
....................         { 
....................             if (running == 1) 
1D64:  DECFSZ 17,W
1D66:  BRA    1D6C
....................             { 
....................                 Align(); 
1D68:  BRA    1A54
....................             } 
1D6A:  BRA    1D72
....................             else 
....................             { 
....................                 SetBothPwm(0); 
1D6C:  CLRF   2A
1D6E:  CLRF   29
1D70:  RCALL  15EC
....................             } 
....................             if (IsAllAlign()) 
1D72:  RCALL  1686
1D74:  MOVF   01,F
1D76:  BZ    1D7E
....................             { 
....................                 decisionCounter++; 
1D78:  INCF   23,F
....................                 decisionInCoolDown = 1; 
1D7A:  MOVLW  01
1D7C:  MOVWF  24
....................             } 
....................         } 
1D7E:  BRA    1DB6
....................         else if (decisionCounter == 2 && !decisionInCoolDown) 
1D80:  MOVF   23,W
1D82:  SUBLW  02
1D84:  BNZ   1DB6
1D86:  MOVF   24,F
1D88:  BNZ   1DB6
....................         { 
....................             SetBothPwm(0); 
1D8A:  CLRF   2A
1D8C:  CLRF   29
1D8E:  RCALL  15EC
....................             delay_ms(2000); 
1D90:  MOVLW  08
1D92:  MOVWF  29
1D94:  CLRF   16
1D96:  BTFSC  FF2.7
1D98:  BSF    16.7
1D9A:  BCF    FF2.7
1D9C:  MOVLW  FA
1D9E:  MOVWF  4D
1DA0:  CALL   1164
1DA4:  BTFSC  16.7
1DA6:  BSF    FF2.7
1DA8:  DECFSZ 29,F
1DAA:  BRA    1D94
....................             SetBothPwm(900); 
1DAC:  MOVLW  03
1DAE:  MOVWF  2A
1DB0:  MOVLW  84
1DB2:  MOVWF  29
1DB4:  RCALL  15EC
....................         } 
....................     } while (1); 
1DB6:  BRA    1D38
.................... } 
....................  
1DB8:  SLEEP 
.................... void AndarReto() 
.................... { 
....................     SetBothPwm(1023); 
.................... } 
....................  
.................... int8 IsCenterAlign() 
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad1 + ad2); 
....................     float ad3Ratio = (float)ad3 / (float)(ad1 + ad2); 
....................     if (ad2 + ad3 > 300 && ad2Ratio < alignRatio && ad3Ratio < alignRatio) 
....................     { 
....................         return 1; 
....................     } 
....................     else 
....................     { 
....................         return 0; 
....................     } 
.................... } 
.................... int8 IsRight() 
.................... { 
....................     if (ad1 < 300 && ad2 >= 300 && ad3 >= 300 && ad4 >= 300) 
....................     { 
....................         return 1; 
....................     } 
....................     else 
....................     { 
....................         return 0; 
....................     } 
.................... } 
.................... int8 IsLeft() 
.................... { 
....................     if (ad1 >= 300 && ad2 >= 300 && ad3 >= 300 && ad4 < 300) 
....................     { 
....................         return 1; 
....................     } 
....................     else 
....................     { 
....................         return 0; 
....................     } 
.................... } 
.................... int8 IsAllAlign() 
.................... { 
....................     if (ad1 >= 300 && ad2 >= 300 && ad3 >= 300 && ad4 >= 300) 
*
1686:  MOVF   19,W
1688:  SUBLW  00
168A:  BC    16CE
168C:  XORLW  FF
168E:  BNZ   1696
1690:  MOVF   18,W
1692:  SUBLW  2B
1694:  BC    16CE
1696:  MOVF   1B,W
1698:  SUBLW  00
169A:  BC    16CE
169C:  XORLW  FF
169E:  BNZ   16A6
16A0:  MOVF   1A,W
16A2:  SUBLW  2B
16A4:  BC    16CE
16A6:  MOVF   1D,W
16A8:  SUBLW  00
16AA:  BC    16CE
16AC:  XORLW  FF
16AE:  BNZ   16B6
16B0:  MOVF   1C,W
16B2:  SUBLW  2B
16B4:  BC    16CE
16B6:  MOVF   1F,W
16B8:  SUBLW  00
16BA:  BC    16CE
16BC:  XORLW  FF
16BE:  BNZ   16C6
16C0:  MOVF   1E,W
16C2:  SUBLW  2B
16C4:  BC    16CE
....................     { 
....................         return 1; 
16C6:  MOVLW  01
16C8:  MOVWF  01
16CA:  BRA    16D2
....................     } 
16CC:  BRA    16D2
....................     else 
....................     { 
....................         return 0; 
16CE:  MOVLW  00
16D0:  MOVWF  01
....................     } 
16D2:  RETURN 0
.................... } 
....................  
.................... void Align() 
*
1A54:  MOVFF  1B,36
1A58:  MOVFF  1A,35
1A5C:  RCALL  16D4
1A5E:  MOVFF  03,34
1A62:  MOVFF  02,33
1A66:  MOVFF  01,32
1A6A:  MOVFF  00,31
1A6E:  MOVF   1C,W
1A70:  ADDWF  1A,W
1A72:  MOVWF  01
1A74:  MOVF   1D,W
1A76:  ADDWFC 1B,W
1A78:  MOVWF  03
1A7A:  MOVFF  01,35
1A7E:  MOVWF  36
1A80:  RCALL  16D4
1A82:  MOVFF  34,38
1A86:  MOVFF  33,37
1A8A:  MOVFF  32,36
1A8E:  MOVFF  31,35
1A92:  MOVFF  03,3C
1A96:  MOVFF  02,3B
1A9A:  MOVFF  01,3A
1A9E:  MOVFF  00,39
1AA2:  RCALL  170A
1AA4:  MOVFF  03,2C
1AA8:  MOVFF  02,2B
1AAC:  MOVFF  01,2A
1AB0:  MOVFF  00,29
1AB4:  MOVFF  1D,36
1AB8:  MOVFF  1C,35
1ABC:  RCALL  16D4
1ABE:  MOVFF  03,34
1AC2:  MOVFF  02,33
1AC6:  MOVFF  01,32
1ACA:  MOVFF  00,31
1ACE:  MOVF   1C,W
1AD0:  ADDWF  1A,W
1AD2:  MOVWF  01
1AD4:  MOVF   1D,W
1AD6:  ADDWFC 1B,W
1AD8:  MOVWF  03
1ADA:  MOVFF  01,35
1ADE:  MOVWF  36
1AE0:  RCALL  16D4
1AE2:  MOVFF  34,38
1AE6:  MOVFF  33,37
1AEA:  MOVFF  32,36
1AEE:  MOVFF  31,35
1AF2:  MOVFF  03,3C
1AF6:  MOVFF  02,3B
1AFA:  MOVFF  01,3A
1AFE:  MOVFF  00,39
1B02:  RCALL  170A
1B04:  MOVFF  03,30
1B08:  MOVFF  02,2F
1B0C:  MOVFF  01,2E
1B10:  MOVFF  00,2D
.................... { 
....................     float ad2Ratio = (float)ad2 / (float)(ad2 + ad3); 
....................     float ad3Ratio = (float)ad3 / (float)(ad2 + ad3); 
....................  
....................     ///alto significa escuro 
....................     if (ad2 + ad3 > 400) 
1B14:  MOVF   1C,W
1B16:  ADDWF  1A,W
1B18:  MOVWF  31
1B1A:  MOVF   1D,W
1B1C:  ADDWFC 1B,W
1B1E:  MOVWF  32
1B20:  SUBLW  00
1B22:  BTFSC  FD8.0
1B24:  BRA    1C7C
1B26:  XORLW  FF
1B28:  BNZ   1B32
1B2A:  MOVF   31,W
1B2C:  SUBLW  90
1B2E:  BTFSC  FD8.0
1B30:  BRA    1C7C
1B32:  CLRF   16
1B34:  BTFSC  FF2.7
1B36:  BSF    16.7
1B38:  BCF    FF2.7
....................     { 
....................         //Como quanto mais escuro mais alto, isso significa que o que esta com menos tem que subir, 
....................         //e vai subir proporcionalmente a quanto a menos ele tem, esse valor é exatamente o oposto (que esta no outro ad) 
....................  
....................         lcd_pos_xy(1, 2); 
1B3A:  MOVLW  01
1B3C:  MOVWF  4D
1B3E:  MOVLW  02
1B40:  MOVWF  4E
1B42:  CALL   1142
1B46:  BTFSC  16.7
1B48:  BSF    FF2.7
....................  
....................         //O ad1 é o da direita, se este esta maior, significa que o robo esta a direit 
....................         if (ad2Ratio > alignRatio) 
1B4A:  MOVFF  28,34
1B4E:  MOVFF  27,33
1B52:  MOVFF  26,32
1B56:  MOVFF  25,31
1B5A:  MOVFF  2C,38
1B5E:  MOVFF  2B,37
1B62:  MOVFF  2A,36
1B66:  MOVFF  29,35
1B6A:  RCALL  1864
1B6C:  BNC   1B98
....................         { 
....................             printf(lcd_escreve, "Esta a direita"); 
1B6E:  MOVLW  00
1B70:  MOVWF  FF6
1B72:  MOVLW  15
1B74:  MOVWF  FF7
1B76:  CLRF   16
1B78:  BTFSC  FF2.7
1B7A:  BSF    16.7
1B7C:  BCF    FF2.7
1B7E:  CALL   11D2
1B82:  BTFSC  16.7
1B84:  BSF    FF2.7
....................             SetRight(1000); 
1B86:  MOVLW  03
1B88:  MOVWF  34
1B8A:  MOVLW  E8
1B8C:  MOVWF  33
1B8E:  RCALL  18DA
....................             SetLeft(0); 
1B90:  CLRF   34
1B92:  CLRF   33
1B94:  RCALL  1902
....................         } 
1B96:  BRA    1C7A
....................         else if (ad3Ratio > alignRatio) 
1B98:  MOVFF  28,34
1B9C:  MOVFF  27,33
1BA0:  MOVFF  26,32
1BA4:  MOVFF  25,31
1BA8:  MOVFF  30,38
1BAC:  MOVFF  2F,37
1BB0:  MOVFF  2E,36
1BB4:  MOVFF  2D,35
1BB8:  RCALL  1864
1BBA:  BNC   1BE6
....................         { 
....................             printf(lcd_escreve, "Esta a esquerda"); 
1BBC:  MOVLW  10
1BBE:  MOVWF  FF6
1BC0:  MOVLW  15
1BC2:  MOVWF  FF7
1BC4:  CLRF   16
1BC6:  BTFSC  FF2.7
1BC8:  BSF    16.7
1BCA:  BCF    FF2.7
1BCC:  CALL   11D2
1BD0:  BTFSC  16.7
1BD2:  BSF    FF2.7
....................             SetRight(0); 
1BD4:  CLRF   34
1BD6:  CLRF   33
1BD8:  RCALL  18DA
....................             SetLeft(1000); 
1BDA:  MOVLW  03
1BDC:  MOVWF  34
1BDE:  MOVLW  E8
1BE0:  MOVWF  33
1BE2:  RCALL  1902
....................         } 
1BE4:  BRA    1C7A
....................         else 
....................         { 
....................             SetLeft((long)(ad2Ratio * 100) + 850); 
1BE6:  MOVFF  2C,34
1BEA:  MOVFF  2B,33
1BEE:  MOVFF  2A,32
1BF2:  MOVFF  29,31
1BF6:  CLRF   38
1BF8:  CLRF   37
1BFA:  MOVLW  48
1BFC:  MOVWF  36
1BFE:  MOVLW  85
1C00:  MOVWF  35
1C02:  RCALL  192A
1C04:  MOVFF  03,34
1C08:  MOVFF  02,33
1C0C:  MOVFF  01,32
1C10:  MOVFF  00,31
1C14:  RCALL  1A1C
1C16:  MOVFF  02,32
1C1A:  MOVFF  01,31
1C1E:  MOVLW  52
1C20:  ADDWF  31,F
1C22:  MOVLW  03
1C24:  ADDWFC 32,F
1C26:  MOVFF  32,34
1C2A:  MOVFF  31,33
1C2E:  RCALL  1902
....................             SetRight((long)(ad3Ratio * 100) + 850); 
1C30:  MOVFF  30,34
1C34:  MOVFF  2F,33
1C38:  MOVFF  2E,32
1C3C:  MOVFF  2D,31
1C40:  CLRF   38
1C42:  CLRF   37
1C44:  MOVLW  48
1C46:  MOVWF  36
1C48:  MOVLW  85
1C4A:  MOVWF  35
1C4C:  RCALL  192A
1C4E:  MOVFF  03,34
1C52:  MOVFF  02,33
1C56:  MOVFF  01,32
1C5A:  MOVFF  00,31
1C5E:  RCALL  1A1C
1C60:  MOVFF  02,32
1C64:  MOVFF  01,31
1C68:  MOVLW  52
1C6A:  ADDWF  31,F
1C6C:  MOVLW  03
1C6E:  ADDWFC 32,F
1C70:  MOVFF  32,34
1C74:  MOVFF  31,33
1C78:  RCALL  18DA
....................         } 
....................     } 
1C7A:  BRA    1CAC
1C7C:  CLRF   16
1C7E:  BTFSC  FF2.7
1C80:  BSF    16.7
1C82:  BCF    FF2.7
....................     else 
....................     { 
....................         ///Esta fora da pista, deve fazer algo 
....................         //SetBothPwm(0); 
....................         lcd_pos_xy(1, 2); 
1C84:  MOVLW  01
1C86:  MOVWF  4D
1C88:  MOVLW  02
1C8A:  MOVWF  4E
1C8C:  CALL   1142
1C90:  BTFSC  16.7
1C92:  BSF    FF2.7
....................  
....................         printf(lcd_escreve, "Se perdeu"); 
1C94:  MOVLW  20
1C96:  MOVWF  FF6
1C98:  MOVLW  15
1C9A:  MOVWF  FF7
1C9C:  CLRF   16
1C9E:  BTFSC  FF2.7
1CA0:  BSF    16.7
1CA2:  BCF    FF2.7
1CA4:  CALL   11D2
1CA8:  BTFSC  16.7
1CAA:  BSF    FF2.7
....................     } 
1CAC:  GOTO   1D6A (RETURN)
.................... } 
....................  
.................... void Setup() 
.................... { 
....................     adCounter = 1; 
*
164E:  MOVLW  01
1650:  MOVWF  22
....................     running = 1; 
1652:  MOVWF  17
....................  
....................     setup_adc_ports(AN0_TO_AN3); 
1654:  MOVF   FC1,W
1656:  ANDLW  C0
1658:  IORLW  0B
165A:  MOVWF  FC1
....................     setup_adc(ADC_CLOCK_DIV_4); 
165C:  MOVF   FC0,W
165E:  ANDLW  C0
1660:  IORLW  04
1662:  MOVWF  FC0
1664:  BSF    FC0.7
1666:  BSF    FC2.0
....................  
....................     setup_timer_0(RTCC_INTERNAL | RTCC_DIV_2 | RTCC_8_BIT); 
1668:  MOVLW  C0
166A:  MOVWF  FD5
....................     set_timer0(0); 
166C:  CLRF   FD7
166E:  CLRF   FD6
....................     enable_interrupts(INT_TIMER0); 
1670:  BSF    FF2.5
....................     enable_interrupts(GLOBAL); 
1672:  IORWF  FF2,F
....................  
....................     lcd_ini(); 
1674:  BRA    152A
....................     MotorInitialize(); 
1676:  BRA    15CC
....................     SetBothPwm(1023); 
1678:  MOVLW  03
167A:  MOVWF  2A
167C:  SETF   29
167E:  RCALL  15EC
....................     frente(); 
1680:  BRA    163A
1682:  GOTO   1CDA (RETURN)
.................... } 
....................  
.................... void ClearScreen() 
.................... { 
....................     lcd_escreve('\f'); 
.................... } 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
